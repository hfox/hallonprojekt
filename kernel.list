
kernel.elf:     file format elf32-littlearm


Disassembly of section .init:

00008000 <_start>:
    8000:	e59ff018 	ldr	pc, [pc, #24]	; 8020 <reset_handler>
    8004:	e59ff018 	ldr	pc, [pc, #24]	; 8024 <undefined_handler>
    8008:	e59ff018 	ldr	pc, [pc, #24]	; 8028 <swi_handler>
    800c:	e59ff018 	ldr	pc, [pc, #24]	; 802c <prefetch_handler>
    8010:	e59ff018 	ldr	pc, [pc, #24]	; 8030 <data_handler>
    8014:	e59ff018 	ldr	pc, [pc, #24]	; 8034 <unused_handler>
    8018:	e59ff018 	ldr	pc, [pc, #24]	; 8038 <irq_handler>
    801c:	e59ff018 	ldr	pc, [pc, #24]	; 803c <fiq_handler>

00008020 <reset_handler>:
    8020:	00008040 	andeq	r8, r0, r0, asr #32

00008024 <undefined_handler>:
    8024:	00013950 	andeq	r3, r1, r0, asr r9

00008028 <swi_handler>:
    8028:	000103f0 	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>

0000802c <prefetch_handler>:
    802c:	00013954 	andeq	r3, r1, r4, asr r9

00008030 <data_handler>:
    8030:	00013958 	andeq	r3, r1, r8, asr r9

00008034 <unused_handler>:
    8034:	0001395c 	andeq	r3, r1, ip, asr r9

00008038 <irq_handler>:
    8038:	000104a0 	andeq	r0, r1, r0, lsr #9

0000803c <fiq_handler>:
    803c:	00013960 	andeq	r3, r1, r0, ror #18

00008040 <reset>:
    8040:	e3a00902 	mov	r0, #32768	; 0x8000
    8044:	e3a01000 	mov	r1, #0
    8048:	e8b003fc 	ldm	r0!, {r2, r3, r4, r5, r6, r7, r8, r9}
    804c:	e8a103fc 	stmia	r1!, {r2, r3, r4, r5, r6, r7, r8, r9}
    8050:	e8b003fc 	ldm	r0!, {r2, r3, r4, r5, r6, r7, r8, r9}
    8054:	e8a103fc 	stmia	r1!, {r2, r3, r4, r5, r6, r7, r8, r9}
    8058:	e3a000d2 	mov	r0, #210	; 0xd2
    805c:	e121f000 	msr	CPSR_c, r0
    8060:	e3a0d902 	mov	sp, #32768	; 0x8000
    8064:	e3a000d1 	mov	r0, #209	; 0xd1
    8068:	e121f000 	msr	CPSR_c, r0
    806c:	e3a0d901 	mov	sp, #16384	; 0x4000
    8070:	e3a000d3 	mov	r0, #211	; 0xd3
    8074:	e121f000 	msr	CPSR_c, r0
    8078:	e3a0d302 	mov	sp, #134217728	; 0x8000000
    807c:	e59f0018 	ldr	r0, [pc, #24]	; 809c <zero_loop+0x14>
    8080:	e59f1018 	ldr	r1, [pc, #24]	; 80a0 <zero_loop+0x18>
    8084:	e3a02000 	mov	r2, #0

00008088 <zero_loop>:
    8088:	e1500001 	cmp	r0, r1
    808c:	b4802004 	strlt	r2, [r0], #4
    8090:	bafffffc 	blt	8088 <zero_loop>
    8094:	eb002f03 	bl	13ca8 <DisableInterrupts>
    8098:	ea003019 	b	14104 <main>
    809c:	000144e0 	andeq	r4, r1, r0, ror #9
    80a0:	000158b8 			; <UNDEFINED> instruction: 0x000158b8

Disassembly of section .text:

00010000 <pxPortInitialiseStack>:
 * portSAVE_CONTEXT had been called.
 *
 * See header file for description. 
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
   10000:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   10004:	e28db000 	add	fp, sp, #0
   10008:	e24dd01c 	sub	sp, sp, #28
   1000c:	e50b0010 	str	r0, [fp, #-16]
   10010:	e50b1014 	str	r1, [fp, #-20]
   10014:	e50b2018 	str	r2, [fp, #-24]
portSTACK_TYPE *pxOriginalTOS;

	pxOriginalTOS = pxTopOfStack;
   10018:	e51b3010 	ldr	r3, [fp, #-16]
   1001c:	e50b3008 	str	r3, [fp, #-8]

	/* To ensure asserts in tasks.c don't fail, although in this case the assert
	is not really required. */
	pxTopOfStack--;
   10020:	e51b3010 	ldr	r3, [fp, #-16]
   10024:	e2433004 	sub	r3, r3, #4
   10028:	e50b3010 	str	r3, [fp, #-16]
	expected by the portRESTORE_CONTEXT() macro. */

	/* First on the stack is the return address - which in this case is the
	start of the task.  The offset is added to make the return address appear
	as it would within an IRQ ISR. */
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode + portINSTRUCTION_SIZE;		
   1002c:	e51b3014 	ldr	r3, [fp, #-20]
   10030:	e2832004 	add	r2, r3, #4
   10034:	e51b3010 	ldr	r3, [fp, #-16]
   10038:	e5832000 	str	r2, [r3]
	pxTopOfStack--;
   1003c:	e51b3010 	ldr	r3, [fp, #-16]
   10040:	e2433004 	sub	r3, r3, #4
   10044:	e50b3010 	str	r3, [fp, #-16]

	*pxTopOfStack = ( portSTACK_TYPE ) 0xaaaaaaaa;	/* R14 */
   10048:	e51b3010 	ldr	r3, [fp, #-16]
   1004c:	e59f21b8 	ldr	r2, [pc, #440]	; 1020c <pxPortInitialiseStack+0x20c>
   10050:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   10054:	e51b3010 	ldr	r3, [fp, #-16]
   10058:	e2433004 	sub	r3, r3, #4
   1005c:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) pxOriginalTOS; /* Stack used when task starts goes in R13. */
   10060:	e51b2008 	ldr	r2, [fp, #-8]
   10064:	e51b3010 	ldr	r3, [fp, #-16]
   10068:	e5832000 	str	r2, [r3]
	pxTopOfStack--;
   1006c:	e51b3010 	ldr	r3, [fp, #-16]
   10070:	e2433004 	sub	r3, r3, #4
   10074:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x12121212;	/* R12 */
   10078:	e51b3010 	ldr	r3, [fp, #-16]
   1007c:	e59f218c 	ldr	r2, [pc, #396]	; 10210 <pxPortInitialiseStack+0x210>
   10080:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   10084:	e51b3010 	ldr	r3, [fp, #-16]
   10088:	e2433004 	sub	r3, r3, #4
   1008c:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x11111111;	/* R11 */
   10090:	e51b3010 	ldr	r3, [fp, #-16]
   10094:	e59f2178 	ldr	r2, [pc, #376]	; 10214 <pxPortInitialiseStack+0x214>
   10098:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   1009c:	e51b3010 	ldr	r3, [fp, #-16]
   100a0:	e2433004 	sub	r3, r3, #4
   100a4:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x10101010;	/* R10 */
   100a8:	e51b3010 	ldr	r3, [fp, #-16]
   100ac:	e59f2164 	ldr	r2, [pc, #356]	; 10218 <pxPortInitialiseStack+0x218>
   100b0:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   100b4:	e51b3010 	ldr	r3, [fp, #-16]
   100b8:	e2433004 	sub	r3, r3, #4
   100bc:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x09090909;	/* R9 */
   100c0:	e51b3010 	ldr	r3, [fp, #-16]
   100c4:	e59f2150 	ldr	r2, [pc, #336]	; 1021c <pxPortInitialiseStack+0x21c>
   100c8:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   100cc:	e51b3010 	ldr	r3, [fp, #-16]
   100d0:	e2433004 	sub	r3, r3, #4
   100d4:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x08080808;	/* R8 */
   100d8:	e51b3010 	ldr	r3, [fp, #-16]
   100dc:	e59f213c 	ldr	r2, [pc, #316]	; 10220 <pxPortInitialiseStack+0x220>
   100e0:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   100e4:	e51b3010 	ldr	r3, [fp, #-16]
   100e8:	e2433004 	sub	r3, r3, #4
   100ec:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x07070707;	/* R7 */
   100f0:	e51b3010 	ldr	r3, [fp, #-16]
   100f4:	e59f2128 	ldr	r2, [pc, #296]	; 10224 <pxPortInitialiseStack+0x224>
   100f8:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   100fc:	e51b3010 	ldr	r3, [fp, #-16]
   10100:	e2433004 	sub	r3, r3, #4
   10104:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x06060606;	/* R6 */
   10108:	e51b3010 	ldr	r3, [fp, #-16]
   1010c:	e59f2114 	ldr	r2, [pc, #276]	; 10228 <pxPortInitialiseStack+0x228>
   10110:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   10114:	e51b3010 	ldr	r3, [fp, #-16]
   10118:	e2433004 	sub	r3, r3, #4
   1011c:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x05050505;	/* R5 */
   10120:	e51b3010 	ldr	r3, [fp, #-16]
   10124:	e59f2100 	ldr	r2, [pc, #256]	; 1022c <pxPortInitialiseStack+0x22c>
   10128:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   1012c:	e51b3010 	ldr	r3, [fp, #-16]
   10130:	e2433004 	sub	r3, r3, #4
   10134:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x04040404;	/* R4 */
   10138:	e51b3010 	ldr	r3, [fp, #-16]
   1013c:	e59f20ec 	ldr	r2, [pc, #236]	; 10230 <pxPortInitialiseStack+0x230>
   10140:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   10144:	e51b3010 	ldr	r3, [fp, #-16]
   10148:	e2433004 	sub	r3, r3, #4
   1014c:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x03030303;	/* R3 */
   10150:	e51b3010 	ldr	r3, [fp, #-16]
   10154:	e59f20d8 	ldr	r2, [pc, #216]	; 10234 <pxPortInitialiseStack+0x234>
   10158:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   1015c:	e51b3010 	ldr	r3, [fp, #-16]
   10160:	e2433004 	sub	r3, r3, #4
   10164:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x02020202;	/* R2 */
   10168:	e51b3010 	ldr	r3, [fp, #-16]
   1016c:	e59f20c4 	ldr	r2, [pc, #196]	; 10238 <pxPortInitialiseStack+0x238>
   10170:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   10174:	e51b3010 	ldr	r3, [fp, #-16]
   10178:	e2433004 	sub	r3, r3, #4
   1017c:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x01010101;	/* R1 */
   10180:	e51b3010 	ldr	r3, [fp, #-16]
   10184:	e59f20b0 	ldr	r2, [pc, #176]	; 1023c <pxPortInitialiseStack+0x23c>
   10188:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   1018c:	e51b3010 	ldr	r3, [fp, #-16]
   10190:	e2433004 	sub	r3, r3, #4
   10194:	e50b3010 	str	r3, [fp, #-16]

	/* When the task starts it will expect to find the function parameter in
	R0. */
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters; /* R0 */
   10198:	e51b2018 	ldr	r2, [fp, #-24]
   1019c:	e51b3010 	ldr	r3, [fp, #-16]
   101a0:	e5832000 	str	r2, [r3]
	pxTopOfStack--;
   101a4:	e51b3010 	ldr	r3, [fp, #-16]
   101a8:	e2433004 	sub	r3, r3, #4
   101ac:	e50b3010 	str	r3, [fp, #-16]

	/* The last thing onto the stack is the status register, which is set for
	system mode, with interrupts enabled. */
	*pxTopOfStack = ( portSTACK_TYPE ) portINITIAL_SPSR;
   101b0:	e51b3010 	ldr	r3, [fp, #-16]
   101b4:	e3a0201f 	mov	r2, #31
   101b8:	e5832000 	str	r2, [r3]

	if( ( ( unsigned long ) pxCode & 0x01UL ) != 0x00 )
   101bc:	e51b3014 	ldr	r3, [fp, #-20]
   101c0:	e2033001 	and	r3, r3, #1
   101c4:	e3530000 	cmp	r3, #0
   101c8:	0a000004 	beq	101e0 <pxPortInitialiseStack+0x1e0>
	{
		/* We want the task to start in thumb mode. */
		*pxTopOfStack |= portTHUMB_MODE_BIT;
   101cc:	e51b3010 	ldr	r3, [fp, #-16]
   101d0:	e5933000 	ldr	r3, [r3]
   101d4:	e3832020 	orr	r2, r3, #32
   101d8:	e51b3010 	ldr	r3, [fp, #-16]
   101dc:	e5832000 	str	r2, [r3]
	}

	pxTopOfStack--;
   101e0:	e51b3010 	ldr	r3, [fp, #-16]
   101e4:	e2433004 	sub	r3, r3, #4
   101e8:	e50b3010 	str	r3, [fp, #-16]

	/* Some optimisation levels use the stack differently to others.  This 
	means the interrupt flags cannot always be stored on the stack and will
	instead be stored in a variable, which is then saved as part of the
	tasks context. */
	*pxTopOfStack = portNO_CRITICAL_SECTION_NESTING;
   101ec:	e51b3010 	ldr	r3, [fp, #-16]
   101f0:	e3a02000 	mov	r2, #0
   101f4:	e5832000 	str	r2, [r3]

	return pxTopOfStack;
   101f8:	e51b3010 	ldr	r3, [fp, #-16]
}
   101fc:	e1a00003 	mov	r0, r3
   10200:	e28bd000 	add	sp, fp, #0
   10204:	e8bd0800 	pop	{fp}
   10208:	e12fff1e 	bx	lr
   1020c:	aaaaaaaa 	bge	feabacbc <_estack+0xf6aaacbc>
   10210:	12121212 	andsne	r1, r2, #536870913	; 0x20000001
   10214:	11111111 	tstne	r1, r1, lsl r1
   10218:	10101010 	andsne	r1, r0, r0, lsl r0
   1021c:	09090909 	stmdbeq	r9, {r0, r3, r8, fp}
   10220:	08080808 	stmdaeq	r8, {r3, fp}
   10224:	07070707 	streq	r0, [r7, -r7, lsl #14]
   10228:	06060606 	streq	r0, [r6], -r6, lsl #12
   1022c:	05050505 	streq	r0, [r5, #-1285]	; 0x505
   10230:	04040404 	streq	r0, [r4], #-1028	; 0x404
   10234:	03030303 	movweq	r0, #13059	; 0x3303
   10238:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
   1023c:	01010101 	tsteq	r1, r1, lsl #2

00010240 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

portBASE_TYPE xPortStartScheduler( void )
{
   10240:	e92d4800 	push	{fp, lr}
   10244:	e28db004 	add	fp, sp, #4
	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
   10248:	eb000016 	bl	102a8 <prvSetupTimerInterrupt>

	/* Start the first task. */
	vPortISRStartFirstTask();	
   1024c:	eb000042 	bl	1035c <vPortISRStartFirstTask>

	/* Should not get here! */
	return 0;
   10250:	e3a03000 	mov	r3, #0
}
   10254:	e1a00003 	mov	r0, r3
   10258:	e8bd8800 	pop	{fp, pc}

0001025c <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
   1025c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   10260:	e28db000 	add	fp, sp, #0
	/* It is unlikely that the ARM port will require this function as there
	is nothing to return to.  */
}
   10264:	e28bd000 	add	sp, fp, #0
   10268:	e8bd0800 	pop	{fp}
   1026c:	e12fff1e 	bx	lr

00010270 <vTickISR>:
 *	as thats done in the bottom-half of the ISR.
 *
 *	See bt_interrupts.c in the RaspberryPi Drivers folder.
 */
void vTickISR(int nIRQ, void *pParam )
{
   10270:	e92d4800 	push	{fp, lr}
   10274:	e28db004 	add	fp, sp, #4
   10278:	e24dd008 	sub	sp, sp, #8
   1027c:	e50b0008 	str	r0, [fp, #-8]
   10280:	e50b100c 	str	r1, [fp, #-12]
	vTaskIncrementTick();
   10284:	eb0009a5 	bl	12920 <vTaskIncrementTick>

	#if configUSE_PREEMPTION == 1
	vTaskSwitchContext();
   10288:	eb000a75 	bl	12c64 <vTaskSwitchContext>
	#endif

	pRegs->CLI = 0;			// Acknowledge the timer interrupt.
   1028c:	e59f3010 	ldr	r3, [pc, #16]	; 102a4 <vTickISR+0x34>
   10290:	e5933000 	ldr	r3, [r3]
   10294:	e3a02000 	mov	r2, #0
   10298:	e583200c 	str	r2, [r3, #12]
}
   1029c:	e24bd004 	sub	sp, fp, #4
   102a0:	e8bd8800 	pop	{fp, pc}
   102a4:	000141c0 	andeq	r4, r1, r0, asr #3

000102a8 <prvSetupTimerInterrupt>:

/*
 * Setup the timer 0 to generate the tick interrupts at the required frequency.
 */
static void prvSetupTimerInterrupt( void )
{
   102a8:	e92d4800 	push	{fp, lr}
   102ac:	e28db004 	add	fp, sp, #4
   102b0:	e24dd008 	sub	sp, sp, #8
	unsigned long ulCompareMatch;
	

	/* Calculate the match value required for our wanted tick rate. */
	ulCompareMatch = 1000000 / configTICK_RATE_HZ;
   102b4:	e3a03ffa 	mov	r3, #1000	; 0x3e8
   102b8:	e50b3008 	str	r3, [fp, #-8]
	{
		ulCompareMatch /= ( portPRESCALE_VALUE + 1 );
	}
	#endif

	DisableInterrupts();
   102bc:	eb000e79 	bl	13ca8 <DisableInterrupts>
	InitInterruptController();
   102c0:	eb000e04 	bl	13ad8 <InitInterruptController>
	DisableInterrupt(64);
   102c4:	e3a00040 	mov	r0, #64	; 0x40
   102c8:	eb000e59 	bl	13c34 <DisableInterrupt>
	
	RegisterInterrupt(64, vTickISR, NULL);
   102cc:	e3a00040 	mov	r0, #64	; 0x40
   102d0:	e59f1074 	ldr	r1, [pc, #116]	; 1034c <prvSetupTimerInterrupt+0xa4>
   102d4:	e3a02000 	mov	r2, #0
   102d8:	eb000e1d 	bl	13b54 <RegisterInterrupt>

	pRegs->CTL = 0x003E0000;
   102dc:	e59f306c 	ldr	r3, [pc, #108]	; 10350 <prvSetupTimerInterrupt+0xa8>
   102e0:	e5933000 	ldr	r3, [r3]
   102e4:	e3a0283e 	mov	r2, #4063232	; 0x3e0000
   102e8:	e5832008 	str	r2, [r3, #8]
	pRegs->LOD = 1000 - 1;
   102ec:	e59f305c 	ldr	r3, [pc, #92]	; 10350 <prvSetupTimerInterrupt+0xa8>
   102f0:	e5933000 	ldr	r3, [r3]
   102f4:	e59f2058 	ldr	r2, [pc, #88]	; 10354 <prvSetupTimerInterrupt+0xac>
   102f8:	e5832000 	str	r2, [r3]
	pRegs->RLD = 1000 - 1;
   102fc:	e59f304c 	ldr	r3, [pc, #76]	; 10350 <prvSetupTimerInterrupt+0xa8>
   10300:	e5933000 	ldr	r3, [r3]
   10304:	e59f2048 	ldr	r2, [pc, #72]	; 10354 <prvSetupTimerInterrupt+0xac>
   10308:	e5832018 	str	r2, [r3, #24]
	pRegs->DIV = portTIMER_PRESCALE;
   1030c:	e59f303c 	ldr	r3, [pc, #60]	; 10350 <prvSetupTimerInterrupt+0xa8>
   10310:	e5933000 	ldr	r3, [r3]
   10314:	e3a020f9 	mov	r2, #249	; 0xf9
   10318:	e583201c 	str	r2, [r3, #28]
	pRegs->CLI = 0;
   1031c:	e59f302c 	ldr	r3, [pc, #44]	; 10350 <prvSetupTimerInterrupt+0xa8>
   10320:	e5933000 	ldr	r3, [r3]
   10324:	e3a02000 	mov	r2, #0
   10328:	e583200c 	str	r2, [r3, #12]
	pRegs->CTL = 0x003E00A2;
   1032c:	e59f301c 	ldr	r3, [pc, #28]	; 10350 <prvSetupTimerInterrupt+0xa8>
   10330:	e5933000 	ldr	r3, [r3]
   10334:	e59f201c 	ldr	r2, [pc, #28]	; 10358 <prvSetupTimerInterrupt+0xb0>
   10338:	e5832008 	str	r2, [r3, #8]

	EnableInterrupt(64);
   1033c:	e3a00040 	mov	r0, #64	; 0x40
   10340:	eb000e1c 	bl	13bb8 <EnableInterrupt>
}
   10344:	e24bd004 	sub	sp, fp, #4
   10348:	e8bd8800 	pop	{fp, pc}
   1034c:	00010270 	andeq	r0, r1, r0, ror r2
   10350:	000141c0 	andeq	r4, r1, r0, asr #3
   10354:	000003e7 	andeq	r0, r0, r7, ror #7
   10358:	003e00a2 	eorseq	r0, lr, r2, lsr #1

0001035c <vPortISRStartFirstTask>:
/*-----------------------------------------------------------*/

int g_bStarted = 0;

void vPortISRStartFirstTask( void )
{
   1035c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   10360:	e28db000 	add	fp, sp, #0
	 *	Change from System to IRQ mode.
	 *
	 *
	 */

	g_bStarted++;
   10364:	e59f3078 	ldr	r3, [pc, #120]	; 103e4 <vPortISRStartFirstTask+0x88>
   10368:	e5933000 	ldr	r3, [r3]
   1036c:	e2832001 	add	r2, r3, #1
   10370:	e59f306c 	ldr	r3, [pc, #108]	; 103e4 <vPortISRStartFirstTask+0x88>
   10374:	e5832000 	str	r2, [r3]

	__asm volatile("mrs 	r0,cpsr");		// Read in the cpsr register.
   10378:	e10f0000 	mrs	r0, CPSR
	__asm volatile("bic		r0,r0,#0x80");	// Clear bit 8, (0x80) -- Causes IRQs to be enabled
   1037c:	e3c00080 	bic	r0, r0, #128	; 0x80
	__asm volatile("msr		cpsr_c, r0");	// Write it back to the CPSR register
   10380:	e121f000 	msr	CPSR_c, r0
//	__asm volatile("swi		0");			// Force a task switch with SWI!
//	__asm volatile("nop");

	/* Simply start the scheduler.  This is included here as it can only be
	called from ARM mode. */
	portRESTORE_CONTEXT();
   10384:	e59f0260 	ldr	r0, [pc, #608]	; 105ec <vPortExitCritical+0x60>
   10388:	e5900000 	ldr	r0, [r0]
   1038c:	e590e000 	ldr	lr, [r0]
   10390:	e59f0258 	ldr	r0, [pc, #600]	; 105f0 <vPortExitCritical+0x64>
   10394:	e8be0002 	ldm	lr!, {r1}
   10398:	e5801000 	str	r1, [r0]
   1039c:	e8be0001 	ldm	lr!, {r0}
   103a0:	e16ff000 	msr	SPSR_fsxc, r0
   103a4:	e8de7fff 	ldm	lr, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   103a8:	e320f000 	nop	{0}
   103ac:	e59ee03c 	ldr	lr, [lr, #60]	; 0x3c
   103b0:	e25ef004 	subs	pc, lr, #4
   103b4:	e320f000 	nop	{0}
   103b8:	e320f000 	nop	{0}
   103bc:	e59f3024 	ldr	r3, [pc, #36]	; 103e8 <vPortISRStartFirstTask+0x8c>
   103c0:	e5933000 	ldr	r3, [r3]
   103c4:	e59f3020 	ldr	r3, [pc, #32]	; 103ec <vPortISRStartFirstTask+0x90>
   103c8:	e5933000 	ldr	r3, [r3]
	__asm volatile (
   103cc:	e8bd4000 	pop	{lr}
   103d0:	e24ee004 	sub	lr, lr, #4
   103d4:	e12fff1e 	bx	lr
		"LDMFD	SP!, {LR}	\n"
		"SUB	LR,	LR, #4	\n"
		
		"BX		LR			\n"
	);
}
   103d8:	e28bd000 	add	sp, fp, #0
   103dc:	e8bd0800 	pop	{fp}
   103e0:	e12fff1e 	bx	lr
   103e4:	000144e0 	andeq	r4, r1, r0, ror #9
   103e8:	000144d0 	ldrdeq	r4, [r1], -r0
   103ec:	00014564 	andeq	r4, r1, r4, ror #10

000103f0 <vPortYieldProcessor>:
void vPortYieldProcessor( void )
{
	/* Within an IRQ ISR the link register has an offset from the true return 
	address, but an SWI ISR does not.  Add the offset manually so the same 
	ISR return code can be used in both cases. */
	__asm volatile ( "ADD		LR, LR, #4" );
   103f0:	e28ee004 	add	lr, lr, #4

	/* Perform the context switch.  First save the context of the current task. */
	portSAVE_CONTEXT();
   103f4:	e92d0001 	push	{r0}
   103f8:	e94d2000 	stmdb	sp, {sp}^
   103fc:	e24dd004 	sub	sp, sp, #4
   10400:	e8bd0001 	pop	{r0}
   10404:	e9204000 	stmdb	r0!, {lr}
   10408:	e1a0e000 	mov	lr, r0
   1040c:	e8bd0001 	pop	{r0}
   10410:	e94e7fff 	stmdb	lr, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   10414:	e320f000 	nop	{0}
   10418:	e24ee03c 	sub	lr, lr, #60	; 0x3c
   1041c:	e14f0000 	mrs	r0, SPSR
   10420:	e92e0001 	stmdb	lr!, {r0}
   10424:	e59f01c4 	ldr	r0, [pc, #452]	; 105f0 <vPortExitCritical+0x64>
   10428:	e5900000 	ldr	r0, [r0]
   1042c:	e92e0001 	stmdb	lr!, {r0}
   10430:	e59f01b4 	ldr	r0, [pc, #436]	; 105ec <vPortExitCritical+0x60>
   10434:	e5900000 	ldr	r0, [r0]
   10438:	e580e000 	str	lr, [r0]
   1043c:	e59f3054 	ldr	r3, [pc, #84]	; 10498 <vPortYieldProcessor+0xa8>
   10440:	e5933000 	ldr	r3, [r3]
   10444:	e59f3050 	ldr	r3, [pc, #80]	; 1049c <vPortYieldProcessor+0xac>
   10448:	e5933000 	ldr	r3, [r3]

	/* Find the highest priority task that is ready to run. */
	__asm volatile ( "bl vTaskSwitchContext" );
   1044c:	eb000a04 	bl	12c64 <vTaskSwitchContext>

	/* Restore the context of the new task. */
	portRESTORE_CONTEXT();	
   10450:	e59f0194 	ldr	r0, [pc, #404]	; 105ec <vPortExitCritical+0x60>
   10454:	e5900000 	ldr	r0, [r0]
   10458:	e590e000 	ldr	lr, [r0]
   1045c:	e59f018c 	ldr	r0, [pc, #396]	; 105f0 <vPortExitCritical+0x64>
   10460:	e8be0002 	ldm	lr!, {r1}
   10464:	e5801000 	str	r1, [r0]
   10468:	e8be0001 	ldm	lr!, {r0}
   1046c:	e16ff000 	msr	SPSR_fsxc, r0
   10470:	e8de7fff 	ldm	lr, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   10474:	e320f000 	nop	{0}
   10478:	e59ee03c 	ldr	lr, [lr, #60]	; 0x3c
   1047c:	e25ef004 	subs	pc, lr, #4
   10480:	e320f000 	nop	{0}
   10484:	e320f000 	nop	{0}
   10488:	e59f3008 	ldr	r3, [pc, #8]	; 10498 <vPortYieldProcessor+0xa8>
   1048c:	e5933000 	ldr	r3, [r3]
   10490:	e59f3004 	ldr	r3, [pc, #4]	; 1049c <vPortYieldProcessor+0xac>
   10494:	e5933000 	ldr	r3, [r3]
   10498:	000144d0 	ldrdeq	r4, [r1], -r0
   1049c:	00014564 	andeq	r4, r1, r4, ror #10

000104a0 <vFreeRTOS_ISR>:

extern void irqHandler(void);

void vFreeRTOS_ISR( void ) __attribute__((naked));
void vFreeRTOS_ISR( void ) {
	portSAVE_CONTEXT();
   104a0:	e92d0001 	push	{r0}
   104a4:	e94d2000 	stmdb	sp, {sp}^
   104a8:	e24dd004 	sub	sp, sp, #4
   104ac:	e8bd0001 	pop	{r0}
   104b0:	e9204000 	stmdb	r0!, {lr}
   104b4:	e1a0e000 	mov	lr, r0
   104b8:	e8bd0001 	pop	{r0}
   104bc:	e94e7fff 	stmdb	lr, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   104c0:	e320f000 	nop	{0}
   104c4:	e24ee03c 	sub	lr, lr, #60	; 0x3c
   104c8:	e14f0000 	mrs	r0, SPSR
   104cc:	e92e0001 	stmdb	lr!, {r0}
   104d0:	e59f0118 	ldr	r0, [pc, #280]	; 105f0 <vPortExitCritical+0x64>
   104d4:	e5900000 	ldr	r0, [r0]
   104d8:	e92e0001 	stmdb	lr!, {r0}
   104dc:	e59f0108 	ldr	r0, [pc, #264]	; 105ec <vPortExitCritical+0x60>
   104e0:	e5900000 	ldr	r0, [r0]
   104e4:	e580e000 	str	lr, [r0]
   104e8:	e59f3054 	ldr	r3, [pc, #84]	; 10544 <vFreeRTOS_ISR+0xa4>
   104ec:	e5933000 	ldr	r3, [r3]
   104f0:	e59f3050 	ldr	r3, [pc, #80]	; 10548 <vFreeRTOS_ISR+0xa8>
   104f4:	e5933000 	ldr	r3, [r3]
	irqHandler();
   104f8:	eb000d2a 	bl	139a8 <irqHandler>
	portRESTORE_CONTEXT();	
   104fc:	e59f00e8 	ldr	r0, [pc, #232]	; 105ec <vPortExitCritical+0x60>
   10500:	e5900000 	ldr	r0, [r0]
   10504:	e590e000 	ldr	lr, [r0]
   10508:	e59f00e0 	ldr	r0, [pc, #224]	; 105f0 <vPortExitCritical+0x64>
   1050c:	e8be0002 	ldm	lr!, {r1}
   10510:	e5801000 	str	r1, [r0]
   10514:	e8be0001 	ldm	lr!, {r0}
   10518:	e16ff000 	msr	SPSR_fsxc, r0
   1051c:	e8de7fff 	ldm	lr, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   10520:	e320f000 	nop	{0}
   10524:	e59ee03c 	ldr	lr, [lr, #60]	; 0x3c
   10528:	e25ef004 	subs	pc, lr, #4
   1052c:	e320f000 	nop	{0}
   10530:	e320f000 	nop	{0}
   10534:	e59f3008 	ldr	r3, [pc, #8]	; 10544 <vFreeRTOS_ISR+0xa4>
   10538:	e5933000 	ldr	r3, [r3]
   1053c:	e59f3004 	ldr	r3, [pc, #4]	; 10548 <vFreeRTOS_ISR+0xa8>
   10540:	e5933000 	ldr	r3, [r3]
   10544:	000144d0 	ldrdeq	r4, [r1], -r0
   10548:	00014564 	andeq	r4, r1, r4, ror #10

0001054c <vPortEnterCritical>:
/* The code generated by the GCC compiler uses the stack in different ways at
different optimisation levels.  The interrupt flags can therefore not always
be saved to the stack.  Instead the critical section nesting level is stored
in a variable, which is then saved as part of the stack context. */
void vPortEnterCritical( void )
{
   1054c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   10550:	e28db000 	add	fp, sp, #0
	/* Disable interrupts as per portDISABLE_INTERRUPTS(); 							*/
	__asm volatile ( 
   10554:	e92d0001 	push	{r0}
   10558:	e10f0000 	mrs	r0, CPSR
   1055c:	e38000c0 	orr	r0, r0, #192	; 0xc0
   10560:	e129f000 	msr	CPSR_fc, r0
   10564:	e8bd0001 	pop	{r0}
		"LDMIA	SP!, {R0}" );				/* Pop R0.								*/

	/* Now interrupts are disabled ulCriticalNesting can be accessed 
	directly.  Increment ulCriticalNesting to keep a count of how many times
	portENTER_CRITICAL() has been called. */
	ulCriticalNesting++;
   10568:	e59f3018 	ldr	r3, [pc, #24]	; 10588 <vPortEnterCritical+0x3c>
   1056c:	e5933000 	ldr	r3, [r3]
   10570:	e2832001 	add	r2, r3, #1
   10574:	e59f300c 	ldr	r3, [pc, #12]	; 10588 <vPortEnterCritical+0x3c>
   10578:	e5832000 	str	r2, [r3]
}
   1057c:	e28bd000 	add	sp, fp, #0
   10580:	e8bd0800 	pop	{fp}
   10584:	e12fff1e 	bx	lr
   10588:	000144d0 	ldrdeq	r4, [r1], -r0

0001058c <vPortExitCritical>:

void vPortExitCritical( void )
{
   1058c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   10590:	e28db000 	add	fp, sp, #0
	if( ulCriticalNesting > portNO_CRITICAL_NESTING )
   10594:	e59f304c 	ldr	r3, [pc, #76]	; 105e8 <vPortExitCritical+0x5c>
   10598:	e5933000 	ldr	r3, [r3]
   1059c:	e3530000 	cmp	r3, #0
   105a0:	0a00000d 	beq	105dc <vPortExitCritical+0x50>
	{
		/* Decrement the nesting count as we are leaving a critical section. */
		ulCriticalNesting--;
   105a4:	e59f303c 	ldr	r3, [pc, #60]	; 105e8 <vPortExitCritical+0x5c>
   105a8:	e5933000 	ldr	r3, [r3]
   105ac:	e2432001 	sub	r2, r3, #1
   105b0:	e59f3030 	ldr	r3, [pc, #48]	; 105e8 <vPortExitCritical+0x5c>
   105b4:	e5832000 	str	r2, [r3]

		/* If the nesting level has reached zero then interrupts should be
		re-enabled. */
		if( ulCriticalNesting == portNO_CRITICAL_NESTING )
   105b8:	e59f3028 	ldr	r3, [pc, #40]	; 105e8 <vPortExitCritical+0x5c>
   105bc:	e5933000 	ldr	r3, [r3]
   105c0:	e3530000 	cmp	r3, #0
   105c4:	1a000004 	bne	105dc <vPortExitCritical+0x50>
		{
			/* Enable interrupts as per portEXIT_CRITICAL().					*/
			__asm volatile ( 
   105c8:	e92d0001 	push	{r0}
   105cc:	e10f0000 	mrs	r0, CPSR
   105d0:	e3c000c0 	bic	r0, r0, #192	; 0xc0
   105d4:	e129f000 	msr	CPSR_fc, r0
   105d8:	e8bd0001 	pop	{r0}
				"BIC	R0, R0, #0xC0	\n\t"	/* Enable IRQ, FIQ.				*/	
				"MSR	CPSR, R0		\n\t"	/* Write back modified value.	*/	
				"LDMIA	SP!, {R0}" );			/* Pop R0.						*/
		}
	}
}
   105dc:	e28bd000 	add	sp, fp, #0
   105e0:	e8bd0800 	pop	{fp}
   105e4:	e12fff1e 	bx	lr
   105e8:	000144d0 	ldrdeq	r4, [r1], -r0
   105ec:	00014564 	andeq	r4, r1, r4, ror #10
   105f0:	000144d0 	ldrdeq	r4, [r1], -r0

000105f4 <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
   105f4:	e92d4800 	push	{fp, lr}
   105f8:	e28db004 	add	fp, sp, #4
   105fc:	e24dd018 	sub	sp, sp, #24
   10600:	e50b0010 	str	r0, [fp, #-16]
   10604:	e50b1014 	str	r1, [fp, #-20]
   10608:	e50b2018 	str	r2, [fp, #-24]
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
   1060c:	e3a00038 	mov	r0, #56	; 0x38
   10610:	eb000b99 	bl	1347c <pvPortMalloc>
   10614:	e50b000c 	str	r0, [fp, #-12]
	if( pxCoRoutine )
   10618:	e51b300c 	ldr	r3, [fp, #-12]
   1061c:	e3530000 	cmp	r3, #0
   10620:	0a000044 	beq	10738 <xCoRoutineCreate+0x144>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
   10624:	e59f3124 	ldr	r3, [pc, #292]	; 10750 <xCoRoutineCreate+0x15c>
   10628:	e5933000 	ldr	r3, [r3]
   1062c:	e3530000 	cmp	r3, #0
   10630:	1a000003 	bne	10644 <xCoRoutineCreate+0x50>
		{
			pxCurrentCoRoutine = pxCoRoutine;
   10634:	e59f3114 	ldr	r3, [pc, #276]	; 10750 <xCoRoutineCreate+0x15c>
   10638:	e51b200c 	ldr	r2, [fp, #-12]
   1063c:	e5832000 	str	r2, [r3]
			prvInitialiseCoRoutineLists();
   10640:	eb000178 	bl	10c28 <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
   10644:	e51b3014 	ldr	r3, [fp, #-20]
   10648:	e3530001 	cmp	r3, #1
   1064c:	9a000001 	bls	10658 <xCoRoutineCreate+0x64>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
   10650:	e3a03001 	mov	r3, #1
   10654:	e50b3014 	str	r3, [fp, #-20]
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
   10658:	e51b300c 	ldr	r3, [fp, #-12]
   1065c:	e3a02000 	mov	r2, #0
   10660:	e1c323b4 	strh	r2, [r3, #52]	; 0x34
		pxCoRoutine->uxPriority = uxPriority;
   10664:	e51b300c 	ldr	r3, [fp, #-12]
   10668:	e51b2014 	ldr	r2, [fp, #-20]
   1066c:	e583202c 	str	r2, [r3, #44]	; 0x2c
		pxCoRoutine->uxIndex = uxIndex;
   10670:	e51b300c 	ldr	r3, [fp, #-12]
   10674:	e51b2018 	ldr	r2, [fp, #-24]
   10678:	e5832030 	str	r2, [r3, #48]	; 0x30
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
   1067c:	e51b300c 	ldr	r3, [fp, #-12]
   10680:	e51b2010 	ldr	r2, [fp, #-16]
   10684:	e5832000 	str	r2, [r3]

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
   10688:	e51b300c 	ldr	r3, [fp, #-12]
   1068c:	e2833004 	add	r3, r3, #4
   10690:	e1a00003 	mov	r0, r3
   10694:	eb0001c8 	bl	10dbc <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
   10698:	e51b300c 	ldr	r3, [fp, #-12]
   1069c:	e2833018 	add	r3, r3, #24
   106a0:	e1a00003 	mov	r0, r3
   106a4:	eb0001c4 	bl	10dbc <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
   106a8:	e51b300c 	ldr	r3, [fp, #-12]
   106ac:	e51b200c 	ldr	r2, [fp, #-12]
   106b0:	e5832010 	str	r2, [r3, #16]
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
   106b4:	e51b300c 	ldr	r3, [fp, #-12]
   106b8:	e51b200c 	ldr	r2, [fp, #-12]
   106bc:	e5832024 	str	r2, [r3, #36]	; 0x24
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
   106c0:	e51b3014 	ldr	r3, [fp, #-20]
   106c4:	e2632005 	rsb	r2, r3, #5
   106c8:	e51b300c 	ldr	r3, [fp, #-12]
   106cc:	e5832018 	str	r2, [r3, #24]
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
   106d0:	e51b300c 	ldr	r3, [fp, #-12]
   106d4:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   106d8:	e59f3074 	ldr	r3, [pc, #116]	; 10754 <xCoRoutineCreate+0x160>
   106dc:	e5933000 	ldr	r3, [r3]
   106e0:	e1520003 	cmp	r2, r3
   106e4:	9a000003 	bls	106f8 <xCoRoutineCreate+0x104>
   106e8:	e51b300c 	ldr	r3, [fp, #-12]
   106ec:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   106f0:	e59f305c 	ldr	r3, [pc, #92]	; 10754 <xCoRoutineCreate+0x160>
   106f4:	e5832000 	str	r2, [r3]
   106f8:	e51b300c 	ldr	r3, [fp, #-12]
   106fc:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   10700:	e1a03002 	mov	r3, r2
   10704:	e1a03103 	lsl	r3, r3, #2
   10708:	e0833002 	add	r3, r3, r2
   1070c:	e1a03103 	lsl	r3, r3, #2
   10710:	e59f2040 	ldr	r2, [pc, #64]	; 10758 <xCoRoutineCreate+0x164>
   10714:	e0832002 	add	r2, r3, r2
   10718:	e51b300c 	ldr	r3, [fp, #-12]
   1071c:	e2833004 	add	r3, r3, #4
   10720:	e1a00002 	mov	r0, r2
   10724:	e1a01003 	mov	r1, r3
   10728:	eb0001ad 	bl	10de4 <vListInsertEnd>

		xReturn = pdPASS;
   1072c:	e3a03001 	mov	r3, #1
   10730:	e50b3008 	str	r3, [fp, #-8]
   10734:	ea000001 	b	10740 <xCoRoutineCreate+0x14c>
	}
	else
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   10738:	e3e03000 	mvn	r3, #0
   1073c:	e50b3008 	str	r3, [fp, #-8]
	}
	
	return xReturn;	
   10740:	e51b3008 	ldr	r3, [fp, #-8]
}
   10744:	e1a00003 	mov	r0, r3
   10748:	e24bd004 	sub	sp, fp, #4
   1074c:	e8bd8800 	pop	{fp, pc}
   10750:	00014550 	andeq	r4, r1, r0, asr r5
   10754:	00014554 	andeq	r4, r1, r4, asr r5
   10758:	000144e4 	andeq	r4, r1, r4, ror #9

0001075c <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
   1075c:	e92d4800 	push	{fp, lr}
   10760:	e28db004 	add	fp, sp, #4
   10764:	e24dd010 	sub	sp, sp, #16
   10768:	e50b0010 	str	r0, [fp, #-16]
   1076c:	e50b1014 	str	r1, [fp, #-20]
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
   10770:	e59f30b4 	ldr	r3, [pc, #180]	; 1082c <vCoRoutineAddToDelayedList+0xd0>
   10774:	e5932000 	ldr	r2, [r3]
   10778:	e51b3010 	ldr	r3, [fp, #-16]
   1077c:	e0823003 	add	r3, r2, r3
   10780:	e50b3008 	str	r3, [fp, #-8]

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
   10784:	e59f30a4 	ldr	r3, [pc, #164]	; 10830 <vCoRoutineAddToDelayedList+0xd4>
   10788:	e5933000 	ldr	r3, [r3]
   1078c:	e2833004 	add	r3, r3, #4
   10790:	e1a00003 	mov	r0, r3
   10794:	eb0001ec 	bl	10f4c <vListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
   10798:	e59f3090 	ldr	r3, [pc, #144]	; 10830 <vCoRoutineAddToDelayedList+0xd4>
   1079c:	e5933000 	ldr	r3, [r3]
   107a0:	e51b2008 	ldr	r2, [fp, #-8]
   107a4:	e5832004 	str	r2, [r3, #4]

	if( xTimeToWake < xCoRoutineTickCount )
   107a8:	e59f307c 	ldr	r3, [pc, #124]	; 1082c <vCoRoutineAddToDelayedList+0xd0>
   107ac:	e5933000 	ldr	r3, [r3]
   107b0:	e51b2008 	ldr	r2, [fp, #-8]
   107b4:	e1520003 	cmp	r2, r3
   107b8:	2a000008 	bcs	107e0 <vCoRoutineAddToDelayedList+0x84>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
   107bc:	e59f3070 	ldr	r3, [pc, #112]	; 10834 <vCoRoutineAddToDelayedList+0xd8>
   107c0:	e5932000 	ldr	r2, [r3]
   107c4:	e59f3064 	ldr	r3, [pc, #100]	; 10830 <vCoRoutineAddToDelayedList+0xd4>
   107c8:	e5933000 	ldr	r3, [r3]
   107cc:	e2833004 	add	r3, r3, #4
   107d0:	e1a00002 	mov	r0, r2
   107d4:	e1a01003 	mov	r1, r3
   107d8:	eb0001a6 	bl	10e78 <vListInsert>
   107dc:	ea000007 	b	10800 <vCoRoutineAddToDelayedList+0xa4>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
   107e0:	e59f3050 	ldr	r3, [pc, #80]	; 10838 <vCoRoutineAddToDelayedList+0xdc>
   107e4:	e5932000 	ldr	r2, [r3]
   107e8:	e59f3040 	ldr	r3, [pc, #64]	; 10830 <vCoRoutineAddToDelayedList+0xd4>
   107ec:	e5933000 	ldr	r3, [r3]
   107f0:	e2833004 	add	r3, r3, #4
   107f4:	e1a00002 	mov	r0, r2
   107f8:	e1a01003 	mov	r1, r3
   107fc:	eb00019d 	bl	10e78 <vListInsert>
	}

	if( pxEventList )
   10800:	e51b3014 	ldr	r3, [fp, #-20]
   10804:	e3530000 	cmp	r3, #0
   10808:	0a000005 	beq	10824 <vCoRoutineAddToDelayedList+0xc8>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
   1080c:	e59f301c 	ldr	r3, [pc, #28]	; 10830 <vCoRoutineAddToDelayedList+0xd4>
   10810:	e5933000 	ldr	r3, [r3]
   10814:	e2833018 	add	r3, r3, #24
   10818:	e51b0014 	ldr	r0, [fp, #-20]
   1081c:	e1a01003 	mov	r1, r3
   10820:	eb000194 	bl	10e78 <vListInsert>
	}
}
   10824:	e24bd004 	sub	sp, fp, #4
   10828:	e8bd8800 	pop	{fp, pc}
   1082c:	00014558 	andeq	r4, r1, r8, asr r5
   10830:	00014550 	andeq	r4, r1, r0, asr r5
   10834:	00014538 	andeq	r4, r1, r8, lsr r5
   10838:	00014534 	andeq	r4, r1, r4, lsr r5

0001083c <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
   1083c:	e92d4800 	push	{fp, lr}
   10840:	e28db004 	add	fp, sp, #4
   10844:	e24dd008 	sub	sp, sp, #8
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
   10848:	ea00002c 	b	10900 <prvCheckPendingReadyList+0xc4>
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
   1084c:	e92d0001 	push	{r0}
   10850:	e10f0000 	mrs	r0, CPSR
   10854:	e38000c0 	orr	r0, r0, #192	; 0xc0
   10858:	e129f000 	msr	CPSR_fc, r0
   1085c:	e8bd0001 	pop	{r0}
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
   10860:	e59f30b0 	ldr	r3, [pc, #176]	; 10918 <prvCheckPendingReadyList+0xdc>
   10864:	e593300c 	ldr	r3, [r3, #12]
   10868:	e593300c 	ldr	r3, [r3, #12]
   1086c:	e50b3008 	str	r3, [fp, #-8]
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
   10870:	e51b3008 	ldr	r3, [fp, #-8]
   10874:	e2833018 	add	r3, r3, #24
   10878:	e1a00003 	mov	r0, r3
   1087c:	eb0001b2 	bl	10f4c <vListRemove>
		}
		portENABLE_INTERRUPTS();
   10880:	e92d0001 	push	{r0}
   10884:	e10f0000 	mrs	r0, CPSR
   10888:	e3c000c0 	bic	r0, r0, #192	; 0xc0
   1088c:	e129f000 	msr	CPSR_fc, r0
   10890:	e8bd0001 	pop	{r0}

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
   10894:	e51b3008 	ldr	r3, [fp, #-8]
   10898:	e2833004 	add	r3, r3, #4
   1089c:	e1a00003 	mov	r0, r3
   108a0:	eb0001a9 	bl	10f4c <vListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
   108a4:	e51b3008 	ldr	r3, [fp, #-8]
   108a8:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   108ac:	e59f3068 	ldr	r3, [pc, #104]	; 1091c <prvCheckPendingReadyList+0xe0>
   108b0:	e5933000 	ldr	r3, [r3]
   108b4:	e1520003 	cmp	r2, r3
   108b8:	9a000003 	bls	108cc <prvCheckPendingReadyList+0x90>
   108bc:	e51b3008 	ldr	r3, [fp, #-8]
   108c0:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   108c4:	e59f3050 	ldr	r3, [pc, #80]	; 1091c <prvCheckPendingReadyList+0xe0>
   108c8:	e5832000 	str	r2, [r3]
   108cc:	e51b3008 	ldr	r3, [fp, #-8]
   108d0:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   108d4:	e1a03002 	mov	r3, r2
   108d8:	e1a03103 	lsl	r3, r3, #2
   108dc:	e0833002 	add	r3, r3, r2
   108e0:	e1a03103 	lsl	r3, r3, #2
   108e4:	e59f2034 	ldr	r2, [pc, #52]	; 10920 <prvCheckPendingReadyList+0xe4>
   108e8:	e0832002 	add	r2, r3, r2
   108ec:	e51b3008 	ldr	r3, [fp, #-8]
   108f0:	e2833004 	add	r3, r3, #4
   108f4:	e1a00002 	mov	r0, r2
   108f8:	e1a01003 	mov	r1, r3
   108fc:	eb000138 	bl	10de4 <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
   10900:	e59f3010 	ldr	r3, [pc, #16]	; 10918 <prvCheckPendingReadyList+0xdc>
   10904:	e5933000 	ldr	r3, [r3]
   10908:	e3530000 	cmp	r3, #0
   1090c:	1affffce 	bne	1084c <prvCheckPendingReadyList+0x10>
		portENABLE_INTERRUPTS();

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
	}
}
   10910:	e24bd004 	sub	sp, fp, #4
   10914:	e8bd8800 	pop	{fp, pc}
   10918:	0001453c 	andeq	r4, r1, ip, lsr r5
   1091c:	00014554 	andeq	r4, r1, r4, asr r5
   10920:	000144e4 	andeq	r4, r1, r4, ror #9

00010924 <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
   10924:	e92d4800 	push	{fp, lr}
   10928:	e28db004 	add	fp, sp, #4
   1092c:	e24dd008 	sub	sp, sp, #8
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
   10930:	eb0007d6 	bl	12890 <xTaskGetTickCount>
   10934:	e1a02000 	mov	r2, r0
   10938:	e59f31a0 	ldr	r3, [pc, #416]	; 10ae0 <prvCheckDelayedList+0x1bc>
   1093c:	e5933000 	ldr	r3, [r3]
   10940:	e0632002 	rsb	r2, r3, r2
   10944:	e59f3198 	ldr	r3, [pc, #408]	; 10ae4 <prvCheckDelayedList+0x1c0>
   10948:	e5832000 	str	r2, [r3]
	while( xPassedTicks )
   1094c:	ea000059 	b	10ab8 <prvCheckDelayedList+0x194>
	{
		xCoRoutineTickCount++;
   10950:	e59f3190 	ldr	r3, [pc, #400]	; 10ae8 <prvCheckDelayedList+0x1c4>
   10954:	e5933000 	ldr	r3, [r3]
   10958:	e2832001 	add	r2, r3, #1
   1095c:	e59f3184 	ldr	r3, [pc, #388]	; 10ae8 <prvCheckDelayedList+0x1c4>
   10960:	e5832000 	str	r2, [r3]
		xPassedTicks--;
   10964:	e59f3178 	ldr	r3, [pc, #376]	; 10ae4 <prvCheckDelayedList+0x1c0>
   10968:	e5933000 	ldr	r3, [r3]
   1096c:	e2432001 	sub	r2, r3, #1
   10970:	e59f316c 	ldr	r3, [pc, #364]	; 10ae4 <prvCheckDelayedList+0x1c0>
   10974:	e5832000 	str	r2, [r3]

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
   10978:	e59f3168 	ldr	r3, [pc, #360]	; 10ae8 <prvCheckDelayedList+0x1c4>
   1097c:	e5933000 	ldr	r3, [r3]
   10980:	e3530000 	cmp	r3, #0
   10984:	1a000043 	bne	10a98 <prvCheckDelayedList+0x174>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
   10988:	e59f315c 	ldr	r3, [pc, #348]	; 10aec <prvCheckDelayedList+0x1c8>
   1098c:	e5933000 	ldr	r3, [r3]
   10990:	e50b3008 	str	r3, [fp, #-8]
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
   10994:	e59f3154 	ldr	r3, [pc, #340]	; 10af0 <prvCheckDelayedList+0x1cc>
   10998:	e5932000 	ldr	r2, [r3]
   1099c:	e59f3148 	ldr	r3, [pc, #328]	; 10aec <prvCheckDelayedList+0x1c8>
   109a0:	e5832000 	str	r2, [r3]
			pxOverflowDelayedCoRoutineList = pxTemp;
   109a4:	e59f3144 	ldr	r3, [pc, #324]	; 10af0 <prvCheckDelayedList+0x1cc>
   109a8:	e51b2008 	ldr	r2, [fp, #-8]
   109ac:	e5832000 	str	r2, [r3]
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
   109b0:	ea000038 	b	10a98 <prvCheckDelayedList+0x174>
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
   109b4:	e59f3130 	ldr	r3, [pc, #304]	; 10aec <prvCheckDelayedList+0x1c8>
   109b8:	e5933000 	ldr	r3, [r3]
   109bc:	e593300c 	ldr	r3, [r3, #12]
   109c0:	e593300c 	ldr	r3, [r3, #12]
   109c4:	e50b300c 	str	r3, [fp, #-12]

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
   109c8:	e51b300c 	ldr	r3, [fp, #-12]
   109cc:	e5932004 	ldr	r2, [r3, #4]
   109d0:	e59f3110 	ldr	r3, [pc, #272]	; 10ae8 <prvCheckDelayedList+0x1c4>
   109d4:	e5933000 	ldr	r3, [r3]
   109d8:	e1520003 	cmp	r2, r3
   109dc:	8a000034 	bhi	10ab4 <prvCheckDelayedList+0x190>
			{			
				/* Timeout not yet expired. */																			
				break;																				
			}																						

			portDISABLE_INTERRUPTS();
   109e0:	e92d0001 	push	{r0}
   109e4:	e10f0000 	mrs	r0, CPSR
   109e8:	e38000c0 	orr	r0, r0, #192	; 0xc0
   109ec:	e129f000 	msr	CPSR_fc, r0
   109f0:	e8bd0001 	pop	{r0}
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				vListRemove( &( pxCRCB->xGenericListItem ) );											
   109f4:	e51b300c 	ldr	r3, [fp, #-12]
   109f8:	e2833004 	add	r3, r3, #4
   109fc:	e1a00003 	mov	r0, r3
   10a00:	eb000151 	bl	10f4c <vListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
   10a04:	e51b300c 	ldr	r3, [fp, #-12]
   10a08:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   10a0c:	e3530000 	cmp	r3, #0
   10a10:	0a000003 	beq	10a24 <prvCheckDelayedList+0x100>
				{															
					vListRemove( &( pxCRCB->xEventListItem ) );											
   10a14:	e51b300c 	ldr	r3, [fp, #-12]
   10a18:	e2833018 	add	r3, r3, #24
   10a1c:	e1a00003 	mov	r0, r3
   10a20:	eb000149 	bl	10f4c <vListRemove>
				}
			}
			portENABLE_INTERRUPTS();
   10a24:	e92d0001 	push	{r0}
   10a28:	e10f0000 	mrs	r0, CPSR
   10a2c:	e3c000c0 	bic	r0, r0, #192	; 0xc0
   10a30:	e129f000 	msr	CPSR_fc, r0
   10a34:	e8bd0001 	pop	{r0}

			prvAddCoRoutineToReadyQueue( pxCRCB );													
   10a38:	e51b300c 	ldr	r3, [fp, #-12]
   10a3c:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   10a40:	e59f30ac 	ldr	r3, [pc, #172]	; 10af4 <prvCheckDelayedList+0x1d0>
   10a44:	e5933000 	ldr	r3, [r3]
   10a48:	e1520003 	cmp	r2, r3
   10a4c:	9a000003 	bls	10a60 <prvCheckDelayedList+0x13c>
   10a50:	e51b300c 	ldr	r3, [fp, #-12]
   10a54:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   10a58:	e59f3094 	ldr	r3, [pc, #148]	; 10af4 <prvCheckDelayedList+0x1d0>
   10a5c:	e5832000 	str	r2, [r3]
   10a60:	e51b300c 	ldr	r3, [fp, #-12]
   10a64:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   10a68:	e1a03002 	mov	r3, r2
   10a6c:	e1a03103 	lsl	r3, r3, #2
   10a70:	e0833002 	add	r3, r3, r2
   10a74:	e1a03103 	lsl	r3, r3, #2
   10a78:	e59f2078 	ldr	r2, [pc, #120]	; 10af8 <prvCheckDelayedList+0x1d4>
   10a7c:	e0832002 	add	r2, r3, r2
   10a80:	e51b300c 	ldr	r3, [fp, #-12]
   10a84:	e2833004 	add	r3, r3, #4
   10a88:	e1a00002 	mov	r0, r2
   10a8c:	e1a01003 	mov	r1, r3
   10a90:	eb0000d3 	bl	10de4 <vListInsertEnd>
   10a94:	ea000000 	b	10a9c <prvCheckDelayedList+0x178>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
   10a98:	e1a00000 	nop			; (mov r0, r0)
   10a9c:	e59f3048 	ldr	r3, [pc, #72]	; 10aec <prvCheckDelayedList+0x1c8>
   10aa0:	e5933000 	ldr	r3, [r3]
   10aa4:	e5933000 	ldr	r3, [r3]
   10aa8:	e3530000 	cmp	r3, #0
   10aac:	1affffc0 	bne	109b4 <prvCheckDelayedList+0x90>
   10ab0:	ea000000 	b	10ab8 <prvCheckDelayedList+0x194>
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
			{			
				/* Timeout not yet expired. */																			
				break;																				
   10ab4:	e1a00000 	nop			; (mov r0, r0)
static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
   10ab8:	e59f3024 	ldr	r3, [pc, #36]	; 10ae4 <prvCheckDelayedList+0x1c0>
   10abc:	e5933000 	ldr	r3, [r3]
   10ac0:	e3530000 	cmp	r3, #0
   10ac4:	1affffa1 	bne	10950 <prvCheckDelayedList+0x2c>

			prvAddCoRoutineToReadyQueue( pxCRCB );													
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
   10ac8:	e59f3018 	ldr	r3, [pc, #24]	; 10ae8 <prvCheckDelayedList+0x1c4>
   10acc:	e5932000 	ldr	r2, [r3]
   10ad0:	e59f3008 	ldr	r3, [pc, #8]	; 10ae0 <prvCheckDelayedList+0x1bc>
   10ad4:	e5832000 	str	r2, [r3]
}
   10ad8:	e24bd004 	sub	sp, fp, #4
   10adc:	e8bd8800 	pop	{fp, pc}
   10ae0:	0001455c 	andeq	r4, r1, ip, asr r5
   10ae4:	00014560 	andeq	r4, r1, r0, ror #10
   10ae8:	00014558 	andeq	r4, r1, r8, asr r5
   10aec:	00014534 	andeq	r4, r1, r4, lsr r5
   10af0:	00014538 	andeq	r4, r1, r8, lsr r5
   10af4:	00014554 	andeq	r4, r1, r4, asr r5
   10af8:	000144e4 	andeq	r4, r1, r4, ror #9

00010afc <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
   10afc:	e92d4800 	push	{fp, lr}
   10b00:	e28db004 	add	fp, sp, #4
   10b04:	e24dd008 	sub	sp, sp, #8
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
   10b08:	ebffff4b 	bl	1083c <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
   10b0c:	ebffff84 	bl	10924 <prvCheckDelayedList>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
   10b10:	ea000008 	b	10b38 <vCoRoutineSchedule+0x3c>
	{
		if( uxTopCoRoutineReadyPriority == 0 )
   10b14:	e59f3100 	ldr	r3, [pc, #256]	; 10c1c <vCoRoutineSchedule+0x120>
   10b18:	e5933000 	ldr	r3, [r3]
   10b1c:	e3530000 	cmp	r3, #0
   10b20:	0a00003a 	beq	10c10 <vCoRoutineSchedule+0x114>
		{
			/* No more co-routines to check. */
			return;
		}
		--uxTopCoRoutineReadyPriority;
   10b24:	e59f30f0 	ldr	r3, [pc, #240]	; 10c1c <vCoRoutineSchedule+0x120>
   10b28:	e5933000 	ldr	r3, [r3]
   10b2c:	e2432001 	sub	r2, r3, #1
   10b30:	e59f30e4 	ldr	r3, [pc, #228]	; 10c1c <vCoRoutineSchedule+0x120>
   10b34:	e5832000 	str	r2, [r3]

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
   10b38:	e59f30dc 	ldr	r3, [pc, #220]	; 10c1c <vCoRoutineSchedule+0x120>
   10b3c:	e5932000 	ldr	r2, [r3]
   10b40:	e59f10d8 	ldr	r1, [pc, #216]	; 10c20 <vCoRoutineSchedule+0x124>
   10b44:	e1a03002 	mov	r3, r2
   10b48:	e1a03103 	lsl	r3, r3, #2
   10b4c:	e0833002 	add	r3, r3, r2
   10b50:	e1a03103 	lsl	r3, r3, #2
   10b54:	e0813003 	add	r3, r1, r3
   10b58:	e5933000 	ldr	r3, [r3]
   10b5c:	e3530000 	cmp	r3, #0
   10b60:	0affffeb 	beq	10b14 <vCoRoutineSchedule+0x18>
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
   10b64:	e59f30b0 	ldr	r3, [pc, #176]	; 10c1c <vCoRoutineSchedule+0x120>
   10b68:	e5932000 	ldr	r2, [r3]
   10b6c:	e1a03002 	mov	r3, r2
   10b70:	e1a03103 	lsl	r3, r3, #2
   10b74:	e0833002 	add	r3, r3, r2
   10b78:	e1a03103 	lsl	r3, r3, #2
   10b7c:	e59f209c 	ldr	r2, [pc, #156]	; 10c20 <vCoRoutineSchedule+0x124>
   10b80:	e0833002 	add	r3, r3, r2
   10b84:	e50b3008 	str	r3, [fp, #-8]
   10b88:	e51b3008 	ldr	r3, [fp, #-8]
   10b8c:	e5933004 	ldr	r3, [r3, #4]
   10b90:	e5932004 	ldr	r2, [r3, #4]
   10b94:	e51b3008 	ldr	r3, [fp, #-8]
   10b98:	e5832004 	str	r2, [r3, #4]
   10b9c:	e51b3008 	ldr	r3, [fp, #-8]
   10ba0:	e5932004 	ldr	r2, [r3, #4]
   10ba4:	e51b3008 	ldr	r3, [fp, #-8]
   10ba8:	e2833008 	add	r3, r3, #8
   10bac:	e1520003 	cmp	r2, r3
   10bb0:	1a000004 	bne	10bc8 <vCoRoutineSchedule+0xcc>
   10bb4:	e51b3008 	ldr	r3, [fp, #-8]
   10bb8:	e5933004 	ldr	r3, [r3, #4]
   10bbc:	e5932004 	ldr	r2, [r3, #4]
   10bc0:	e51b3008 	ldr	r3, [fp, #-8]
   10bc4:	e5832004 	str	r2, [r3, #4]
   10bc8:	e51b3008 	ldr	r3, [fp, #-8]
   10bcc:	e5933004 	ldr	r3, [r3, #4]
   10bd0:	e593200c 	ldr	r2, [r3, #12]
   10bd4:	e59f3048 	ldr	r3, [pc, #72]	; 10c24 <vCoRoutineSchedule+0x128>
   10bd8:	e5832000 	str	r2, [r3]

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
   10bdc:	e59f3040 	ldr	r3, [pc, #64]	; 10c24 <vCoRoutineSchedule+0x128>
   10be0:	e5933000 	ldr	r3, [r3]
   10be4:	e5933000 	ldr	r3, [r3]
   10be8:	e59f2034 	ldr	r2, [pc, #52]	; 10c24 <vCoRoutineSchedule+0x128>
   10bec:	e5921000 	ldr	r1, [r2]
   10bf0:	e59f202c 	ldr	r2, [pc, #44]	; 10c24 <vCoRoutineSchedule+0x128>
   10bf4:	e5922000 	ldr	r2, [r2]
   10bf8:	e5922030 	ldr	r2, [r2, #48]	; 0x30
   10bfc:	e1a00001 	mov	r0, r1
   10c00:	e1a01002 	mov	r1, r2
   10c04:	e12fff33 	blx	r3

	return;
   10c08:	e1a00000 	nop			; (mov r0, r0)
   10c0c:	ea000000 	b	10c14 <vCoRoutineSchedule+0x118>
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
	{
		if( uxTopCoRoutineReadyPriority == 0 )
		{
			/* No more co-routines to check. */
			return;
   10c10:	e1a00000 	nop			; (mov r0, r0)

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );

	return;
}
   10c14:	e24bd004 	sub	sp, fp, #4
   10c18:	e8bd8800 	pop	{fp, pc}
   10c1c:	00014554 	andeq	r4, r1, r4, asr r5
   10c20:	000144e4 	andeq	r4, r1, r4, ror #9
   10c24:	00014550 	andeq	r4, r1, r0, asr r5

00010c28 <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
   10c28:	e92d4800 	push	{fp, lr}
   10c2c:	e28db004 	add	fp, sp, #4
   10c30:	e24dd008 	sub	sp, sp, #8
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
   10c34:	e3a03000 	mov	r3, #0
   10c38:	e50b3008 	str	r3, [fp, #-8]
   10c3c:	ea00000b 	b	10c70 <prvInitialiseCoRoutineLists+0x48>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
   10c40:	e51b2008 	ldr	r2, [fp, #-8]
   10c44:	e1a03002 	mov	r3, r2
   10c48:	e1a03103 	lsl	r3, r3, #2
   10c4c:	e0833002 	add	r3, r3, r2
   10c50:	e1a03103 	lsl	r3, r3, #2
   10c54:	e59f2058 	ldr	r2, [pc, #88]	; 10cb4 <prvInitialiseCoRoutineLists+0x8c>
   10c58:	e0833002 	add	r3, r3, r2
   10c5c:	e1a00003 	mov	r0, r3
   10c60:	eb00003c 	bl	10d58 <vListInitialise>

static void prvInitialiseCoRoutineLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
   10c64:	e51b3008 	ldr	r3, [fp, #-8]
   10c68:	e2833001 	add	r3, r3, #1
   10c6c:	e50b3008 	str	r3, [fp, #-8]
   10c70:	e51b3008 	ldr	r3, [fp, #-8]
   10c74:	e3530001 	cmp	r3, #1
   10c78:	9afffff0 	bls	10c40 <prvInitialiseCoRoutineLists+0x18>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
   10c7c:	e59f0034 	ldr	r0, [pc, #52]	; 10cb8 <prvInitialiseCoRoutineLists+0x90>
   10c80:	eb000034 	bl	10d58 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
   10c84:	e59f0030 	ldr	r0, [pc, #48]	; 10cbc <prvInitialiseCoRoutineLists+0x94>
   10c88:	eb000032 	bl	10d58 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
   10c8c:	e59f002c 	ldr	r0, [pc, #44]	; 10cc0 <prvInitialiseCoRoutineLists+0x98>
   10c90:	eb000030 	bl	10d58 <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
   10c94:	e59f3028 	ldr	r3, [pc, #40]	; 10cc4 <prvInitialiseCoRoutineLists+0x9c>
   10c98:	e59f2018 	ldr	r2, [pc, #24]	; 10cb8 <prvInitialiseCoRoutineLists+0x90>
   10c9c:	e5832000 	str	r2, [r3]
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
   10ca0:	e59f3020 	ldr	r3, [pc, #32]	; 10cc8 <prvInitialiseCoRoutineLists+0xa0>
   10ca4:	e59f2010 	ldr	r2, [pc, #16]	; 10cbc <prvInitialiseCoRoutineLists+0x94>
   10ca8:	e5832000 	str	r2, [r3]
}
   10cac:	e24bd004 	sub	sp, fp, #4
   10cb0:	e8bd8800 	pop	{fp, pc}
   10cb4:	000144e4 	andeq	r4, r1, r4, ror #9
   10cb8:	0001450c 	andeq	r4, r1, ip, lsl #10
   10cbc:	00014520 	andeq	r4, r1, r0, lsr #10
   10cc0:	0001453c 	andeq	r4, r1, ip, lsr r5
   10cc4:	00014534 	andeq	r4, r1, r4, lsr r5
   10cc8:	00014538 	andeq	r4, r1, r8, lsr r5

00010ccc <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
   10ccc:	e92d4800 	push	{fp, lr}
   10cd0:	e28db004 	add	fp, sp, #4
   10cd4:	e24dd010 	sub	sp, sp, #16
   10cd8:	e50b0010 	str	r0, [fp, #-16]
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   10cdc:	e51b3010 	ldr	r3, [fp, #-16]
   10ce0:	e593300c 	ldr	r3, [r3, #12]
   10ce4:	e593300c 	ldr	r3, [r3, #12]
   10ce8:	e50b300c 	str	r3, [fp, #-12]
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
   10cec:	e51b300c 	ldr	r3, [fp, #-12]
   10cf0:	e2833018 	add	r3, r3, #24
   10cf4:	e1a00003 	mov	r0, r3
   10cf8:	eb000093 	bl	10f4c <vListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
   10cfc:	e51b300c 	ldr	r3, [fp, #-12]
   10d00:	e2833018 	add	r3, r3, #24
   10d04:	e59f0044 	ldr	r0, [pc, #68]	; 10d50 <xCoRoutineRemoveFromEventList+0x84>
   10d08:	e1a01003 	mov	r1, r3
   10d0c:	eb000034 	bl	10de4 <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
   10d10:	e51b300c 	ldr	r3, [fp, #-12]
   10d14:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   10d18:	e59f3034 	ldr	r3, [pc, #52]	; 10d54 <xCoRoutineRemoveFromEventList+0x88>
   10d1c:	e5933000 	ldr	r3, [r3]
   10d20:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   10d24:	e1520003 	cmp	r2, r3
   10d28:	3a000002 	bcc	10d38 <xCoRoutineRemoveFromEventList+0x6c>
	{
		xReturn = pdTRUE;
   10d2c:	e3a03001 	mov	r3, #1
   10d30:	e50b3008 	str	r3, [fp, #-8]
   10d34:	ea000001 	b	10d40 <xCoRoutineRemoveFromEventList+0x74>
	}
	else
	{
		xReturn = pdFALSE;
   10d38:	e3a03000 	mov	r3, #0
   10d3c:	e50b3008 	str	r3, [fp, #-8]
	}

	return xReturn;
   10d40:	e51b3008 	ldr	r3, [fp, #-8]
}
   10d44:	e1a00003 	mov	r0, r3
   10d48:	e24bd004 	sub	sp, fp, #4
   10d4c:	e8bd8800 	pop	{fp, pc}
   10d50:	0001453c 	andeq	r4, r1, ip, lsr r5
   10d54:	00014550 	andeq	r4, r1, r0, asr r5

00010d58 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
   10d58:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   10d5c:	e28db000 	add	fp, sp, #0
   10d60:	e24dd00c 	sub	sp, sp, #12
   10d64:	e50b0008 	str	r0, [fp, #-8]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
   10d68:	e51b3008 	ldr	r3, [fp, #-8]
   10d6c:	e2832008 	add	r2, r3, #8
   10d70:	e51b3008 	ldr	r3, [fp, #-8]
   10d74:	e5832004 	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   10d78:	e51b3008 	ldr	r3, [fp, #-8]
   10d7c:	e3e02000 	mvn	r2, #0
   10d80:	e5832008 	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
   10d84:	e51b3008 	ldr	r3, [fp, #-8]
   10d88:	e2832008 	add	r2, r3, #8
   10d8c:	e51b3008 	ldr	r3, [fp, #-8]
   10d90:	e583200c 	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
   10d94:	e51b3008 	ldr	r3, [fp, #-8]
   10d98:	e2832008 	add	r2, r3, #8
   10d9c:	e51b3008 	ldr	r3, [fp, #-8]
   10da0:	e5832010 	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
   10da4:	e51b3008 	ldr	r3, [fp, #-8]
   10da8:	e3a02000 	mov	r2, #0
   10dac:	e5832000 	str	r2, [r3]
}
   10db0:	e28bd000 	add	sp, fp, #0
   10db4:	e8bd0800 	pop	{fp}
   10db8:	e12fff1e 	bx	lr

00010dbc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
   10dbc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   10dc0:	e28db000 	add	fp, sp, #0
   10dc4:	e24dd00c 	sub	sp, sp, #12
   10dc8:	e50b0008 	str	r0, [fp, #-8]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   10dcc:	e51b3008 	ldr	r3, [fp, #-8]
   10dd0:	e3a02000 	mov	r2, #0
   10dd4:	e5832010 	str	r2, [r3, #16]
}
   10dd8:	e28bd000 	add	sp, fp, #0
   10ddc:	e8bd0800 	pop	{fp}
   10de0:	e12fff1e 	bx	lr

00010de4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
   10de4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   10de8:	e28db000 	add	fp, sp, #0
   10dec:	e24dd014 	sub	sp, sp, #20
   10df0:	e50b0010 	str	r0, [fp, #-16]
   10df4:	e50b1014 	str	r1, [fp, #-20]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
   10df8:	e51b3010 	ldr	r3, [fp, #-16]
   10dfc:	e5933004 	ldr	r3, [r3, #4]
   10e00:	e50b3008 	str	r3, [fp, #-8]

	pxNewListItem->pxNext = pxIndex->pxNext;
   10e04:	e51b3008 	ldr	r3, [fp, #-8]
   10e08:	e5932004 	ldr	r2, [r3, #4]
   10e0c:	e51b3014 	ldr	r3, [fp, #-20]
   10e10:	e5832004 	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
   10e14:	e51b3010 	ldr	r3, [fp, #-16]
   10e18:	e5932004 	ldr	r2, [r3, #4]
   10e1c:	e51b3014 	ldr	r3, [fp, #-20]
   10e20:	e5832008 	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   10e24:	e51b3008 	ldr	r3, [fp, #-8]
   10e28:	e5933004 	ldr	r3, [r3, #4]
   10e2c:	e51b2014 	ldr	r2, [fp, #-20]
   10e30:	e5832008 	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   10e34:	e51b3008 	ldr	r3, [fp, #-8]
   10e38:	e51b2014 	ldr	r2, [fp, #-20]
   10e3c:	e5832004 	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   10e40:	e51b3010 	ldr	r3, [fp, #-16]
   10e44:	e51b2014 	ldr	r2, [fp, #-20]
   10e48:	e5832004 	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   10e4c:	e51b3014 	ldr	r3, [fp, #-20]
   10e50:	e51b2010 	ldr	r2, [fp, #-16]
   10e54:	e5832010 	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   10e58:	e51b3010 	ldr	r3, [fp, #-16]
   10e5c:	e5933000 	ldr	r3, [r3]
   10e60:	e2832001 	add	r2, r3, #1
   10e64:	e51b3010 	ldr	r3, [fp, #-16]
   10e68:	e5832000 	str	r2, [r3]
}
   10e6c:	e28bd000 	add	sp, fp, #0
   10e70:	e8bd0800 	pop	{fp}
   10e74:	e12fff1e 	bx	lr

00010e78 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
   10e78:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   10e7c:	e28db000 	add	fp, sp, #0
   10e80:	e24dd014 	sub	sp, sp, #20
   10e84:	e50b0010 	str	r0, [fp, #-16]
   10e88:	e50b1014 	str	r1, [fp, #-20]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
   10e8c:	e51b3014 	ldr	r3, [fp, #-20]
   10e90:	e5933000 	ldr	r3, [r3]
   10e94:	e50b300c 	str	r3, [fp, #-12]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   10e98:	e51b300c 	ldr	r3, [fp, #-12]
   10e9c:	e3730001 	cmn	r3, #1
   10ea0:	1a000003 	bne	10eb4 <vListInsert+0x3c>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   10ea4:	e51b3010 	ldr	r3, [fp, #-16]
   10ea8:	e5933010 	ldr	r3, [r3, #16]
   10eac:	e50b3008 	str	r3, [fp, #-8]
   10eb0:	ea00000c 	b	10ee8 <vListInsert+0x70>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
   10eb4:	e51b3010 	ldr	r3, [fp, #-16]
   10eb8:	e2833008 	add	r3, r3, #8
   10ebc:	e50b3008 	str	r3, [fp, #-8]
   10ec0:	ea000002 	b	10ed0 <vListInsert+0x58>
   10ec4:	e51b3008 	ldr	r3, [fp, #-8]
   10ec8:	e5933004 	ldr	r3, [r3, #4]
   10ecc:	e50b3008 	str	r3, [fp, #-8]
   10ed0:	e51b3008 	ldr	r3, [fp, #-8]
   10ed4:	e5933004 	ldr	r3, [r3, #4]
   10ed8:	e5932000 	ldr	r2, [r3]
   10edc:	e51b300c 	ldr	r3, [fp, #-12]
   10ee0:	e1520003 	cmp	r2, r3
   10ee4:	9afffff6 	bls	10ec4 <vListInsert+0x4c>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   10ee8:	e51b3008 	ldr	r3, [fp, #-8]
   10eec:	e5932004 	ldr	r2, [r3, #4]
   10ef0:	e51b3014 	ldr	r3, [fp, #-20]
   10ef4:	e5832004 	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   10ef8:	e51b3014 	ldr	r3, [fp, #-20]
   10efc:	e5933004 	ldr	r3, [r3, #4]
   10f00:	e51b2014 	ldr	r2, [fp, #-20]
   10f04:	e5832008 	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   10f08:	e51b3014 	ldr	r3, [fp, #-20]
   10f0c:	e51b2008 	ldr	r2, [fp, #-8]
   10f10:	e5832008 	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
   10f14:	e51b3008 	ldr	r3, [fp, #-8]
   10f18:	e51b2014 	ldr	r2, [fp, #-20]
   10f1c:	e5832004 	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   10f20:	e51b3014 	ldr	r3, [fp, #-20]
   10f24:	e51b2010 	ldr	r2, [fp, #-16]
   10f28:	e5832010 	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   10f2c:	e51b3010 	ldr	r3, [fp, #-16]
   10f30:	e5933000 	ldr	r3, [r3]
   10f34:	e2832001 	add	r2, r3, #1
   10f38:	e51b3010 	ldr	r3, [fp, #-16]
   10f3c:	e5832000 	str	r2, [r3]
}
   10f40:	e28bd000 	add	sp, fp, #0
   10f44:	e8bd0800 	pop	{fp}
   10f48:	e12fff1e 	bx	lr

00010f4c <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
   10f4c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   10f50:	e28db000 	add	fp, sp, #0
   10f54:	e24dd014 	sub	sp, sp, #20
   10f58:	e50b0010 	str	r0, [fp, #-16]
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   10f5c:	e51b3010 	ldr	r3, [fp, #-16]
   10f60:	e5933004 	ldr	r3, [r3, #4]
   10f64:	e51b2010 	ldr	r2, [fp, #-16]
   10f68:	e5922008 	ldr	r2, [r2, #8]
   10f6c:	e5832008 	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   10f70:	e51b3010 	ldr	r3, [fp, #-16]
   10f74:	e5933008 	ldr	r3, [r3, #8]
   10f78:	e51b2010 	ldr	r2, [fp, #-16]
   10f7c:	e5922004 	ldr	r2, [r2, #4]
   10f80:	e5832004 	str	r2, [r3, #4]
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
   10f84:	e51b3010 	ldr	r3, [fp, #-16]
   10f88:	e5933010 	ldr	r3, [r3, #16]
   10f8c:	e50b3008 	str	r3, [fp, #-8]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   10f90:	e51b3008 	ldr	r3, [fp, #-8]
   10f94:	e5932004 	ldr	r2, [r3, #4]
   10f98:	e51b3010 	ldr	r3, [fp, #-16]
   10f9c:	e1520003 	cmp	r2, r3
   10fa0:	1a000003 	bne	10fb4 <vListRemove+0x68>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   10fa4:	e51b3010 	ldr	r3, [fp, #-16]
   10fa8:	e5932008 	ldr	r2, [r3, #8]
   10fac:	e51b3008 	ldr	r3, [fp, #-8]
   10fb0:	e5832004 	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
   10fb4:	e51b3010 	ldr	r3, [fp, #-16]
   10fb8:	e3a02000 	mov	r2, #0
   10fbc:	e5832010 	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
   10fc0:	e51b3008 	ldr	r3, [fp, #-8]
   10fc4:	e5933000 	ldr	r3, [r3]
   10fc8:	e2432001 	sub	r2, r3, #1
   10fcc:	e51b3008 	ldr	r3, [fp, #-8]
   10fd0:	e5832000 	str	r2, [r3]
}
   10fd4:	e28bd000 	add	sp, fp, #0
   10fd8:	e8bd0800 	pop	{fp}
   10fdc:	e12fff1e 	bx	lr

00010fe0 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
   10fe0:	e92d4800 	push	{fp, lr}
   10fe4:	e28db004 	add	fp, sp, #4
   10fe8:	e24dd008 	sub	sp, sp, #8
   10fec:	e50b0008 	str	r0, [fp, #-8]
   10ff0:	e50b100c 	str	r1, [fp, #-12]
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
   10ff4:	ebfffd54 	bl	1054c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   10ff8:	e51b3008 	ldr	r3, [fp, #-8]
   10ffc:	e5932000 	ldr	r2, [r3]
   11000:	e51b3008 	ldr	r3, [fp, #-8]
   11004:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   11008:	e51b1008 	ldr	r1, [fp, #-8]
   1100c:	e5911040 	ldr	r1, [r1, #64]	; 0x40
   11010:	e0030391 	mul	r3, r1, r3
   11014:	e0822003 	add	r2, r2, r3
   11018:	e51b3008 	ldr	r3, [fp, #-8]
   1101c:	e5832004 	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
   11020:	e51b3008 	ldr	r3, [fp, #-8]
   11024:	e3a02000 	mov	r2, #0
   11028:	e5832038 	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   1102c:	e51b3008 	ldr	r3, [fp, #-8]
   11030:	e5932000 	ldr	r2, [r3]
   11034:	e51b3008 	ldr	r3, [fp, #-8]
   11038:	e5832008 	str	r2, [r3, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
   1103c:	e51b3008 	ldr	r3, [fp, #-8]
   11040:	e5932000 	ldr	r2, [r3]
   11044:	e51b3008 	ldr	r3, [fp, #-8]
   11048:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   1104c:	e2433001 	sub	r3, r3, #1
   11050:	e51b1008 	ldr	r1, [fp, #-8]
   11054:	e5911040 	ldr	r1, [r1, #64]	; 0x40
   11058:	e0030391 	mul	r3, r1, r3
   1105c:	e0822003 	add	r2, r2, r3
   11060:	e51b3008 	ldr	r3, [fp, #-8]
   11064:	e583200c 	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
   11068:	e51b3008 	ldr	r3, [fp, #-8]
   1106c:	e3e02000 	mvn	r2, #0
   11070:	e5832044 	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
   11074:	e51b3008 	ldr	r3, [fp, #-8]
   11078:	e3e02000 	mvn	r2, #0
   1107c:	e5832048 	str	r2, [r3, #72]	; 0x48

		if( xNewQueue == pdFALSE )
   11080:	e51b300c 	ldr	r3, [fp, #-12]
   11084:	e3530000 	cmp	r3, #0
   11088:	1a00000c 	bne	110c0 <xQueueGenericReset+0xe0>
			/* If there are tasks blocked waiting to read from the queue, then 
			the tasks will remain blocked as after this function exits the queue 
			will still be empty.  If there are tasks blocked waiting to	write to 
			the queue, then one should be unblocked as after this function exits 
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1108c:	e51b3008 	ldr	r3, [fp, #-8]
   11090:	e5933010 	ldr	r3, [r3, #16]
   11094:	e3530000 	cmp	r3, #0
   11098:	0a000010 	beq	110e0 <xQueueGenericReset+0x100>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   1109c:	e51b3008 	ldr	r3, [fp, #-8]
   110a0:	e2833010 	add	r3, r3, #16
   110a4:	e1a00003 	mov	r0, r3
   110a8:	eb000756 	bl	12e08 <xTaskRemoveFromEventList>
   110ac:	e1a03000 	mov	r3, r0
   110b0:	e3530001 	cmp	r3, #1
   110b4:	1a000009 	bne	110e0 <xQueueGenericReset+0x100>
				{
					portYIELD_WITHIN_API();
   110b8:	ef000000 	svc	0x00000000
   110bc:	ea000007 	b	110e0 <xQueueGenericReset+0x100>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   110c0:	e51b3008 	ldr	r3, [fp, #-8]
   110c4:	e2833010 	add	r3, r3, #16
   110c8:	e1a00003 	mov	r0, r3
   110cc:	ebffff21 	bl	10d58 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );		
   110d0:	e51b3008 	ldr	r3, [fp, #-8]
   110d4:	e2833024 	add	r3, r3, #36	; 0x24
   110d8:	e1a00003 	mov	r0, r3
   110dc:	ebffff1d 	bl	10d58 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
   110e0:	ebfffd29 	bl	1058c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
   110e4:	e3a03001 	mov	r3, #1
}
   110e8:	e1a00003 	mov	r0, r3
   110ec:	e24bd004 	sub	sp, fp, #4
   110f0:	e8bd8800 	pop	{fp, pc}

000110f4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
   110f4:	e92d4800 	push	{fp, lr}
   110f8:	e28db004 	add	fp, sp, #4
   110fc:	e24dd020 	sub	sp, sp, #32
   11100:	e50b0018 	str	r0, [fp, #-24]
   11104:	e50b101c 	str	r1, [fp, #-28]
   11108:	e1a03002 	mov	r3, r2
   1110c:	e54b301d 	strb	r3, [fp, #-29]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
   11110:	e3a03000 	mov	r3, #0
   11114:	e50b3008 	str	r3, [fp, #-8]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
   11118:	e51b3018 	ldr	r3, [fp, #-24]
   1111c:	e3530000 	cmp	r3, #0
   11120:	0a000021 	beq	111ac <xQueueGenericCreate+0xb8>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
   11124:	e3a0004c 	mov	r0, #76	; 0x4c
   11128:	eb0008d3 	bl	1347c <pvPortMalloc>
   1112c:	e50b000c 	str	r0, [fp, #-12]
		if( pxNewQueue != NULL )
   11130:	e51b300c 	ldr	r3, [fp, #-12]
   11134:	e3530000 	cmp	r3, #0
   11138:	0a00001b 	beq	111ac <xQueueGenericCreate+0xb8>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
   1113c:	e51b3018 	ldr	r3, [fp, #-24]
   11140:	e51b201c 	ldr	r2, [fp, #-28]
   11144:	e0030392 	mul	r3, r2, r3
   11148:	e2833001 	add	r3, r3, #1
   1114c:	e50b3010 	str	r3, [fp, #-16]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
   11150:	e51b0010 	ldr	r0, [fp, #-16]
   11154:	eb0008c8 	bl	1347c <pvPortMalloc>
   11158:	e1a02000 	mov	r2, r0
   1115c:	e51b300c 	ldr	r3, [fp, #-12]
   11160:	e5832000 	str	r2, [r3]
			if( pxNewQueue->pcHead != NULL )
   11164:	e51b300c 	ldr	r3, [fp, #-12]
   11168:	e5933000 	ldr	r3, [r3]
   1116c:	e3530000 	cmp	r3, #0
   11170:	0a00000b 	beq	111a4 <xQueueGenericCreate+0xb0>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
   11174:	e51b300c 	ldr	r3, [fp, #-12]
   11178:	e51b2018 	ldr	r2, [fp, #-24]
   1117c:	e583203c 	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
   11180:	e51b300c 	ldr	r3, [fp, #-12]
   11184:	e51b201c 	ldr	r2, [fp, #-28]
   11188:	e5832040 	str	r2, [r3, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
   1118c:	e51b000c 	ldr	r0, [fp, #-12]
   11190:	e3a01001 	mov	r1, #1
   11194:	ebffff91 	bl	10fe0 <xQueueGenericReset>
					pxNewQueue->ucQueueType = ucQueueType;
				}
				#endif /* configUSE_TRACE_FACILITY */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
   11198:	e51b300c 	ldr	r3, [fp, #-12]
   1119c:	e50b3008 	str	r3, [fp, #-8]
   111a0:	ea000001 	b	111ac <xQueueGenericCreate+0xb8>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
   111a4:	e51b000c 	ldr	r0, [fp, #-12]
   111a8:	eb00092a 	bl	13658 <vPortFree>
		}
	}

	configASSERT( xReturn );

	return xReturn;
   111ac:	e51b3008 	ldr	r3, [fp, #-8]
}
   111b0:	e1a00003 	mov	r0, r3
   111b4:	e24bd004 	sub	sp, fp, #4
   111b8:	e8bd8800 	pop	{fp, pc}

000111bc <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
   111bc:	e92d4800 	push	{fp, lr}
   111c0:	e28db004 	add	fp, sp, #4
   111c4:	e24dd020 	sub	sp, sp, #32
   111c8:	e50b0018 	str	r0, [fp, #-24]
   111cc:	e50b101c 	str	r1, [fp, #-28]
   111d0:	e50b2020 	str	r2, [fp, #-32]
   111d4:	e50b3024 	str	r3, [fp, #-36]	; 0x24
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
   111d8:	e3a03000 	mov	r3, #0
   111dc:	e50b3008 	str	r3, [fp, #-8]
   111e0:	ea000000 	b	111e8 <xQueueGenericSend+0x2c>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
   111e4:	e1a00000 	nop			; (mov r0, r0)
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   111e8:	ebfffcd7 	bl	1054c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   111ec:	e51b3018 	ldr	r3, [fp, #-24]
   111f0:	e5932038 	ldr	r2, [r3, #56]	; 0x38
   111f4:	e51b3018 	ldr	r3, [fp, #-24]
   111f8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   111fc:	e1520003 	cmp	r2, r3
   11200:	2a000012 	bcs	11250 <xQueueGenericSend+0x94>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   11204:	e51b0018 	ldr	r0, [fp, #-24]
   11208:	e51b101c 	ldr	r1, [fp, #-28]
   1120c:	e51b2024 	ldr	r2, [fp, #-36]	; 0x24
   11210:	eb00016b 	bl	117c4 <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   11214:	e51b3018 	ldr	r3, [fp, #-24]
   11218:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   1121c:	e3530000 	cmp	r3, #0
   11220:	0a000007 	beq	11244 <xQueueGenericSend+0x88>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
   11224:	e51b3018 	ldr	r3, [fp, #-24]
   11228:	e2833024 	add	r3, r3, #36	; 0x24
   1122c:	e1a00003 	mov	r0, r3
   11230:	eb0006f4 	bl	12e08 <xTaskRemoveFromEventList>
   11234:	e1a03000 	mov	r3, r0
   11238:	e3530001 	cmp	r3, #1
   1123c:	1a000000 	bne	11244 <xQueueGenericSend+0x88>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
   11240:	ef000000 	svc	0x00000000
					}
				}

				taskEXIT_CRITICAL();
   11244:	ebfffcd0 	bl	1058c <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
   11248:	e3a03001 	mov	r3, #1
   1124c:	ea000042 	b	1135c <xQueueGenericSend+0x1a0>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   11250:	e51b3020 	ldr	r3, [fp, #-32]
   11254:	e3530000 	cmp	r3, #0
   11258:	1a000002 	bne	11268 <xQueueGenericSend+0xac>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   1125c:	ebfffcca 	bl	1058c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
   11260:	e3a03000 	mov	r3, #0
   11264:	ea00003c 	b	1135c <xQueueGenericSend+0x1a0>
				}
				else if( xEntryTimeSet == pdFALSE )
   11268:	e51b3008 	ldr	r3, [fp, #-8]
   1126c:	e3530000 	cmp	r3, #0
   11270:	1a000004 	bne	11288 <xQueueGenericSend+0xcc>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   11274:	e24b3010 	sub	r3, fp, #16
   11278:	e1a00003 	mov	r0, r3
   1127c:	eb000727 	bl	12f20 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
   11280:	e3a03001 	mov	r3, #1
   11284:	e50b3008 	str	r3, [fp, #-8]
				}
			}
		}
		taskEXIT_CRITICAL();
   11288:	ebfffcbf 	bl	1058c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   1128c:	eb00050b 	bl	126c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
   11290:	ebfffcad 	bl	1054c <vPortEnterCritical>
   11294:	e51b3018 	ldr	r3, [fp, #-24]
   11298:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   1129c:	e3730001 	cmn	r3, #1
   112a0:	1a000002 	bne	112b0 <xQueueGenericSend+0xf4>
   112a4:	e51b3018 	ldr	r3, [fp, #-24]
   112a8:	e3a02000 	mov	r2, #0
   112ac:	e5832044 	str	r2, [r3, #68]	; 0x44
   112b0:	e51b3018 	ldr	r3, [fp, #-24]
   112b4:	e5933048 	ldr	r3, [r3, #72]	; 0x48
   112b8:	e3730001 	cmn	r3, #1
   112bc:	1a000002 	bne	112cc <xQueueGenericSend+0x110>
   112c0:	e51b3018 	ldr	r3, [fp, #-24]
   112c4:	e3a02000 	mov	r2, #0
   112c8:	e5832048 	str	r2, [r3, #72]	; 0x48
   112cc:	ebfffcae 	bl	1058c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   112d0:	e24b2010 	sub	r2, fp, #16
   112d4:	e24b3020 	sub	r3, fp, #32
   112d8:	e1a00002 	mov	r0, r2
   112dc:	e1a01003 	mov	r1, r3
   112e0:	eb00071f 	bl	12f64 <xTaskCheckForTimeOut>
   112e4:	e1a03000 	mov	r3, r0
   112e8:	e3530000 	cmp	r3, #0
   112ec:	1a000016 	bne	1134c <xQueueGenericSend+0x190>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   112f0:	e51b0018 	ldr	r0, [fp, #-24]
   112f4:	eb000203 	bl	11b08 <prvIsQueueFull>
   112f8:	e1a03000 	mov	r3, r0
   112fc:	e3530000 	cmp	r3, #0
   11300:	0a00000d 	beq	1133c <xQueueGenericSend+0x180>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   11304:	e51b3018 	ldr	r3, [fp, #-24]
   11308:	e2832010 	add	r2, r3, #16
   1130c:	e51b3020 	ldr	r3, [fp, #-32]
   11310:	e1a00002 	mov	r0, r2
   11314:	e1a01003 	mov	r1, r3
   11318:	eb000694 	bl	12d70 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   1131c:	e51b0018 	ldr	r0, [fp, #-24]
   11320:	eb000197 	bl	11984 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   11324:	eb0004f0 	bl	126ec <xTaskResumeAll>
   11328:	e1a03000 	mov	r3, r0
   1132c:	e3530000 	cmp	r3, #0
   11330:	1affffab 	bne	111e4 <xQueueGenericSend+0x28>
				{
					portYIELD_WITHIN_API();
   11334:	ef000000 	svc	0x00000000
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
   11338:	eaffffa9 	b	111e4 <xQueueGenericSend+0x28>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   1133c:	e51b0018 	ldr	r0, [fp, #-24]
   11340:	eb00018f 	bl	11984 <prvUnlockQueue>
				( void ) xTaskResumeAll();
   11344:	eb0004e8 	bl	126ec <xTaskResumeAll>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
   11348:	eaffffa5 	b	111e4 <xQueueGenericSend+0x28>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   1134c:	e51b0018 	ldr	r0, [fp, #-24]
   11350:	eb00018b 	bl	11984 <prvUnlockQueue>
			( void ) xTaskResumeAll();
   11354:	eb0004e4 	bl	126ec <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
   11358:	e3a03000 	mov	r3, #0
		}
	}
}
   1135c:	e1a00003 	mov	r0, r3
   11360:	e24bd004 	sub	sp, fp, #4
   11364:	e8bd8800 	pop	{fp, pc}

00011368 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
   11368:	e92d4800 	push	{fp, lr}
   1136c:	e28db004 	add	fp, sp, #4
   11370:	e24dd018 	sub	sp, sp, #24
   11374:	e50b0010 	str	r0, [fp, #-16]
   11378:	e50b1014 	str	r1, [fp, #-20]
   1137c:	e50b2018 	str	r2, [fp, #-24]
   11380:	e50b301c 	str	r3, [fp, #-28]
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   11384:	e3a03000 	mov	r3, #0
   11388:	e50b300c 	str	r3, [fp, #-12]
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   1138c:	e51b3010 	ldr	r3, [fp, #-16]
   11390:	e5932038 	ldr	r2, [r3, #56]	; 0x38
   11394:	e51b3010 	ldr	r3, [fp, #-16]
   11398:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   1139c:	e1520003 	cmp	r2, r3
   113a0:	2a000021 	bcs	1142c <xQueueGenericSendFromISR+0xc4>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   113a4:	e51b0010 	ldr	r0, [fp, #-16]
   113a8:	e51b1014 	ldr	r1, [fp, #-20]
   113ac:	e51b201c 	ldr	r2, [fp, #-28]
   113b0:	eb000103 	bl	117c4 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
   113b4:	e51b3010 	ldr	r3, [fp, #-16]
   113b8:	e5933048 	ldr	r3, [r3, #72]	; 0x48
   113bc:	e3730001 	cmn	r3, #1
   113c0:	1a000011 	bne	1140c <xQueueGenericSendFromISR+0xa4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   113c4:	e51b3010 	ldr	r3, [fp, #-16]
   113c8:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   113cc:	e3530000 	cmp	r3, #0
   113d0:	0a000012 	beq	11420 <xQueueGenericSendFromISR+0xb8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   113d4:	e51b3010 	ldr	r3, [fp, #-16]
   113d8:	e2833024 	add	r3, r3, #36	; 0x24
   113dc:	e1a00003 	mov	r0, r3
   113e0:	eb000688 	bl	12e08 <xTaskRemoveFromEventList>
   113e4:	e1a03000 	mov	r3, r0
   113e8:	e3530000 	cmp	r3, #0
   113ec:	0a00000b 	beq	11420 <xQueueGenericSendFromISR+0xb8>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						if( pxHigherPriorityTaskWoken != NULL )
   113f0:	e51b3018 	ldr	r3, [fp, #-24]
   113f4:	e3530000 	cmp	r3, #0
   113f8:	0a000008 	beq	11420 <xQueueGenericSendFromISR+0xb8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
   113fc:	e51b3018 	ldr	r3, [fp, #-24]
   11400:	e3a02001 	mov	r2, #1
   11404:	e5832000 	str	r2, [r3]
   11408:	ea000004 	b	11420 <xQueueGenericSendFromISR+0xb8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
   1140c:	e51b3010 	ldr	r3, [fp, #-16]
   11410:	e5933048 	ldr	r3, [r3, #72]	; 0x48
   11414:	e2832001 	add	r2, r3, #1
   11418:	e51b3010 	ldr	r3, [fp, #-16]
   1141c:	e5832048 	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
   11420:	e3a03001 	mov	r3, #1
   11424:	e50b3008 	str	r3, [fp, #-8]
   11428:	ea000001 	b	11434 <xQueueGenericSendFromISR+0xcc>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   1142c:	e3a03000 	mov	r3, #0
   11430:	e50b3008 	str	r3, [fp, #-8]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
   11434:	e51b3008 	ldr	r3, [fp, #-8]
}
   11438:	e1a00003 	mov	r0, r3
   1143c:	e24bd004 	sub	sp, fp, #4
   11440:	e8bd8800 	pop	{fp, pc}

00011444 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
   11444:	e92d4800 	push	{fp, lr}
   11448:	e28db004 	add	fp, sp, #4
   1144c:	e24dd020 	sub	sp, sp, #32
   11450:	e50b0018 	str	r0, [fp, #-24]
   11454:	e50b101c 	str	r1, [fp, #-28]
   11458:	e50b2020 	str	r2, [fp, #-32]
   1145c:	e50b3024 	str	r3, [fp, #-36]	; 0x24
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
   11460:	e3a03000 	mov	r3, #0
   11464:	e50b3008 	str	r3, [fp, #-8]
   11468:	ea000000 	b	11470 <xQueueGenericReceive+0x2c>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
   1146c:	e1a00000 	nop			; (mov r0, r0)
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   11470:	ebfffc35 	bl	1054c <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
   11474:	e51b3018 	ldr	r3, [fp, #-24]
   11478:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   1147c:	e3530000 	cmp	r3, #0
   11480:	0a00002c 	beq	11538 <xQueueGenericReceive+0xf4>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
   11484:	e51b3018 	ldr	r3, [fp, #-24]
   11488:	e593300c 	ldr	r3, [r3, #12]
   1148c:	e50b300c 	str	r3, [fp, #-12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
   11490:	e51b0018 	ldr	r0, [fp, #-24]
   11494:	e51b101c 	ldr	r1, [fp, #-28]
   11498:	eb000115 	bl	118f4 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
   1149c:	e51b3024 	ldr	r3, [fp, #-36]	; 0x24
   114a0:	e3530000 	cmp	r3, #0
   114a4:	1a000011 	bne	114f0 <xQueueGenericReceive+0xac>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
   114a8:	e51b3018 	ldr	r3, [fp, #-24]
   114ac:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   114b0:	e2432001 	sub	r2, r3, #1
   114b4:	e51b3018 	ldr	r3, [fp, #-24]
   114b8:	e5832038 	str	r2, [r3, #56]	; 0x38
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   114bc:	e51b3018 	ldr	r3, [fp, #-24]
   114c0:	e5933010 	ldr	r3, [r3, #16]
   114c4:	e3530000 	cmp	r3, #0
   114c8:	0a000017 	beq	1152c <xQueueGenericReceive+0xe8>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   114cc:	e51b3018 	ldr	r3, [fp, #-24]
   114d0:	e2833010 	add	r3, r3, #16
   114d4:	e1a00003 	mov	r0, r3
   114d8:	eb00064a 	bl	12e08 <xTaskRemoveFromEventList>
   114dc:	e1a03000 	mov	r3, r0
   114e0:	e3530001 	cmp	r3, #1
   114e4:	1a000010 	bne	1152c <xQueueGenericReceive+0xe8>
						{
							portYIELD_WITHIN_API();
   114e8:	ef000000 	svc	0x00000000
   114ec:	ea00000e 	b	1152c <xQueueGenericReceive+0xe8>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
   114f0:	e51b3018 	ldr	r3, [fp, #-24]
   114f4:	e51b200c 	ldr	r2, [fp, #-12]
   114f8:	e583200c 	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   114fc:	e51b3018 	ldr	r3, [fp, #-24]
   11500:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   11504:	e3530000 	cmp	r3, #0
   11508:	0a000007 	beq	1152c <xQueueGenericReceive+0xe8>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1150c:	e51b3018 	ldr	r3, [fp, #-24]
   11510:	e2833024 	add	r3, r3, #36	; 0x24
   11514:	e1a00003 	mov	r0, r3
   11518:	eb00063a 	bl	12e08 <xTaskRemoveFromEventList>
   1151c:	e1a03000 	mov	r3, r0
   11520:	e3530000 	cmp	r3, #0
   11524:	0a000000 	beq	1152c <xQueueGenericReceive+0xe8>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
   11528:	ef000000 	svc	0x00000000
						}
					}
				}

				taskEXIT_CRITICAL();
   1152c:	ebfffc16 	bl	1058c <vPortExitCritical>
				return pdPASS;
   11530:	e3a03001 	mov	r3, #1
   11534:	ea000042 	b	11644 <xQueueGenericReceive+0x200>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   11538:	e51b3020 	ldr	r3, [fp, #-32]
   1153c:	e3530000 	cmp	r3, #0
   11540:	1a000002 	bne	11550 <xQueueGenericReceive+0x10c>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   11544:	ebfffc10 	bl	1058c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   11548:	e3a03000 	mov	r3, #0
   1154c:	ea00003c 	b	11644 <xQueueGenericReceive+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
   11550:	e51b3008 	ldr	r3, [fp, #-8]
   11554:	e3530000 	cmp	r3, #0
   11558:	1a000004 	bne	11570 <xQueueGenericReceive+0x12c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   1155c:	e24b3014 	sub	r3, fp, #20
   11560:	e1a00003 	mov	r0, r3
   11564:	eb00066d 	bl	12f20 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
   11568:	e3a03001 	mov	r3, #1
   1156c:	e50b3008 	str	r3, [fp, #-8]
				}
			}
		}
		taskEXIT_CRITICAL();
   11570:	ebfffc05 	bl	1058c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   11574:	eb000451 	bl	126c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
   11578:	ebfffbf3 	bl	1054c <vPortEnterCritical>
   1157c:	e51b3018 	ldr	r3, [fp, #-24]
   11580:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   11584:	e3730001 	cmn	r3, #1
   11588:	1a000002 	bne	11598 <xQueueGenericReceive+0x154>
   1158c:	e51b3018 	ldr	r3, [fp, #-24]
   11590:	e3a02000 	mov	r2, #0
   11594:	e5832044 	str	r2, [r3, #68]	; 0x44
   11598:	e51b3018 	ldr	r3, [fp, #-24]
   1159c:	e5933048 	ldr	r3, [r3, #72]	; 0x48
   115a0:	e3730001 	cmn	r3, #1
   115a4:	1a000002 	bne	115b4 <xQueueGenericReceive+0x170>
   115a8:	e51b3018 	ldr	r3, [fp, #-24]
   115ac:	e3a02000 	mov	r2, #0
   115b0:	e5832048 	str	r2, [r3, #72]	; 0x48
   115b4:	ebfffbf4 	bl	1058c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   115b8:	e24b2014 	sub	r2, fp, #20
   115bc:	e24b3020 	sub	r3, fp, #32
   115c0:	e1a00002 	mov	r0, r2
   115c4:	e1a01003 	mov	r1, r3
   115c8:	eb000665 	bl	12f64 <xTaskCheckForTimeOut>
   115cc:	e1a03000 	mov	r3, r0
   115d0:	e3530000 	cmp	r3, #0
   115d4:	1a000016 	bne	11634 <xQueueGenericReceive+0x1f0>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   115d8:	e51b0018 	ldr	r0, [fp, #-24]
   115dc:	eb000128 	bl	11a84 <prvIsQueueEmpty>
   115e0:	e1a03000 	mov	r3, r0
   115e4:	e3530000 	cmp	r3, #0
   115e8:	0a00000d 	beq	11624 <xQueueGenericReceive+0x1e0>
						portEXIT_CRITICAL();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   115ec:	e51b3018 	ldr	r3, [fp, #-24]
   115f0:	e2832024 	add	r2, r3, #36	; 0x24
   115f4:	e51b3020 	ldr	r3, [fp, #-32]
   115f8:	e1a00002 	mov	r0, r2
   115fc:	e1a01003 	mov	r1, r3
   11600:	eb0005da 	bl	12d70 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
   11604:	e51b0018 	ldr	r0, [fp, #-24]
   11608:	eb0000dd 	bl	11984 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
   1160c:	eb000436 	bl	126ec <xTaskResumeAll>
   11610:	e1a03000 	mov	r3, r0
   11614:	e3530000 	cmp	r3, #0
   11618:	1affff93 	bne	1146c <xQueueGenericReceive+0x28>
				{
					portYIELD_WITHIN_API();
   1161c:	ef000000 	svc	0x00000000
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
   11620:	eaffff91 	b	1146c <xQueueGenericReceive+0x28>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   11624:	e51b0018 	ldr	r0, [fp, #-24]
   11628:	eb0000d5 	bl	11984 <prvUnlockQueue>
				( void ) xTaskResumeAll();
   1162c:	eb00042e 	bl	126ec <xTaskResumeAll>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
   11630:	eaffff8d 	b	1146c <xQueueGenericReceive+0x28>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
   11634:	e51b0018 	ldr	r0, [fp, #-24]
   11638:	eb0000d1 	bl	11984 <prvUnlockQueue>
			( void ) xTaskResumeAll();
   1163c:	eb00042a 	bl	126ec <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
   11640:	e3a03000 	mov	r3, #0
		}
	}
}
   11644:	e1a00003 	mov	r0, r3
   11648:	e24bd004 	sub	sp, fp, #4
   1164c:	e8bd8800 	pop	{fp, pc}

00011650 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxHigherPriorityTaskWoken )
{
   11650:	e92d4800 	push	{fp, lr}
   11654:	e28db004 	add	fp, sp, #4
   11658:	e24dd018 	sub	sp, sp, #24
   1165c:	e50b0010 	str	r0, [fp, #-16]
   11660:	e50b1014 	str	r1, [fp, #-20]
   11664:	e50b2018 	str	r2, [fp, #-24]
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   11668:	e3a03000 	mov	r3, #0
   1166c:	e50b300c 	str	r3, [fp, #-12]
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
   11670:	e51b3010 	ldr	r3, [fp, #-16]
   11674:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   11678:	e3530000 	cmp	r3, #0
   1167c:	0a000025 	beq	11718 <xQueueReceiveFromISR+0xc8>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
   11680:	e51b0010 	ldr	r0, [fp, #-16]
   11684:	e51b1014 	ldr	r1, [fp, #-20]
   11688:	eb000099 	bl	118f4 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
   1168c:	e51b3010 	ldr	r3, [fp, #-16]
   11690:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   11694:	e2432001 	sub	r2, r3, #1
   11698:	e51b3010 	ldr	r3, [fp, #-16]
   1169c:	e5832038 	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
   116a0:	e51b3010 	ldr	r3, [fp, #-16]
   116a4:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   116a8:	e3730001 	cmn	r3, #1
   116ac:	1a000011 	bne	116f8 <xQueueReceiveFromISR+0xa8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   116b0:	e51b3010 	ldr	r3, [fp, #-16]
   116b4:	e5933010 	ldr	r3, [r3, #16]
   116b8:	e3530000 	cmp	r3, #0
   116bc:	0a000012 	beq	1170c <xQueueReceiveFromISR+0xbc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   116c0:	e51b3010 	ldr	r3, [fp, #-16]
   116c4:	e2833010 	add	r3, r3, #16
   116c8:	e1a00003 	mov	r0, r3
   116cc:	eb0005cd 	bl	12e08 <xTaskRemoveFromEventList>
   116d0:	e1a03000 	mov	r3, r0
   116d4:	e3530000 	cmp	r3, #0
   116d8:	0a00000b 	beq	1170c <xQueueReceiveFromISR+0xbc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
   116dc:	e51b3018 	ldr	r3, [fp, #-24]
   116e0:	e3530000 	cmp	r3, #0
   116e4:	0a000008 	beq	1170c <xQueueReceiveFromISR+0xbc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
   116e8:	e51b3018 	ldr	r3, [fp, #-24]
   116ec:	e3a02001 	mov	r2, #1
   116f0:	e5832000 	str	r2, [r3]
   116f4:	ea000004 	b	1170c <xQueueReceiveFromISR+0xbc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
   116f8:	e51b3010 	ldr	r3, [fp, #-16]
   116fc:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   11700:	e2832001 	add	r2, r3, #1
   11704:	e51b3010 	ldr	r3, [fp, #-16]
   11708:	e5832044 	str	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
   1170c:	e3a03001 	mov	r3, #1
   11710:	e50b3008 	str	r3, [fp, #-8]
   11714:	ea000001 	b	11720 <xQueueReceiveFromISR+0xd0>
		}
		else
		{
			xReturn = pdFAIL;
   11718:	e3a03000 	mov	r3, #0
   1171c:	e50b3008 	str	r3, [fp, #-8]
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
   11720:	e51b3008 	ldr	r3, [fp, #-8]
}
   11724:	e1a00003 	mov	r0, r3
   11728:	e24bd004 	sub	sp, fp, #4
   1172c:	e8bd8800 	pop	{fp, pc}

00011730 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
   11730:	e92d4800 	push	{fp, lr}
   11734:	e28db004 	add	fp, sp, #4
   11738:	e24dd010 	sub	sp, sp, #16
   1173c:	e50b0010 	str	r0, [fp, #-16]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
   11740:	ebfffb81 	bl	1054c <vPortEnterCritical>
		uxReturn = pxQueue->uxMessagesWaiting;
   11744:	e51b3010 	ldr	r3, [fp, #-16]
   11748:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   1174c:	e50b3008 	str	r3, [fp, #-8]
	taskEXIT_CRITICAL();
   11750:	ebfffb8d 	bl	1058c <vPortExitCritical>

	return uxReturn;
   11754:	e51b3008 	ldr	r3, [fp, #-8]
}
   11758:	e1a00003 	mov	r0, r3
   1175c:	e24bd004 	sub	sp, fp, #4
   11760:	e8bd8800 	pop	{fp, pc}

00011764 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
   11764:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   11768:	e28db000 	add	fp, sp, #0
   1176c:	e24dd014 	sub	sp, sp, #20
   11770:	e50b0010 	str	r0, [fp, #-16]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
   11774:	e51b3010 	ldr	r3, [fp, #-16]
   11778:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   1177c:	e50b3008 	str	r3, [fp, #-8]

	return uxReturn;
   11780:	e51b3008 	ldr	r3, [fp, #-8]
}
   11784:	e1a00003 	mov	r0, r3
   11788:	e28bd000 	add	sp, fp, #0
   1178c:	e8bd0800 	pop	{fp}
   11790:	e12fff1e 	bx	lr

00011794 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
   11794:	e92d4800 	push	{fp, lr}
   11798:	e28db004 	add	fp, sp, #4
   1179c:	e24dd008 	sub	sp, sp, #8
   117a0:	e50b0008 	str	r0, [fp, #-8]
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
   117a4:	e51b3008 	ldr	r3, [fp, #-8]
   117a8:	e5933000 	ldr	r3, [r3]
   117ac:	e1a00003 	mov	r0, r3
   117b0:	eb0007a8 	bl	13658 <vPortFree>
	vPortFree( pxQueue );
   117b4:	e51b0008 	ldr	r0, [fp, #-8]
   117b8:	eb0007a6 	bl	13658 <vPortFree>
}
   117bc:	e24bd004 	sub	sp, fp, #4
   117c0:	e8bd8800 	pop	{fp, pc}

000117c4 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
   117c4:	e92d4800 	push	{fp, lr}
   117c8:	e28db004 	add	fp, sp, #4
   117cc:	e24dd010 	sub	sp, sp, #16
   117d0:	e50b0008 	str	r0, [fp, #-8]
   117d4:	e50b100c 	str	r1, [fp, #-12]
   117d8:	e50b2010 	str	r2, [fp, #-16]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
   117dc:	e51b3008 	ldr	r3, [fp, #-8]
   117e0:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   117e4:	e3530000 	cmp	r3, #0
   117e8:	0a00003a 	beq	118d8 <prvCopyDataToQueue+0x114>
				pxQueue->pxMutexHolder = NULL;
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
   117ec:	e51b3010 	ldr	r3, [fp, #-16]
   117f0:	e3530000 	cmp	r3, #0
   117f4:	1a000019 	bne	11860 <prvCopyDataToQueue+0x9c>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   117f8:	e51b3008 	ldr	r3, [fp, #-8]
   117fc:	e5932008 	ldr	r2, [r3, #8]
   11800:	e51b3008 	ldr	r3, [fp, #-8]
   11804:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   11808:	e1a00002 	mov	r0, r2
   1180c:	e51b100c 	ldr	r1, [fp, #-12]
   11810:	e1a02003 	mov	r2, r3
   11814:	eb000a80 	bl	1421c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   11818:	e51b3008 	ldr	r3, [fp, #-8]
   1181c:	e5932008 	ldr	r2, [r3, #8]
   11820:	e51b3008 	ldr	r3, [fp, #-8]
   11824:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   11828:	e0822003 	add	r2, r2, r3
   1182c:	e51b3008 	ldr	r3, [fp, #-8]
   11830:	e5832008 	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
   11834:	e51b3008 	ldr	r3, [fp, #-8]
   11838:	e5932008 	ldr	r2, [r3, #8]
   1183c:	e51b3008 	ldr	r3, [fp, #-8]
   11840:	e5933004 	ldr	r3, [r3, #4]
   11844:	e1520003 	cmp	r2, r3
   11848:	3a000022 	bcc	118d8 <prvCopyDataToQueue+0x114>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   1184c:	e51b3008 	ldr	r3, [fp, #-8]
   11850:	e5932000 	ldr	r2, [r3]
   11854:	e51b3008 	ldr	r3, [fp, #-8]
   11858:	e5832008 	str	r2, [r3, #8]
   1185c:	ea00001d 	b	118d8 <prvCopyDataToQueue+0x114>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   11860:	e51b3008 	ldr	r3, [fp, #-8]
   11864:	e593200c 	ldr	r2, [r3, #12]
   11868:	e51b3008 	ldr	r3, [fp, #-8]
   1186c:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   11870:	e1a00002 	mov	r0, r2
   11874:	e51b100c 	ldr	r1, [fp, #-12]
   11878:	e1a02003 	mov	r2, r3
   1187c:	eb000a66 	bl	1421c <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
   11880:	e51b3008 	ldr	r3, [fp, #-8]
   11884:	e593200c 	ldr	r2, [r3, #12]
   11888:	e51b3008 	ldr	r3, [fp, #-8]
   1188c:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   11890:	e2633000 	rsb	r3, r3, #0
   11894:	e0822003 	add	r2, r2, r3
   11898:	e51b3008 	ldr	r3, [fp, #-8]
   1189c:	e583200c 	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
   118a0:	e51b3008 	ldr	r3, [fp, #-8]
   118a4:	e593200c 	ldr	r2, [r3, #12]
   118a8:	e51b3008 	ldr	r3, [fp, #-8]
   118ac:	e5933000 	ldr	r3, [r3]
   118b0:	e1520003 	cmp	r2, r3
   118b4:	2a000007 	bcs	118d8 <prvCopyDataToQueue+0x114>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   118b8:	e51b3008 	ldr	r3, [fp, #-8]
   118bc:	e5932004 	ldr	r2, [r3, #4]
   118c0:	e51b3008 	ldr	r3, [fp, #-8]
   118c4:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   118c8:	e2633000 	rsb	r3, r3, #0
   118cc:	e0822003 	add	r2, r2, r3
   118d0:	e51b3008 	ldr	r3, [fp, #-8]
   118d4:	e583200c 	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
   118d8:	e51b3008 	ldr	r3, [fp, #-8]
   118dc:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   118e0:	e2832001 	add	r2, r3, #1
   118e4:	e51b3008 	ldr	r3, [fp, #-8]
   118e8:	e5832038 	str	r2, [r3, #56]	; 0x38
}
   118ec:	e24bd004 	sub	sp, fp, #4
   118f0:	e8bd8800 	pop	{fp, pc}

000118f4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
   118f4:	e92d4800 	push	{fp, lr}
   118f8:	e28db004 	add	fp, sp, #4
   118fc:	e24dd008 	sub	sp, sp, #8
   11900:	e50b0008 	str	r0, [fp, #-8]
   11904:	e50b100c 	str	r1, [fp, #-12]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
   11908:	e51b3008 	ldr	r3, [fp, #-8]
   1190c:	e5933000 	ldr	r3, [r3]
   11910:	e3530000 	cmp	r3, #0
   11914:	0a000018 	beq	1197c <prvCopyDataFromQueue+0x88>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
   11918:	e51b3008 	ldr	r3, [fp, #-8]
   1191c:	e593200c 	ldr	r2, [r3, #12]
   11920:	e51b3008 	ldr	r3, [fp, #-8]
   11924:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   11928:	e0822003 	add	r2, r2, r3
   1192c:	e51b3008 	ldr	r3, [fp, #-8]
   11930:	e583200c 	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
   11934:	e51b3008 	ldr	r3, [fp, #-8]
   11938:	e593200c 	ldr	r2, [r3, #12]
   1193c:	e51b3008 	ldr	r3, [fp, #-8]
   11940:	e5933004 	ldr	r3, [r3, #4]
   11944:	e1520003 	cmp	r2, r3
   11948:	3a000003 	bcc	1195c <prvCopyDataFromQueue+0x68>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
   1194c:	e51b3008 	ldr	r3, [fp, #-8]
   11950:	e5932000 	ldr	r2, [r3]
   11954:	e51b3008 	ldr	r3, [fp, #-8]
   11958:	e583200c 	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
   1195c:	e51b3008 	ldr	r3, [fp, #-8]
   11960:	e593200c 	ldr	r2, [r3, #12]
   11964:	e51b3008 	ldr	r3, [fp, #-8]
   11968:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   1196c:	e51b000c 	ldr	r0, [fp, #-12]
   11970:	e1a01002 	mov	r1, r2
   11974:	e1a02003 	mov	r2, r3
   11978:	eb000a27 	bl	1421c <memcpy>
	}
}
   1197c:	e24bd004 	sub	sp, fp, #4
   11980:	e8bd8800 	pop	{fp, pc}

00011984 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
   11984:	e92d4800 	push	{fp, lr}
   11988:	e28db004 	add	fp, sp, #4
   1198c:	e24dd008 	sub	sp, sp, #8
   11990:	e50b0008 	str	r0, [fp, #-8]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   11994:	ebfffaec 	bl	1054c <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   11998:	ea000010 	b	119e0 <prvUnlockQueue+0x5c>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1199c:	e51b3008 	ldr	r3, [fp, #-8]
   119a0:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   119a4:	e3530000 	cmp	r3, #0
   119a8:	0a000011 	beq	119f4 <prvUnlockQueue+0x70>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   119ac:	e51b3008 	ldr	r3, [fp, #-8]
   119b0:	e2833024 	add	r3, r3, #36	; 0x24
   119b4:	e1a00003 	mov	r0, r3
   119b8:	eb000512 	bl	12e08 <xTaskRemoveFromEventList>
   119bc:	e1a03000 	mov	r3, r0
   119c0:	e3530000 	cmp	r3, #0
   119c4:	0a000000 	beq	119cc <prvUnlockQueue+0x48>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   119c8:	eb0005a2 	bl	13058 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
   119cc:	e51b3008 	ldr	r3, [fp, #-8]
   119d0:	e5933048 	ldr	r3, [r3, #72]	; 0x48
   119d4:	e2432001 	sub	r2, r3, #1
   119d8:	e51b3008 	ldr	r3, [fp, #-8]
   119dc:	e5832048 	str	r2, [r3, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   119e0:	e51b3008 	ldr	r3, [fp, #-8]
   119e4:	e5933048 	ldr	r3, [r3, #72]	; 0x48
   119e8:	e3530000 	cmp	r3, #0
   119ec:	caffffea 	bgt	1199c <prvUnlockQueue+0x18>
   119f0:	ea000000 	b	119f8 <prvUnlockQueue+0x74>

				--( pxQueue->xTxLock );
			}
			else
			{
				break;
   119f4:	e1a00000 	nop			; (mov r0, r0)
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
   119f8:	e51b3008 	ldr	r3, [fp, #-8]
   119fc:	e3e02000 	mvn	r2, #0
   11a00:	e5832048 	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
   11a04:	ebfffae0 	bl	1058c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   11a08:	ebfffacf 	bl	1054c <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   11a0c:	ea000010 	b	11a54 <prvUnlockQueue+0xd0>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   11a10:	e51b3008 	ldr	r3, [fp, #-8]
   11a14:	e5933010 	ldr	r3, [r3, #16]
   11a18:	e3530000 	cmp	r3, #0
   11a1c:	0a000011 	beq	11a68 <prvUnlockQueue+0xe4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   11a20:	e51b3008 	ldr	r3, [fp, #-8]
   11a24:	e2833010 	add	r3, r3, #16
   11a28:	e1a00003 	mov	r0, r3
   11a2c:	eb0004f5 	bl	12e08 <xTaskRemoveFromEventList>
   11a30:	e1a03000 	mov	r3, r0
   11a34:	e3530000 	cmp	r3, #0
   11a38:	0a000000 	beq	11a40 <prvUnlockQueue+0xbc>
				{
					vTaskMissedYield();
   11a3c:	eb000585 	bl	13058 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
   11a40:	e51b3008 	ldr	r3, [fp, #-8]
   11a44:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   11a48:	e2432001 	sub	r2, r3, #1
   11a4c:	e51b3008 	ldr	r3, [fp, #-8]
   11a50:	e5832044 	str	r2, [r3, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   11a54:	e51b3008 	ldr	r3, [fp, #-8]
   11a58:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   11a5c:	e3530000 	cmp	r3, #0
   11a60:	caffffea 	bgt	11a10 <prvUnlockQueue+0x8c>
   11a64:	ea000000 	b	11a6c <prvUnlockQueue+0xe8>

				--( pxQueue->xRxLock );
			}
			else
			{
				break;
   11a68:	e1a00000 	nop			; (mov r0, r0)
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
   11a6c:	e51b3008 	ldr	r3, [fp, #-8]
   11a70:	e3e02000 	mvn	r2, #0
   11a74:	e5832044 	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
   11a78:	ebfffac3 	bl	1058c <vPortExitCritical>
}
   11a7c:	e24bd004 	sub	sp, fp, #4
   11a80:	e8bd8800 	pop	{fp, pc}

00011a84 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
   11a84:	e92d4800 	push	{fp, lr}
   11a88:	e28db004 	add	fp, sp, #4
   11a8c:	e24dd010 	sub	sp, sp, #16
   11a90:	e50b0010 	str	r0, [fp, #-16]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   11a94:	ebfffaac 	bl	1054c <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
   11a98:	e51b3010 	ldr	r3, [fp, #-16]
   11a9c:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   11aa0:	e3530000 	cmp	r3, #0
   11aa4:	13a03000 	movne	r3, #0
   11aa8:	03a03001 	moveq	r3, #1
   11aac:	e6ef3073 	uxtb	r3, r3
   11ab0:	e50b3008 	str	r3, [fp, #-8]
	taskEXIT_CRITICAL();
   11ab4:	ebfffab4 	bl	1058c <vPortExitCritical>

	return xReturn;
   11ab8:	e51b3008 	ldr	r3, [fp, #-8]
}
   11abc:	e1a00003 	mov	r0, r3
   11ac0:	e24bd004 	sub	sp, fp, #4
   11ac4:	e8bd8800 	pop	{fp, pc}

00011ac8 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
   11ac8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   11acc:	e28db000 	add	fp, sp, #0
   11ad0:	e24dd014 	sub	sp, sp, #20
   11ad4:	e50b0010 	str	r0, [fp, #-16]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
   11ad8:	e51b3010 	ldr	r3, [fp, #-16]
   11adc:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   11ae0:	e3530000 	cmp	r3, #0
   11ae4:	13a03000 	movne	r3, #0
   11ae8:	03a03001 	moveq	r3, #1
   11aec:	e6ef3073 	uxtb	r3, r3
   11af0:	e50b3008 	str	r3, [fp, #-8]

	return xReturn;
   11af4:	e51b3008 	ldr	r3, [fp, #-8]
}
   11af8:	e1a00003 	mov	r0, r3
   11afc:	e28bd000 	add	sp, fp, #0
   11b00:	e8bd0800 	pop	{fp}
   11b04:	e12fff1e 	bx	lr

00011b08 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
   11b08:	e92d4800 	push	{fp, lr}
   11b0c:	e28db004 	add	fp, sp, #4
   11b10:	e24dd010 	sub	sp, sp, #16
   11b14:	e50b0010 	str	r0, [fp, #-16]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   11b18:	ebfffa8b 	bl	1054c <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
   11b1c:	e51b3010 	ldr	r3, [fp, #-16]
   11b20:	e5932038 	ldr	r2, [r3, #56]	; 0x38
   11b24:	e51b3010 	ldr	r3, [fp, #-16]
   11b28:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   11b2c:	e1520003 	cmp	r2, r3
   11b30:	13a03000 	movne	r3, #0
   11b34:	03a03001 	moveq	r3, #1
   11b38:	e6ef3073 	uxtb	r3, r3
   11b3c:	e50b3008 	str	r3, [fp, #-8]
	taskEXIT_CRITICAL();
   11b40:	ebfffa91 	bl	1058c <vPortExitCritical>

	return xReturn;
   11b44:	e51b3008 	ldr	r3, [fp, #-8]
}
   11b48:	e1a00003 	mov	r0, r3
   11b4c:	e24bd004 	sub	sp, fp, #4
   11b50:	e8bd8800 	pop	{fp, pc}

00011b54 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
   11b54:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   11b58:	e28db000 	add	fp, sp, #0
   11b5c:	e24dd014 	sub	sp, sp, #20
   11b60:	e50b0010 	str	r0, [fp, #-16]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
   11b64:	e51b3010 	ldr	r3, [fp, #-16]
   11b68:	e5932038 	ldr	r2, [r3, #56]	; 0x38
   11b6c:	e51b3010 	ldr	r3, [fp, #-16]
   11b70:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   11b74:	e1520003 	cmp	r2, r3
   11b78:	13a03000 	movne	r3, #0
   11b7c:	03a03001 	moveq	r3, #1
   11b80:	e6ef3073 	uxtb	r3, r3
   11b84:	e50b3008 	str	r3, [fp, #-8]

	return xReturn;
   11b88:	e51b3008 	ldr	r3, [fp, #-8]
}
   11b8c:	e1a00003 	mov	r0, r3
   11b90:	e28bd000 	add	sp, fp, #0
   11b94:	e8bd0800 	pop	{fp}
   11b98:	e12fff1e 	bx	lr

00011b9c <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
   11b9c:	e92d4800 	push	{fp, lr}
   11ba0:	e28db004 	add	fp, sp, #4
   11ba4:	e24dd028 	sub	sp, sp, #40	; 0x28
   11ba8:	e50b0018 	str	r0, [fp, #-24]
   11bac:	e50b101c 	str	r1, [fp, #-28]
   11bb0:	e50b3024 	str	r3, [fp, #-36]	; 0x24
   11bb4:	e14b21be 	strh	r2, [fp, #-30]	; 0xffffffe2
	configASSERT( pxTaskCode );
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
   11bb8:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
   11bbc:	e1a00003 	mov	r0, r3
   11bc0:	e59b100c 	ldr	r1, [fp, #12]
   11bc4:	eb0005f3 	bl	13398 <prvAllocateTCBAndStack>
   11bc8:	e50b000c 	str	r0, [fp, #-12]

	if( pxNewTCB != NULL )
   11bcc:	e51b300c 	ldr	r3, [fp, #-12]
   11bd0:	e3530000 	cmp	r3, #0
   11bd4:	0a000067 	beq	11d78 <xTaskGenericCreate+0x1dc>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
   11bd8:	e51b300c 	ldr	r3, [fp, #-12]
   11bdc:	e5932030 	ldr	r2, [r3, #48]	; 0x30
   11be0:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
   11be4:	e2433001 	sub	r3, r3, #1
   11be8:	e1a03103 	lsl	r3, r3, #2
   11bec:	e0823003 	add	r3, r2, r3
   11bf0:	e50b3010 	str	r3, [fp, #-16]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
   11bf4:	e51b3010 	ldr	r3, [fp, #-16]
   11bf8:	e3c33007 	bic	r3, r3, #7
   11bfc:	e50b3010 	str	r3, [fp, #-16]
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
   11c00:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
   11c04:	e58d3000 	str	r3, [sp]
   11c08:	e51b000c 	ldr	r0, [fp, #-12]
   11c0c:	e51b101c 	ldr	r1, [fp, #-28]
   11c10:	e59b2004 	ldr	r2, [fp, #4]
   11c14:	e59b3010 	ldr	r3, [fp, #16]
   11c18:	eb000525 	bl	130b4 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   11c1c:	e51b0010 	ldr	r0, [fp, #-16]
   11c20:	e51b1018 	ldr	r1, [fp, #-24]
   11c24:	e51b2024 	ldr	r2, [fp, #-36]	; 0x24
   11c28:	ebfff8f4 	bl	10000 <pxPortInitialiseStack>
   11c2c:	e1a02000 	mov	r2, r0
   11c30:	e51b300c 	ldr	r3, [fp, #-12]
   11c34:	e5832000 	str	r2, [r3]
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
   11c38:	e59b3008 	ldr	r3, [fp, #8]
   11c3c:	e3530000 	cmp	r3, #0
   11c40:	0a000002 	beq	11c50 <xTaskGenericCreate+0xb4>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
   11c44:	e59b3008 	ldr	r3, [fp, #8]
   11c48:	e51b200c 	ldr	r2, [fp, #-12]
   11c4c:	e5832000 	str	r2, [r3]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
   11c50:	ebfffa3d 	bl	1054c <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
   11c54:	e59f316c 	ldr	r3, [pc, #364]	; 11dc8 <xTaskGenericCreate+0x22c>
   11c58:	e5933000 	ldr	r3, [r3]
   11c5c:	e2832001 	add	r2, r3, #1
   11c60:	e59f3160 	ldr	r3, [pc, #352]	; 11dc8 <xTaskGenericCreate+0x22c>
   11c64:	e5832000 	str	r2, [r3]
			if( pxCurrentTCB == NULL )
   11c68:	e59f315c 	ldr	r3, [pc, #348]	; 11dcc <xTaskGenericCreate+0x230>
   11c6c:	e5933000 	ldr	r3, [r3]
   11c70:	e3530000 	cmp	r3, #0
   11c74:	1a000008 	bne	11c9c <xTaskGenericCreate+0x100>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
   11c78:	e59f314c 	ldr	r3, [pc, #332]	; 11dcc <xTaskGenericCreate+0x230>
   11c7c:	e51b200c 	ldr	r2, [fp, #-12]
   11c80:	e5832000 	str	r2, [r3]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
   11c84:	e59f313c 	ldr	r3, [pc, #316]	; 11dc8 <xTaskGenericCreate+0x22c>
   11c88:	e5933000 	ldr	r3, [r3]
   11c8c:	e3530001 	cmp	r3, #1
   11c90:	1a00000e 	bne	11cd0 <xTaskGenericCreate+0x134>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
   11c94:	eb000535 	bl	13170 <prvInitialiseTaskLists>
   11c98:	ea00000c 	b	11cd0 <xTaskGenericCreate+0x134>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
   11c9c:	e59f312c 	ldr	r3, [pc, #300]	; 11dd0 <xTaskGenericCreate+0x234>
   11ca0:	e5933000 	ldr	r3, [r3]
   11ca4:	e3530000 	cmp	r3, #0
   11ca8:	1a000008 	bne	11cd0 <xTaskGenericCreate+0x134>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
   11cac:	e59f3118 	ldr	r3, [pc, #280]	; 11dcc <xTaskGenericCreate+0x230>
   11cb0:	e5933000 	ldr	r3, [r3]
   11cb4:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   11cb8:	e59b3004 	ldr	r3, [fp, #4]
   11cbc:	e1520003 	cmp	r2, r3
   11cc0:	8a000002 	bhi	11cd0 <xTaskGenericCreate+0x134>
					{
						pxCurrentTCB = pxNewTCB;
   11cc4:	e59f3100 	ldr	r3, [pc, #256]	; 11dcc <xTaskGenericCreate+0x230>
   11cc8:	e51b200c 	ldr	r2, [fp, #-12]
   11ccc:	e5832000 	str	r2, [r3]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
   11cd0:	e51b300c 	ldr	r3, [fp, #-12]
   11cd4:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   11cd8:	e59f30f4 	ldr	r3, [pc, #244]	; 11dd4 <xTaskGenericCreate+0x238>
   11cdc:	e5933000 	ldr	r3, [r3]
   11ce0:	e1520003 	cmp	r2, r3
   11ce4:	9a000003 	bls	11cf8 <xTaskGenericCreate+0x15c>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
   11ce8:	e51b300c 	ldr	r3, [fp, #-12]
   11cec:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   11cf0:	e59f30dc 	ldr	r3, [pc, #220]	; 11dd4 <xTaskGenericCreate+0x238>
   11cf4:	e5832000 	str	r2, [r3]
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
   11cf8:	e59f30d8 	ldr	r3, [pc, #216]	; 11dd8 <xTaskGenericCreate+0x23c>
   11cfc:	e5933000 	ldr	r3, [r3]
   11d00:	e2832001 	add	r2, r3, #1
   11d04:	e59f30cc 	ldr	r3, [pc, #204]	; 11dd8 <xTaskGenericCreate+0x23c>
   11d08:	e5832000 	str	r2, [r3]

			prvAddTaskToReadyQueue( pxNewTCB );
   11d0c:	e51b300c 	ldr	r3, [fp, #-12]
   11d10:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   11d14:	e59f30c0 	ldr	r3, [pc, #192]	; 11ddc <xTaskGenericCreate+0x240>
   11d18:	e5933000 	ldr	r3, [r3]
   11d1c:	e1520003 	cmp	r2, r3
   11d20:	9a000003 	bls	11d34 <xTaskGenericCreate+0x198>
   11d24:	e51b300c 	ldr	r3, [fp, #-12]
   11d28:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   11d2c:	e59f30a8 	ldr	r3, [pc, #168]	; 11ddc <xTaskGenericCreate+0x240>
   11d30:	e5832000 	str	r2, [r3]
   11d34:	e51b300c 	ldr	r3, [fp, #-12]
   11d38:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   11d3c:	e1a03002 	mov	r3, r2
   11d40:	e1a03103 	lsl	r3, r3, #2
   11d44:	e0833002 	add	r3, r3, r2
   11d48:	e1a03103 	lsl	r3, r3, #2
   11d4c:	e59f208c 	ldr	r2, [pc, #140]	; 11de0 <xTaskGenericCreate+0x244>
   11d50:	e0832002 	add	r2, r3, r2
   11d54:	e51b300c 	ldr	r3, [fp, #-12]
   11d58:	e2833004 	add	r3, r3, #4
   11d5c:	e1a00002 	mov	r0, r2
   11d60:	e1a01003 	mov	r1, r3
   11d64:	ebfffc1e 	bl	10de4 <vListInsertEnd>

			xReturn = pdPASS;
   11d68:	e3a03001 	mov	r3, #1
   11d6c:	e50b3008 	str	r3, [fp, #-8]
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
   11d70:	ebfffa05 	bl	1058c <vPortExitCritical>
   11d74:	ea000001 	b	11d80 <xTaskGenericCreate+0x1e4>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   11d78:	e3e03000 	mvn	r3, #0
   11d7c:	e50b3008 	str	r3, [fp, #-8]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
   11d80:	e51b3008 	ldr	r3, [fp, #-8]
   11d84:	e3530001 	cmp	r3, #1
   11d88:	1a00000a 	bne	11db8 <xTaskGenericCreate+0x21c>
	{
		if( xSchedulerRunning != pdFALSE )
   11d8c:	e59f303c 	ldr	r3, [pc, #60]	; 11dd0 <xTaskGenericCreate+0x234>
   11d90:	e5933000 	ldr	r3, [r3]
   11d94:	e3530000 	cmp	r3, #0
   11d98:	0a000006 	beq	11db8 <xTaskGenericCreate+0x21c>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
   11d9c:	e59f3028 	ldr	r3, [pc, #40]	; 11dcc <xTaskGenericCreate+0x230>
   11da0:	e5933000 	ldr	r3, [r3]
   11da4:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   11da8:	e59b3004 	ldr	r3, [fp, #4]
   11dac:	e1520003 	cmp	r2, r3
   11db0:	2a000000 	bcs	11db8 <xTaskGenericCreate+0x21c>
			{
				portYIELD_WITHIN_API();
   11db4:	ef000000 	svc	0x00000000
			}
		}
	}

	return xReturn;
   11db8:	e51b3008 	ldr	r3, [fp, #-8]
}
   11dbc:	e1a00003 	mov	r0, r3
   11dc0:	e24bd004 	sub	sp, fp, #4
   11dc4:	e8bd8800 	pop	{fp, pc}
   11dc8:	0001463c 	andeq	r4, r1, ip, lsr r6
   11dcc:	00014564 	andeq	r4, r1, r4, ror #10
   11dd0:	0001464c 	andeq	r4, r1, ip, asr #12
   11dd4:	00014644 	andeq	r4, r1, r4, asr #12
   11dd8:	00014660 	andeq	r4, r1, r0, ror #12
   11ddc:	00014648 	andeq	r4, r1, r8, asr #12
   11de0:	00014568 	andeq	r4, r1, r8, ror #10

00011de4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
   11de4:	e92d4800 	push	{fp, lr}
   11de8:	e28db004 	add	fp, sp, #4
   11dec:	e24dd010 	sub	sp, sp, #16
   11df0:	e50b0010 	str	r0, [fp, #-16]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
   11df4:	ebfff9d4 	bl	1054c <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
   11df8:	e59f30cc 	ldr	r3, [pc, #204]	; 11ecc <vTaskDelete+0xe8>
   11dfc:	e5933000 	ldr	r3, [r3]
   11e00:	e51b2010 	ldr	r2, [fp, #-16]
   11e04:	e1520003 	cmp	r2, r3
   11e08:	1a000001 	bne	11e14 <vTaskDelete+0x30>
			{
				pxTaskToDelete = NULL;
   11e0c:	e3a03000 	mov	r3, #0
   11e10:	e50b3010 	str	r3, [fp, #-16]
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
   11e14:	e51b3010 	ldr	r3, [fp, #-16]
   11e18:	e3530000 	cmp	r3, #0
   11e1c:	1a000002 	bne	11e2c <vTaskDelete+0x48>
   11e20:	e59f30a4 	ldr	r3, [pc, #164]	; 11ecc <vTaskDelete+0xe8>
   11e24:	e5933000 	ldr	r3, [r3]
   11e28:	ea000000 	b	11e30 <vTaskDelete+0x4c>
   11e2c:	e51b3010 	ldr	r3, [fp, #-16]
   11e30:	e50b3008 	str	r3, [fp, #-8]

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
   11e34:	e51b3008 	ldr	r3, [fp, #-8]
   11e38:	e2833004 	add	r3, r3, #4
   11e3c:	e1a00003 	mov	r0, r3
   11e40:	ebfffc41 	bl	10f4c <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
   11e44:	e51b3008 	ldr	r3, [fp, #-8]
   11e48:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   11e4c:	e3530000 	cmp	r3, #0
   11e50:	0a000003 	beq	11e64 <vTaskDelete+0x80>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
   11e54:	e51b3008 	ldr	r3, [fp, #-8]
   11e58:	e2833018 	add	r3, r3, #24
   11e5c:	e1a00003 	mov	r0, r3
   11e60:	ebfffc39 	bl	10f4c <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
   11e64:	e51b3008 	ldr	r3, [fp, #-8]
   11e68:	e2833004 	add	r3, r3, #4
   11e6c:	e59f005c 	ldr	r0, [pc, #92]	; 11ed0 <vTaskDelete+0xec>
   11e70:	e1a01003 	mov	r1, r3
   11e74:	ebfffbda 	bl	10de4 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
   11e78:	e59f3054 	ldr	r3, [pc, #84]	; 11ed4 <vTaskDelete+0xf0>
   11e7c:	e5933000 	ldr	r3, [r3]
   11e80:	e2832001 	add	r2, r3, #1
   11e84:	e59f3048 	ldr	r3, [pc, #72]	; 11ed4 <vTaskDelete+0xf0>
   11e88:	e5832000 	str	r2, [r3]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
   11e8c:	e59f3044 	ldr	r3, [pc, #68]	; 11ed8 <vTaskDelete+0xf4>
   11e90:	e5933000 	ldr	r3, [r3]
   11e94:	e2832001 	add	r2, r3, #1
   11e98:	e59f3038 	ldr	r3, [pc, #56]	; 11ed8 <vTaskDelete+0xf4>
   11e9c:	e5832000 	str	r2, [r3]

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
   11ea0:	ebfff9b9 	bl	1058c <vPortExitCritical>

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
   11ea4:	e59f3030 	ldr	r3, [pc, #48]	; 11edc <vTaskDelete+0xf8>
   11ea8:	e5933000 	ldr	r3, [r3]
   11eac:	e3530000 	cmp	r3, #0
   11eb0:	0a000003 	beq	11ec4 <vTaskDelete+0xe0>
		{
			if( ( void * ) pxTaskToDelete == NULL )
   11eb4:	e51b3010 	ldr	r3, [fp, #-16]
   11eb8:	e3530000 	cmp	r3, #0
   11ebc:	1a000000 	bne	11ec4 <vTaskDelete+0xe0>
			{
				portYIELD_WITHIN_API();
   11ec0:	ef000000 	svc	0x00000000
			}
		}
	}
   11ec4:	e24bd004 	sub	sp, fp, #4
   11ec8:	e8bd8800 	pop	{fp, pc}
   11ecc:	00014564 	andeq	r4, r1, r4, ror #10
   11ed0:	00014610 	andeq	r4, r1, r0, lsl r6
   11ed4:	00014624 	andeq	r4, r1, r4, lsr #12
   11ed8:	00014660 	andeq	r4, r1, r0, ror #12
   11edc:	0001464c 	andeq	r4, r1, ip, asr #12

00011ee0 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
   11ee0:	e92d4800 	push	{fp, lr}
   11ee4:	e28db004 	add	fp, sp, #4
   11ee8:	e24dd018 	sub	sp, sp, #24
   11eec:	e50b0018 	str	r0, [fp, #-24]
   11ef0:	e50b101c 	str	r1, [fp, #-28]
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
   11ef4:	e3a03000 	mov	r3, #0
   11ef8:	e50b3008 	str	r3, [fp, #-8]

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
   11efc:	eb0001ef 	bl	126c0 <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
   11f00:	e51b3018 	ldr	r3, [fp, #-24]
   11f04:	e5932000 	ldr	r2, [r3]
   11f08:	e51b301c 	ldr	r3, [fp, #-28]
   11f0c:	e0823003 	add	r3, r2, r3
   11f10:	e50b300c 	str	r3, [fp, #-12]

			if( xTickCount < *pxPreviousWakeTime )
   11f14:	e51b3018 	ldr	r3, [fp, #-24]
   11f18:	e5932000 	ldr	r2, [r3]
   11f1c:	e59f30c0 	ldr	r3, [pc, #192]	; 11fe4 <vTaskDelayUntil+0x104>
   11f20:	e5933000 	ldr	r3, [r3]
   11f24:	e1520003 	cmp	r2, r3
   11f28:	9a00000c 	bls	11f60 <vTaskDelayUntil+0x80>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
   11f2c:	e51b3018 	ldr	r3, [fp, #-24]
   11f30:	e5932000 	ldr	r2, [r3]
   11f34:	e51b300c 	ldr	r3, [fp, #-12]
   11f38:	e1520003 	cmp	r2, r3
   11f3c:	9a000013 	bls	11f90 <vTaskDelayUntil+0xb0>
   11f40:	e59f309c 	ldr	r3, [pc, #156]	; 11fe4 <vTaskDelayUntil+0x104>
   11f44:	e5933000 	ldr	r3, [r3]
   11f48:	e51b200c 	ldr	r2, [fp, #-12]
   11f4c:	e1520003 	cmp	r2, r3
   11f50:	9a00000e 	bls	11f90 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
   11f54:	e3a03001 	mov	r3, #1
   11f58:	e50b3008 	str	r3, [fp, #-8]
   11f5c:	ea00000b 	b	11f90 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
   11f60:	e51b3018 	ldr	r3, [fp, #-24]
   11f64:	e5932000 	ldr	r2, [r3]
   11f68:	e51b300c 	ldr	r3, [fp, #-12]
   11f6c:	e1520003 	cmp	r2, r3
   11f70:	8a000004 	bhi	11f88 <vTaskDelayUntil+0xa8>
   11f74:	e59f3068 	ldr	r3, [pc, #104]	; 11fe4 <vTaskDelayUntil+0x104>
   11f78:	e5933000 	ldr	r3, [r3]
   11f7c:	e51b200c 	ldr	r2, [fp, #-12]
   11f80:	e1520003 	cmp	r2, r3
   11f84:	9a000001 	bls	11f90 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
   11f88:	e3a03001 	mov	r3, #1
   11f8c:	e50b3008 	str	r3, [fp, #-8]
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   11f90:	e51b3018 	ldr	r3, [fp, #-24]
   11f94:	e51b200c 	ldr	r2, [fp, #-12]
   11f98:	e5832000 	str	r2, [r3]

			if( xShouldDelay != pdFALSE )
   11f9c:	e51b3008 	ldr	r3, [fp, #-8]
   11fa0:	e3530000 	cmp	r3, #0
   11fa4:	0a000006 	beq	11fc4 <vTaskDelayUntil+0xe4>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   11fa8:	e59f3038 	ldr	r3, [pc, #56]	; 11fe8 <vTaskDelayUntil+0x108>
   11fac:	e5933000 	ldr	r3, [r3]
   11fb0:	e2833004 	add	r3, r3, #4
   11fb4:	e1a00003 	mov	r0, r3
   11fb8:	ebfffbe3 	bl	10f4c <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
   11fbc:	e51b000c 	ldr	r0, [fp, #-12]
   11fc0:	eb0004c7 	bl	132e4 <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
   11fc4:	eb0001c8 	bl	126ec <xTaskResumeAll>
   11fc8:	e50b0010 	str	r0, [fp, #-16]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   11fcc:	e51b3010 	ldr	r3, [fp, #-16]
   11fd0:	e3530000 	cmp	r3, #0
   11fd4:	1a000000 	bne	11fdc <vTaskDelayUntil+0xfc>
		{
			portYIELD_WITHIN_API();
   11fd8:	ef000000 	svc	0x00000000
		}
	}
   11fdc:	e24bd004 	sub	sp, fp, #4
   11fe0:	e8bd8800 	pop	{fp, pc}
   11fe4:	00014640 	andeq	r4, r1, r0, asr #12
   11fe8:	00014564 	andeq	r4, r1, r4, ror #10

00011fec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
   11fec:	e92d4800 	push	{fp, lr}
   11ff0:	e28db004 	add	fp, sp, #4
   11ff4:	e24dd010 	sub	sp, sp, #16
   11ff8:	e50b0010 	str	r0, [fp, #-16]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   11ffc:	e3a03000 	mov	r3, #0
   12000:	e50b3008 	str	r3, [fp, #-8]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
   12004:	e51b3010 	ldr	r3, [fp, #-16]
   12008:	e3530000 	cmp	r3, #0
   1200c:	0a00000e 	beq	1204c <vTaskDelay+0x60>
		{
			vTaskSuspendAll();
   12010:	eb0001aa 	bl	126c0 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
   12014:	e59f3048 	ldr	r3, [pc, #72]	; 12064 <vTaskDelay+0x78>
   12018:	e5932000 	ldr	r2, [r3]
   1201c:	e51b3010 	ldr	r3, [fp, #-16]
   12020:	e0823003 	add	r3, r2, r3
   12024:	e50b300c 	str	r3, [fp, #-12]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   12028:	e59f3038 	ldr	r3, [pc, #56]	; 12068 <vTaskDelay+0x7c>
   1202c:	e5933000 	ldr	r3, [r3]
   12030:	e2833004 	add	r3, r3, #4
   12034:	e1a00003 	mov	r0, r3
   12038:	ebfffbc3 	bl	10f4c <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
   1203c:	e51b000c 	ldr	r0, [fp, #-12]
   12040:	eb0004a7 	bl	132e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
   12044:	eb0001a8 	bl	126ec <xTaskResumeAll>
   12048:	e50b0008 	str	r0, [fp, #-8]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   1204c:	e51b3008 	ldr	r3, [fp, #-8]
   12050:	e3530000 	cmp	r3, #0
   12054:	1a000000 	bne	1205c <vTaskDelay+0x70>
		{
			portYIELD_WITHIN_API();
   12058:	ef000000 	svc	0x00000000
		}
	}
   1205c:	e24bd004 	sub	sp, fp, #4
   12060:	e8bd8800 	pop	{fp, pc}
   12064:	00014640 	andeq	r4, r1, r0, asr #12
   12068:	00014564 	andeq	r4, r1, r4, ror #10

0001206c <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	unsigned portBASE_TYPE uxTaskPriorityGet( xTaskHandle pxTask )
	{
   1206c:	e92d4800 	push	{fp, lr}
   12070:	e28db004 	add	fp, sp, #4
   12074:	e24dd010 	sub	sp, sp, #16
   12078:	e50b0010 	str	r0, [fp, #-16]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxReturn;

		taskENTER_CRITICAL();
   1207c:	ebfff932 	bl	1054c <vPortEnterCritical>
		{
			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
   12080:	e51b3010 	ldr	r3, [fp, #-16]
   12084:	e3530000 	cmp	r3, #0
   12088:	1a000002 	bne	12098 <uxTaskPriorityGet+0x2c>
   1208c:	e59f302c 	ldr	r3, [pc, #44]	; 120c0 <uxTaskPriorityGet+0x54>
   12090:	e5933000 	ldr	r3, [r3]
   12094:	ea000000 	b	1209c <uxTaskPriorityGet+0x30>
   12098:	e51b3010 	ldr	r3, [fp, #-16]
   1209c:	e50b3008 	str	r3, [fp, #-8]
			uxReturn = pxTCB->uxPriority;
   120a0:	e51b3008 	ldr	r3, [fp, #-8]
   120a4:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   120a8:	e50b300c 	str	r3, [fp, #-12]
		}
		taskEXIT_CRITICAL();
   120ac:	ebfff936 	bl	1058c <vPortExitCritical>

		return uxReturn;
   120b0:	e51b300c 	ldr	r3, [fp, #-12]
	}
   120b4:	e1a00003 	mov	r0, r3
   120b8:	e24bd004 	sub	sp, fp, #4
   120bc:	e8bd8800 	pop	{fp, pc}
   120c0:	00014564 	andeq	r4, r1, r4, ror #10

000120c4 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( xTaskHandle pxTask, unsigned portBASE_TYPE uxNewPriority )
	{
   120c4:	e92d4800 	push	{fp, lr}
   120c8:	e28db004 	add	fp, sp, #4
   120cc:	e24dd018 	sub	sp, sp, #24
   120d0:	e50b0018 	str	r0, [fp, #-24]
   120d4:	e50b101c 	str	r1, [fp, #-28]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxCurrentPriority;
	portBASE_TYPE xYieldRequired = pdFALSE;
   120d8:	e3a03000 	mov	r3, #0
   120dc:	e50b3008 	str	r3, [fp, #-8]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= configMAX_PRIORITIES )
   120e0:	e51b301c 	ldr	r3, [fp, #-28]
   120e4:	e3530004 	cmp	r3, #4
   120e8:	9a000001 	bls	120f4 <vTaskPrioritySet+0x30>
		{
			uxNewPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
   120ec:	e3a03004 	mov	r3, #4
   120f0:	e50b301c 	str	r3, [fp, #-28]
		}

		taskENTER_CRITICAL();
   120f4:	ebfff914 	bl	1054c <vPortEnterCritical>
		{
			if( pxTask == pxCurrentTCB )
   120f8:	e59f315c 	ldr	r3, [pc, #348]	; 1225c <vTaskPrioritySet+0x198>
   120fc:	e5933000 	ldr	r3, [r3]
   12100:	e51b2018 	ldr	r2, [fp, #-24]
   12104:	e1520003 	cmp	r2, r3
   12108:	1a000001 	bne	12114 <vTaskPrioritySet+0x50>
			{
				pxTask = NULL;
   1210c:	e3a03000 	mov	r3, #0
   12110:	e50b3018 	str	r3, [fp, #-24]
			}

			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
   12114:	e51b3018 	ldr	r3, [fp, #-24]
   12118:	e3530000 	cmp	r3, #0
   1211c:	1a000002 	bne	1212c <vTaskPrioritySet+0x68>
   12120:	e59f3134 	ldr	r3, [pc, #308]	; 1225c <vTaskPrioritySet+0x198>
   12124:	e5933000 	ldr	r3, [r3]
   12128:	ea000000 	b	12130 <vTaskPrioritySet+0x6c>
   1212c:	e51b3018 	ldr	r3, [fp, #-24]
   12130:	e50b300c 	str	r3, [fp, #-12]
			{
				uxCurrentPriority = pxTCB->uxBasePriority;
			}
			#else
			{
				uxCurrentPriority = pxTCB->uxPriority;
   12134:	e51b300c 	ldr	r3, [fp, #-12]
   12138:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   1213c:	e50b3010 	str	r3, [fp, #-16]
			}
			#endif

			if( uxCurrentPriority != uxNewPriority )
   12140:	e51b2010 	ldr	r2, [fp, #-16]
   12144:	e51b301c 	ldr	r3, [fp, #-28]
   12148:	e1520003 	cmp	r2, r3
   1214c:	0a00003f 	beq	12250 <vTaskPrioritySet+0x18c>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentPriority )
   12150:	e51b201c 	ldr	r2, [fp, #-28]
   12154:	e51b3010 	ldr	r3, [fp, #-16]
   12158:	e1520003 	cmp	r2, r3
   1215c:	9a000005 	bls	12178 <vTaskPrioritySet+0xb4>
				{
					if( pxTask != NULL )
   12160:	e51b3018 	ldr	r3, [fp, #-24]
   12164:	e3530000 	cmp	r3, #0
   12168:	0a000007 	beq	1218c <vTaskPrioritySet+0xc8>
					{
						/* The priority of another task is being raised.  If we
						were raising the priority of the currently running task
						there would be no need to switch as it must have already
						been the highest priority task. */
						xYieldRequired = pdTRUE;
   1216c:	e3a03001 	mov	r3, #1
   12170:	e50b3008 	str	r3, [fp, #-8]
   12174:	ea000004 	b	1218c <vTaskPrioritySet+0xc8>
					}
				}
				else if( pxTask == NULL )
   12178:	e51b3018 	ldr	r3, [fp, #-24]
   1217c:	e3530000 	cmp	r3, #0
   12180:	1a000001 	bne	1218c <vTaskPrioritySet+0xc8>
				{
					/* Setting our own priority down means there may now be another
					task of higher priority that is ready to execute. */
					xYieldRequired = pdTRUE;
   12184:	e3a03001 	mov	r3, #1
   12188:	e50b3008 	str	r3, [fp, #-8]
					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
				}
				#else
				{
					pxTCB->uxPriority = uxNewPriority;
   1218c:	e51b300c 	ldr	r3, [fp, #-12]
   12190:	e51b201c 	ldr	r2, [fp, #-28]
   12194:	e583202c 	str	r2, [r3, #44]	; 0x2c
				}
				#endif

				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( configMAX_PRIORITIES - ( portTickType ) uxNewPriority ) );
   12198:	e51b301c 	ldr	r3, [fp, #-28]
   1219c:	e2632005 	rsb	r2, r3, #5
   121a0:	e51b300c 	ldr	r3, [fp, #-12]
   121a4:	e5832018 	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the queue appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxCurrentPriority ] ), &( pxTCB->xGenericListItem ) ) )
   121a8:	e51b300c 	ldr	r3, [fp, #-12]
   121ac:	e5931014 	ldr	r1, [r3, #20]
   121b0:	e51b2010 	ldr	r2, [fp, #-16]
   121b4:	e1a03002 	mov	r3, r2
   121b8:	e1a03103 	lsl	r3, r3, #2
   121bc:	e0833002 	add	r3, r3, r2
   121c0:	e1a03103 	lsl	r3, r3, #2
   121c4:	e59f2094 	ldr	r2, [pc, #148]	; 12260 <vTaskPrioritySet+0x19c>
   121c8:	e0833002 	add	r3, r3, r2
   121cc:	e1510003 	cmp	r1, r3
   121d0:	1a00001a 	bne	12240 <vTaskPrioritySet+0x17c>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					vListRemove( &( pxTCB->xGenericListItem ) );
   121d4:	e51b300c 	ldr	r3, [fp, #-12]
   121d8:	e2833004 	add	r3, r3, #4
   121dc:	e1a00003 	mov	r0, r3
   121e0:	ebfffb59 	bl	10f4c <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
   121e4:	e51b300c 	ldr	r3, [fp, #-12]
   121e8:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   121ec:	e59f3070 	ldr	r3, [pc, #112]	; 12264 <vTaskPrioritySet+0x1a0>
   121f0:	e5933000 	ldr	r3, [r3]
   121f4:	e1520003 	cmp	r2, r3
   121f8:	9a000003 	bls	1220c <vTaskPrioritySet+0x148>
   121fc:	e51b300c 	ldr	r3, [fp, #-12]
   12200:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   12204:	e59f3058 	ldr	r3, [pc, #88]	; 12264 <vTaskPrioritySet+0x1a0>
   12208:	e5832000 	str	r2, [r3]
   1220c:	e51b300c 	ldr	r3, [fp, #-12]
   12210:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   12214:	e1a03002 	mov	r3, r2
   12218:	e1a03103 	lsl	r3, r3, #2
   1221c:	e0833002 	add	r3, r3, r2
   12220:	e1a03103 	lsl	r3, r3, #2
   12224:	e59f2034 	ldr	r2, [pc, #52]	; 12260 <vTaskPrioritySet+0x19c>
   12228:	e0832002 	add	r2, r3, r2
   1222c:	e51b300c 	ldr	r3, [fp, #-12]
   12230:	e2833004 	add	r3, r3, #4
   12234:	e1a00002 	mov	r0, r2
   12238:	e1a01003 	mov	r1, r3
   1223c:	ebfffae8 	bl	10de4 <vListInsertEnd>
				}

				if( xYieldRequired == pdTRUE )
   12240:	e51b3008 	ldr	r3, [fp, #-8]
   12244:	e3530001 	cmp	r3, #1
   12248:	1a000000 	bne	12250 <vTaskPrioritySet+0x18c>
				{
					portYIELD_WITHIN_API();
   1224c:	ef000000 	svc	0x00000000
				}
			}
		}
		taskEXIT_CRITICAL();
   12250:	ebfff8cd 	bl	1058c <vPortExitCritical>
	}
   12254:	e24bd004 	sub	sp, fp, #4
   12258:	e8bd8800 	pop	{fp, pc}
   1225c:	00014564 	andeq	r4, r1, r4, ror #10
   12260:	00014568 	andeq	r4, r1, r8, ror #10
   12264:	00014648 	andeq	r4, r1, r8, asr #12

00012268 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
	{
   12268:	e92d4800 	push	{fp, lr}
   1226c:	e28db004 	add	fp, sp, #4
   12270:	e24dd010 	sub	sp, sp, #16
   12274:	e50b0010 	str	r0, [fp, #-16]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
   12278:	ebfff8b3 	bl	1054c <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			suspended. */
			if( pxTaskToSuspend == pxCurrentTCB )
   1227c:	e59f30d4 	ldr	r3, [pc, #212]	; 12358 <vTaskSuspend+0xf0>
   12280:	e5933000 	ldr	r3, [r3]
   12284:	e51b2010 	ldr	r2, [fp, #-16]
   12288:	e1520003 	cmp	r2, r3
   1228c:	1a000001 	bne	12298 <vTaskSuspend+0x30>
			{
				pxTaskToSuspend = NULL;
   12290:	e3a03000 	mov	r3, #0
   12294:	e50b3010 	str	r3, [fp, #-16]
			}

			/* If null is passed in here then we are suspending ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
   12298:	e51b3010 	ldr	r3, [fp, #-16]
   1229c:	e3530000 	cmp	r3, #0
   122a0:	1a000002 	bne	122b0 <vTaskSuspend+0x48>
   122a4:	e59f30ac 	ldr	r3, [pc, #172]	; 12358 <vTaskSuspend+0xf0>
   122a8:	e5933000 	ldr	r3, [r3]
   122ac:	ea000000 	b	122b4 <vTaskSuspend+0x4c>
   122b0:	e51b3010 	ldr	r3, [fp, #-16]
   122b4:	e50b3008 	str	r3, [fp, #-8]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the	suspended list. */
			vListRemove( &( pxTCB->xGenericListItem ) );
   122b8:	e51b3008 	ldr	r3, [fp, #-8]
   122bc:	e2833004 	add	r3, r3, #4
   122c0:	e1a00003 	mov	r0, r3
   122c4:	ebfffb20 	bl	10f4c <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
   122c8:	e51b3008 	ldr	r3, [fp, #-8]
   122cc:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   122d0:	e3530000 	cmp	r3, #0
   122d4:	0a000003 	beq	122e8 <vTaskSuspend+0x80>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
   122d8:	e51b3008 	ldr	r3, [fp, #-8]
   122dc:	e2833018 	add	r3, r3, #24
   122e0:	e1a00003 	mov	r0, r3
   122e4:	ebfffb18 	bl	10f4c <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
   122e8:	e51b3008 	ldr	r3, [fp, #-8]
   122ec:	e2833004 	add	r3, r3, #4
   122f0:	e59f0064 	ldr	r0, [pc, #100]	; 1235c <vTaskSuspend+0xf4>
   122f4:	e1a01003 	mov	r1, r3
   122f8:	ebfffab9 	bl	10de4 <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
   122fc:	ebfff8a2 	bl	1058c <vPortExitCritical>

		if( ( void * ) pxTaskToSuspend == NULL )
   12300:	e51b3010 	ldr	r3, [fp, #-16]
   12304:	e3530000 	cmp	r3, #0
   12308:	1a000010 	bne	12350 <vTaskSuspend+0xe8>
		{
			if( xSchedulerRunning != pdFALSE )
   1230c:	e59f304c 	ldr	r3, [pc, #76]	; 12360 <vTaskSuspend+0xf8>
   12310:	e5933000 	ldr	r3, [r3]
   12314:	e3530000 	cmp	r3, #0
   12318:	0a000001 	beq	12324 <vTaskSuspend+0xbc>
			{
				/* We have just suspended the current task. */
				portYIELD_WITHIN_API();
   1231c:	ef000000 	svc	0x00000000
   12320:	ea00000a 	b	12350 <vTaskSuspend+0xe8>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
   12324:	e59f3030 	ldr	r3, [pc, #48]	; 1235c <vTaskSuspend+0xf4>
   12328:	e5932000 	ldr	r2, [r3]
   1232c:	e59f3030 	ldr	r3, [pc, #48]	; 12364 <vTaskSuspend+0xfc>
   12330:	e5933000 	ldr	r3, [r3]
   12334:	e1520003 	cmp	r2, r3
   12338:	1a000003 	bne	1234c <vTaskSuspend+0xe4>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
   1233c:	e59f3014 	ldr	r3, [pc, #20]	; 12358 <vTaskSuspend+0xf0>
   12340:	e3a02000 	mov	r2, #0
   12344:	e5832000 	str	r2, [r3]
   12348:	ea000000 	b	12350 <vTaskSuspend+0xe8>
				}
				else
				{
					vTaskSwitchContext();
   1234c:	eb000244 	bl	12c64 <vTaskSwitchContext>
				}
			}
		}
	}
   12350:	e24bd004 	sub	sp, fp, #4
   12354:	e8bd8800 	pop	{fp, pc}
   12358:	00014564 	andeq	r4, r1, r4, ror #10
   1235c:	00014628 	andeq	r4, r1, r8, lsr #12
   12360:	0001464c 	andeq	r4, r1, ip, asr #12
   12364:	0001463c 	andeq	r4, r1, ip, lsr r6

00012368 <xTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
   12368:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   1236c:	e28db000 	add	fp, sp, #0
   12370:	e24dd014 	sub	sp, sp, #20
   12374:	e50b0010 	str	r0, [fp, #-16]
	portBASE_TYPE xReturn = pdFALSE;
   12378:	e3a03000 	mov	r3, #0
   1237c:	e50b3008 	str	r3, [fp, #-8]
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
   12380:	e51b3010 	ldr	r3, [fp, #-16]
   12384:	e50b300c 	str	r3, [fp, #-12]
		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
   12388:	e51b300c 	ldr	r3, [fp, #-12]
   1238c:	e5932014 	ldr	r2, [r3, #20]
   12390:	e59f3044 	ldr	r3, [pc, #68]	; 123dc <xTaskIsTaskSuspended+0x74>
   12394:	e1520003 	cmp	r2, r3
   12398:	1a00000a 	bne	123c8 <xTaskIsTaskSuspended+0x60>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
   1239c:	e51b300c 	ldr	r3, [fp, #-12]
   123a0:	e5932028 	ldr	r2, [r3, #40]	; 0x28
   123a4:	e59f3034 	ldr	r3, [pc, #52]	; 123e0 <xTaskIsTaskSuspended+0x78>
   123a8:	e1520003 	cmp	r2, r3
   123ac:	0a000005 	beq	123c8 <xTaskIsTaskSuspended+0x60>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
   123b0:	e51b300c 	ldr	r3, [fp, #-12]
   123b4:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   123b8:	e3530000 	cmp	r3, #0
   123bc:	1a000001 	bne	123c8 <xTaskIsTaskSuspended+0x60>
				{
					xReturn = pdTRUE;
   123c0:	e3a03001 	mov	r3, #1
   123c4:	e50b3008 	str	r3, [fp, #-8]
				}
			}
		}

		return xReturn;
   123c8:	e51b3008 	ldr	r3, [fp, #-8]
	}
   123cc:	e1a00003 	mov	r0, r3
   123d0:	e28bd000 	add	sp, fp, #0
   123d4:	e8bd0800 	pop	{fp}
   123d8:	e12fff1e 	bx	lr
   123dc:	00014628 	andeq	r4, r1, r8, lsr #12
   123e0:	000145fc 	strdeq	r4, [r1], -ip

000123e4 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( xTaskHandle pxTaskToResume )
	{
   123e4:	e92d4800 	push	{fp, lr}
   123e8:	e28db004 	add	fp, sp, #4
   123ec:	e24dd010 	sub	sp, sp, #16
   123f0:	e50b0010 	str	r0, [fp, #-16]
		/* It does not make sense to resume the calling task. */
		configASSERT( pxTaskToResume );

		/* Remove the task from whichever list it is currently in, and place
		it in the ready list. */
		pxTCB = ( tskTCB * ) pxTaskToResume;
   123f4:	e51b3010 	ldr	r3, [fp, #-16]
   123f8:	e50b3008 	str	r3, [fp, #-8]

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
   123fc:	e51b3008 	ldr	r3, [fp, #-8]
   12400:	e3530000 	cmp	r3, #0
   12404:	0a00002e 	beq	124c4 <vTaskResume+0xe0>
   12408:	e59f30bc 	ldr	r3, [pc, #188]	; 124cc <vTaskResume+0xe8>
   1240c:	e5933000 	ldr	r3, [r3]
   12410:	e51b2008 	ldr	r2, [fp, #-8]
   12414:	e1520003 	cmp	r2, r3
   12418:	0a000029 	beq	124c4 <vTaskResume+0xe0>
		{
			taskENTER_CRITICAL();
   1241c:	ebfff84a 	bl	1054c <vPortEnterCritical>
			{
				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
   12420:	e51b0008 	ldr	r0, [fp, #-8]
   12424:	ebffffcf 	bl	12368 <xTaskIsTaskSuspended>
   12428:	e1a03000 	mov	r3, r0
   1242c:	e3530001 	cmp	r3, #1
   12430:	1a000022 	bne	124c0 <vTaskResume+0xdc>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					vListRemove(  &( pxTCB->xGenericListItem ) );
   12434:	e51b3008 	ldr	r3, [fp, #-8]
   12438:	e2833004 	add	r3, r3, #4
   1243c:	e1a00003 	mov	r0, r3
   12440:	ebfffac1 	bl	10f4c <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
   12444:	e51b3008 	ldr	r3, [fp, #-8]
   12448:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   1244c:	e59f307c 	ldr	r3, [pc, #124]	; 124d0 <vTaskResume+0xec>
   12450:	e5933000 	ldr	r3, [r3]
   12454:	e1520003 	cmp	r2, r3
   12458:	9a000003 	bls	1246c <vTaskResume+0x88>
   1245c:	e51b3008 	ldr	r3, [fp, #-8]
   12460:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   12464:	e59f3064 	ldr	r3, [pc, #100]	; 124d0 <vTaskResume+0xec>
   12468:	e5832000 	str	r2, [r3]
   1246c:	e51b3008 	ldr	r3, [fp, #-8]
   12470:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   12474:	e1a03002 	mov	r3, r2
   12478:	e1a03103 	lsl	r3, r3, #2
   1247c:	e0833002 	add	r3, r3, r2
   12480:	e1a03103 	lsl	r3, r3, #2
   12484:	e59f2048 	ldr	r2, [pc, #72]	; 124d4 <vTaskResume+0xf0>
   12488:	e0832002 	add	r2, r3, r2
   1248c:	e51b3008 	ldr	r3, [fp, #-8]
   12490:	e2833004 	add	r3, r3, #4
   12494:	e1a00002 	mov	r0, r2
   12498:	e1a01003 	mov	r1, r3
   1249c:	ebfffa50 	bl	10de4 <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   124a0:	e51b3008 	ldr	r3, [fp, #-8]
   124a4:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   124a8:	e59f301c 	ldr	r3, [pc, #28]	; 124cc <vTaskResume+0xe8>
   124ac:	e5933000 	ldr	r3, [r3]
   124b0:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   124b4:	e1520003 	cmp	r2, r3
   124b8:	3a000000 	bcc	124c0 <vTaskResume+0xdc>
					{
						/* This yield may not cause the task just resumed to run, but
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
   124bc:	ef000000 	svc	0x00000000
					}
				}
			}
			taskEXIT_CRITICAL();
   124c0:	ebfff831 	bl	1058c <vPortExitCritical>
		}
	}
   124c4:	e24bd004 	sub	sp, fp, #4
   124c8:	e8bd8800 	pop	{fp, pc}
   124cc:	00014564 	andeq	r4, r1, r4, ror #10
   124d0:	00014648 	andeq	r4, r1, r8, asr #12
   124d4:	00014568 	andeq	r4, r1, r8, ror #10

000124d8 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
	{
   124d8:	e92d4800 	push	{fp, lr}
   124dc:	e28db004 	add	fp, sp, #4
   124e0:	e24dd018 	sub	sp, sp, #24
   124e4:	e50b0018 	str	r0, [fp, #-24]
	portBASE_TYPE xYieldRequired = pdFALSE;
   124e8:	e3a03000 	mov	r3, #0
   124ec:	e50b3008 	str	r3, [fp, #-8]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxSavedInterruptStatus;

		configASSERT( pxTaskToResume );

		pxTCB = ( tskTCB * ) pxTaskToResume;
   124f0:	e51b3018 	ldr	r3, [fp, #-24]
   124f4:	e50b300c 	str	r3, [fp, #-12]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   124f8:	e3a03000 	mov	r3, #0
   124fc:	e50b3010 	str	r3, [fp, #-16]
		{
			if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
   12500:	e51b000c 	ldr	r0, [fp, #-12]
   12504:	ebffff97 	bl	12368 <xTaskIsTaskSuspended>
   12508:	e1a03000 	mov	r3, r0
   1250c:	e3530001 	cmp	r3, #1
   12510:	1a00002e 	bne	125d0 <xTaskResumeFromISR+0xf8>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   12514:	e59f30c4 	ldr	r3, [pc, #196]	; 125e0 <xTaskResumeFromISR+0x108>
   12518:	e5933000 	ldr	r3, [r3]
   1251c:	e3530000 	cmp	r3, #0
   12520:	1a000025 	bne	125bc <xTaskResumeFromISR+0xe4>
				{
					xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
   12524:	e51b300c 	ldr	r3, [fp, #-12]
   12528:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   1252c:	e59f30b0 	ldr	r3, [pc, #176]	; 125e4 <xTaskResumeFromISR+0x10c>
   12530:	e5933000 	ldr	r3, [r3]
   12534:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   12538:	e1520003 	cmp	r2, r3
   1253c:	33a03000 	movcc	r3, #0
   12540:	23a03001 	movcs	r3, #1
   12544:	e6ef3073 	uxtb	r3, r3
   12548:	e50b3008 	str	r3, [fp, #-8]
					vListRemove(  &( pxTCB->xGenericListItem ) );
   1254c:	e51b300c 	ldr	r3, [fp, #-12]
   12550:	e2833004 	add	r3, r3, #4
   12554:	e1a00003 	mov	r0, r3
   12558:	ebfffa7b 	bl	10f4c <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
   1255c:	e51b300c 	ldr	r3, [fp, #-12]
   12560:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   12564:	e59f307c 	ldr	r3, [pc, #124]	; 125e8 <xTaskResumeFromISR+0x110>
   12568:	e5933000 	ldr	r3, [r3]
   1256c:	e1520003 	cmp	r2, r3
   12570:	9a000003 	bls	12584 <xTaskResumeFromISR+0xac>
   12574:	e51b300c 	ldr	r3, [fp, #-12]
   12578:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   1257c:	e59f3064 	ldr	r3, [pc, #100]	; 125e8 <xTaskResumeFromISR+0x110>
   12580:	e5832000 	str	r2, [r3]
   12584:	e51b300c 	ldr	r3, [fp, #-12]
   12588:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   1258c:	e1a03002 	mov	r3, r2
   12590:	e1a03103 	lsl	r3, r3, #2
   12594:	e0833002 	add	r3, r3, r2
   12598:	e1a03103 	lsl	r3, r3, #2
   1259c:	e59f2048 	ldr	r2, [pc, #72]	; 125ec <xTaskResumeFromISR+0x114>
   125a0:	e0832002 	add	r2, r3, r2
   125a4:	e51b300c 	ldr	r3, [fp, #-12]
   125a8:	e2833004 	add	r3, r3, #4
   125ac:	e1a00002 	mov	r0, r2
   125b0:	e1a01003 	mov	r1, r3
   125b4:	ebfffa0a 	bl	10de4 <vListInsertEnd>
   125b8:	ea000004 	b	125d0 <xTaskResumeFromISR+0xf8>
				else
				{
					/* We cannot access the delayed or ready lists, so will hold this
					task pending until the scheduler is resumed, at which point a
					yield will be performed if necessary. */
					vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
   125bc:	e51b300c 	ldr	r3, [fp, #-12]
   125c0:	e2833018 	add	r3, r3, #24
   125c4:	e59f0024 	ldr	r0, [pc, #36]	; 125f0 <xTaskResumeFromISR+0x118>
   125c8:	e1a01003 	mov	r1, r3
   125cc:	ebfffa04 	bl	10de4 <vListInsertEnd>
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
   125d0:	e51b3008 	ldr	r3, [fp, #-8]
	}
   125d4:	e1a00003 	mov	r0, r3
   125d8:	e24bd004 	sub	sp, fp, #4
   125dc:	e8bd8800 	pop	{fp, pc}
   125e0:	00014650 	andeq	r4, r1, r0, asr r6
   125e4:	00014564 	andeq	r4, r1, r4, ror #10
   125e8:	00014648 	andeq	r4, r1, r8, asr #12
   125ec:	00014568 	andeq	r4, r1, r8, ror #10
   125f0:	000145fc 	strdeq	r4, [r1], -ip

000125f4 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
   125f4:	e92d4800 	push	{fp, lr}
   125f8:	e28db004 	add	fp, sp, #4
   125fc:	e24dd018 	sub	sp, sp, #24
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
   12600:	e3a03000 	mov	r3, #0
   12604:	e58d3000 	str	r3, [sp]
   12608:	e3a03000 	mov	r3, #0
   1260c:	e58d3004 	str	r3, [sp, #4]
   12610:	e3a03000 	mov	r3, #0
   12614:	e58d3008 	str	r3, [sp, #8]
   12618:	e3a03000 	mov	r3, #0
   1261c:	e58d300c 	str	r3, [sp, #12]
   12620:	e59f0054 	ldr	r0, [pc, #84]	; 1267c <vTaskStartScheduler+0x88>
   12624:	e59f1054 	ldr	r1, [pc, #84]	; 12680 <vTaskStartScheduler+0x8c>
   12628:	e3a02080 	mov	r2, #128	; 0x80
   1262c:	e3a03000 	mov	r3, #0
   12630:	ebfffd59 	bl	11b9c <xTaskGenericCreate>
   12634:	e50b0008 	str	r0, [fp, #-8]
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif

	if( xReturn == pdPASS )
   12638:	e51b3008 	ldr	r3, [fp, #-8]
   1263c:	e3530001 	cmp	r3, #1
   12640:	1a00000b 	bne	12674 <vTaskStartScheduler+0x80>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
   12644:	e92d0001 	push	{r0}
   12648:	e10f0000 	mrs	r0, CPSR
   1264c:	e38000c0 	orr	r0, r0, #192	; 0xc0
   12650:	e129f000 	msr	CPSR_fc, r0
   12654:	e8bd0001 	pop	{r0}

		xSchedulerRunning = pdTRUE;
   12658:	e59f3024 	ldr	r3, [pc, #36]	; 12684 <vTaskStartScheduler+0x90>
   1265c:	e3a02001 	mov	r2, #1
   12660:	e5832000 	str	r2, [r3]
		xTickCount = ( portTickType ) 0U;
   12664:	e59f301c 	ldr	r3, [pc, #28]	; 12688 <vTaskStartScheduler+0x94>
   12668:	e3a02000 	mov	r2, #0
   1266c:	e5832000 	str	r2, [r3]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();		

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   12670:	ebfff6f2 	bl	10240 <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
   12674:	e24bd004 	sub	sp, fp, #4
   12678:	e8bd8800 	pop	{fp, pc}
   1267c:	0001307c 	andeq	r3, r1, ip, ror r0
   12680:	000141c4 	andeq	r4, r1, r4, asr #3
   12684:	0001464c 	andeq	r4, r1, ip, asr #12
   12688:	00014640 	andeq	r4, r1, r0, asr #12

0001268c <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
   1268c:	e92d4800 	push	{fp, lr}
   12690:	e28db004 	add	fp, sp, #4
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
   12694:	e92d0001 	push	{r0}
   12698:	e10f0000 	mrs	r0, CPSR
   1269c:	e38000c0 	orr	r0, r0, #192	; 0xc0
   126a0:	e129f000 	msr	CPSR_fc, r0
   126a4:	e8bd0001 	pop	{r0}
	xSchedulerRunning = pdFALSE;
   126a8:	e59f300c 	ldr	r3, [pc, #12]	; 126bc <vTaskEndScheduler+0x30>
   126ac:	e3a02000 	mov	r2, #0
   126b0:	e5832000 	str	r2, [r3]
	vPortEndScheduler();
   126b4:	ebfff6e8 	bl	1025c <vPortEndScheduler>
}
   126b8:	e8bd8800 	pop	{fp, pc}
   126bc:	0001464c 	andeq	r4, r1, ip, asr #12

000126c0 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
   126c0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   126c4:	e28db000 	add	fp, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
   126c8:	e59f3018 	ldr	r3, [pc, #24]	; 126e8 <vTaskSuspendAll+0x28>
   126cc:	e5933000 	ldr	r3, [r3]
   126d0:	e2832001 	add	r2, r3, #1
   126d4:	e59f300c 	ldr	r3, [pc, #12]	; 126e8 <vTaskSuspendAll+0x28>
   126d8:	e5832000 	str	r2, [r3]
}
   126dc:	e28bd000 	add	sp, fp, #0
   126e0:	e8bd0800 	pop	{fp}
   126e4:	e12fff1e 	bx	lr
   126e8:	00014650 	andeq	r4, r1, r0, asr r6

000126ec <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
   126ec:	e92d4810 	push	{r4, fp, lr}
   126f0:	e28db008 	add	fp, sp, #8
   126f4:	e24dd00c 	sub	sp, sp, #12
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   126f8:	e3a03000 	mov	r3, #0
   126fc:	e50b3010 	str	r3, [fp, #-16]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   12700:	ebfff791 	bl	1054c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
   12704:	e59f3164 	ldr	r3, [pc, #356]	; 12870 <xTaskResumeAll+0x184>
   12708:	e5933000 	ldr	r3, [r3]
   1270c:	e2432001 	sub	r2, r3, #1
   12710:	e59f3158 	ldr	r3, [pc, #344]	; 12870 <xTaskResumeAll+0x184>
   12714:	e5832000 	str	r2, [r3]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   12718:	e59f3150 	ldr	r3, [pc, #336]	; 12870 <xTaskResumeAll+0x184>
   1271c:	e5933000 	ldr	r3, [r3]
   12720:	e3530000 	cmp	r3, #0
   12724:	1a00004c 	bne	1285c <xTaskResumeAll+0x170>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
   12728:	e59f3144 	ldr	r3, [pc, #324]	; 12874 <xTaskResumeAll+0x188>
   1272c:	e5933000 	ldr	r3, [r3]
   12730:	e3530000 	cmp	r3, #0
   12734:	0a000048 	beq	1285c <xTaskResumeAll+0x170>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
   12738:	e3a03000 	mov	r3, #0
   1273c:	e50b3014 	str	r3, [fp, #-20]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   12740:	ea000023 	b	127d4 <xTaskResumeAll+0xe8>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
   12744:	e59f312c 	ldr	r3, [pc, #300]	; 12878 <xTaskResumeAll+0x18c>
   12748:	e593300c 	ldr	r3, [r3, #12]
   1274c:	e593400c 	ldr	r4, [r3, #12]
					vListRemove( &( pxTCB->xEventListItem ) );
   12750:	e2843018 	add	r3, r4, #24
   12754:	e1a00003 	mov	r0, r3
   12758:	ebfff9fb 	bl	10f4c <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
   1275c:	e2843004 	add	r3, r4, #4
   12760:	e1a00003 	mov	r0, r3
   12764:	ebfff9f8 	bl	10f4c <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
   12768:	e594202c 	ldr	r2, [r4, #44]	; 0x2c
   1276c:	e59f3108 	ldr	r3, [pc, #264]	; 1287c <xTaskResumeAll+0x190>
   12770:	e5933000 	ldr	r3, [r3]
   12774:	e1520003 	cmp	r2, r3
   12778:	9a000002 	bls	12788 <xTaskResumeAll+0x9c>
   1277c:	e594202c 	ldr	r2, [r4, #44]	; 0x2c
   12780:	e59f30f4 	ldr	r3, [pc, #244]	; 1287c <xTaskResumeAll+0x190>
   12784:	e5832000 	str	r2, [r3]
   12788:	e594202c 	ldr	r2, [r4, #44]	; 0x2c
   1278c:	e1a03002 	mov	r3, r2
   12790:	e1a03103 	lsl	r3, r3, #2
   12794:	e0833002 	add	r3, r3, r2
   12798:	e1a03103 	lsl	r3, r3, #2
   1279c:	e59f20dc 	ldr	r2, [pc, #220]	; 12880 <xTaskResumeAll+0x194>
   127a0:	e0832002 	add	r2, r3, r2
   127a4:	e2843004 	add	r3, r4, #4
   127a8:	e1a00002 	mov	r0, r2
   127ac:	e1a01003 	mov	r1, r3
   127b0:	ebfff98b 	bl	10de4 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   127b4:	e594202c 	ldr	r2, [r4, #44]	; 0x2c
   127b8:	e59f30c4 	ldr	r3, [pc, #196]	; 12884 <xTaskResumeAll+0x198>
   127bc:	e5933000 	ldr	r3, [r3]
   127c0:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   127c4:	e1520003 	cmp	r2, r3
   127c8:	3a000001 	bcc	127d4 <xTaskResumeAll+0xe8>
					{
						xYieldRequired = pdTRUE;
   127cc:	e3a03001 	mov	r3, #1
   127d0:	e50b3014 	str	r3, [fp, #-20]
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   127d4:	e59f309c 	ldr	r3, [pc, #156]	; 12878 <xTaskResumeAll+0x18c>
   127d8:	e5933000 	ldr	r3, [r3]
   127dc:	e3530000 	cmp	r3, #0
   127e0:	1affffd7 	bne	12744 <xTaskResumeAll+0x58>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   127e4:	e59f309c 	ldr	r3, [pc, #156]	; 12888 <xTaskResumeAll+0x19c>
   127e8:	e5933000 	ldr	r3, [r3]
   127ec:	e3530000 	cmp	r3, #0
   127f0:	0a00000c 	beq	12828 <xTaskResumeAll+0x13c>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   127f4:	ea000005 	b	12810 <xTaskResumeAll+0x124>
					{
						vTaskIncrementTick();
   127f8:	eb000048 	bl	12920 <vTaskIncrementTick>
						--uxMissedTicks;
   127fc:	e59f3084 	ldr	r3, [pc, #132]	; 12888 <xTaskResumeAll+0x19c>
   12800:	e5933000 	ldr	r3, [r3]
   12804:	e2432001 	sub	r2, r3, #1
   12808:	e59f3078 	ldr	r3, [pc, #120]	; 12888 <xTaskResumeAll+0x19c>
   1280c:	e5832000 	str	r2, [r3]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   12810:	e59f3070 	ldr	r3, [pc, #112]	; 12888 <xTaskResumeAll+0x19c>
   12814:	e5933000 	ldr	r3, [r3]
   12818:	e3530000 	cmp	r3, #0
   1281c:	1afffff5 	bne	127f8 <xTaskResumeAll+0x10c>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
   12820:	e3a03001 	mov	r3, #1
   12824:	e50b3014 	str	r3, [fp, #-20]
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
   12828:	e51b3014 	ldr	r3, [fp, #-20]
   1282c:	e3530001 	cmp	r3, #1
   12830:	0a000003 	beq	12844 <xTaskResumeAll+0x158>
   12834:	e59f3050 	ldr	r3, [pc, #80]	; 1288c <xTaskResumeAll+0x1a0>
   12838:	e5933000 	ldr	r3, [r3]
   1283c:	e3530001 	cmp	r3, #1
   12840:	1a000005 	bne	1285c <xTaskResumeAll+0x170>
				{
					xAlreadyYielded = pdTRUE;
   12844:	e3a03001 	mov	r3, #1
   12848:	e50b3010 	str	r3, [fp, #-16]
					xMissedYield = pdFALSE;
   1284c:	e59f3038 	ldr	r3, [pc, #56]	; 1288c <xTaskResumeAll+0x1a0>
   12850:	e3a02000 	mov	r2, #0
   12854:	e5832000 	str	r2, [r3]
					portYIELD_WITHIN_API();
   12858:	ef000000 	svc	0x00000000
				}
			}
		}
	}
	taskEXIT_CRITICAL();
   1285c:	ebfff74a 	bl	1058c <vPortExitCritical>

	return xAlreadyYielded;
   12860:	e51b3010 	ldr	r3, [fp, #-16]
}
   12864:	e1a00003 	mov	r0, r3
   12868:	e24bd008 	sub	sp, fp, #8
   1286c:	e8bd8810 	pop	{r4, fp, pc}
   12870:	00014650 	andeq	r4, r1, r0, asr r6
   12874:	0001463c 	andeq	r4, r1, ip, lsr r6
   12878:	000145fc 	strdeq	r4, [r1], -ip
   1287c:	00014648 	andeq	r4, r1, r8, asr #12
   12880:	00014568 	andeq	r4, r1, r8, ror #10
   12884:	00014564 	andeq	r4, r1, r4, ror #10
   12888:	00014654 	andeq	r4, r1, r4, asr r6
   1288c:	00014658 	andeq	r4, r1, r8, asr r6

00012890 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
   12890:	e92d4800 	push	{fp, lr}
   12894:	e28db004 	add	fp, sp, #4
   12898:	e24dd008 	sub	sp, sp, #8
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
   1289c:	ebfff72a 	bl	1054c <vPortEnterCritical>
	{
		xTicks = xTickCount;
   128a0:	e59f3018 	ldr	r3, [pc, #24]	; 128c0 <xTaskGetTickCount+0x30>
   128a4:	e5933000 	ldr	r3, [r3]
   128a8:	e50b3008 	str	r3, [fp, #-8]
	}
	taskEXIT_CRITICAL();
   128ac:	ebfff736 	bl	1058c <vPortExitCritical>

	return xTicks;
   128b0:	e51b3008 	ldr	r3, [fp, #-8]
}
   128b4:	e1a00003 	mov	r0, r3
   128b8:	e24bd004 	sub	sp, fp, #4
   128bc:	e8bd8800 	pop	{fp, pc}
   128c0:	00014640 	andeq	r4, r1, r0, asr #12

000128c4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
   128c4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   128c8:	e28db000 	add	fp, sp, #0
   128cc:	e24dd00c 	sub	sp, sp, #12
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   128d0:	e3a03000 	mov	r3, #0
   128d4:	e50b3008 	str	r3, [fp, #-8]
	xReturn = xTickCount;
   128d8:	e59f3018 	ldr	r3, [pc, #24]	; 128f8 <xTaskGetTickCountFromISR+0x34>
   128dc:	e5933000 	ldr	r3, [r3]
   128e0:	e50b300c 	str	r3, [fp, #-12]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
   128e4:	e51b300c 	ldr	r3, [fp, #-12]
}
   128e8:	e1a00003 	mov	r0, r3
   128ec:	e28bd000 	add	sp, fp, #0
   128f0:	e8bd0800 	pop	{fp}
   128f4:	e12fff1e 	bx	lr
   128f8:	00014640 	andeq	r4, r1, r0, asr #12

000128fc <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
   128fc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   12900:	e28db000 	add	fp, sp, #0
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
   12904:	e59f3010 	ldr	r3, [pc, #16]	; 1291c <uxTaskGetNumberOfTasks+0x20>
   12908:	e5933000 	ldr	r3, [r3]
}
   1290c:	e1a00003 	mov	r0, r3
   12910:	e28bd000 	add	sp, fp, #0
   12914:	e8bd0800 	pop	{fp}
   12918:	e12fff1e 	bx	lr
   1291c:	0001463c 	andeq	r4, r1, ip, lsr r6

00012920 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
   12920:	e92d4800 	push	{fp, lr}
   12924:	e28db004 	add	fp, sp, #4
   12928:	e24dd010 	sub	sp, sp, #16
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   1292c:	e59f31dc 	ldr	r3, [pc, #476]	; 12b10 <vTaskIncrementTick+0x1f0>
   12930:	e5933000 	ldr	r3, [r3]
   12934:	e3530000 	cmp	r3, #0
   12938:	1a00006d 	bne	12af4 <vTaskIncrementTick+0x1d4>
	{
		++xTickCount;
   1293c:	e59f31d0 	ldr	r3, [pc, #464]	; 12b14 <vTaskIncrementTick+0x1f4>
   12940:	e5933000 	ldr	r3, [r3]
   12944:	e2832001 	add	r2, r3, #1
   12948:	e59f31c4 	ldr	r3, [pc, #452]	; 12b14 <vTaskIncrementTick+0x1f4>
   1294c:	e5832000 	str	r2, [r3]
		if( xTickCount == ( portTickType ) 0U )
   12950:	e59f31bc 	ldr	r3, [pc, #444]	; 12b14 <vTaskIncrementTick+0x1f4>
   12954:	e5933000 	ldr	r3, [r3]
   12958:	e3530000 	cmp	r3, #0
   1295c:	1a000020 	bne	129e4 <vTaskIncrementTick+0xc4>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );

			pxTemp = pxDelayedTaskList;
   12960:	e59f31b0 	ldr	r3, [pc, #432]	; 12b18 <vTaskIncrementTick+0x1f8>
   12964:	e5933000 	ldr	r3, [r3]
   12968:	e50b3008 	str	r3, [fp, #-8]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
   1296c:	e59f31a8 	ldr	r3, [pc, #424]	; 12b1c <vTaskIncrementTick+0x1fc>
   12970:	e5932000 	ldr	r2, [r3]
   12974:	e59f319c 	ldr	r3, [pc, #412]	; 12b18 <vTaskIncrementTick+0x1f8>
   12978:	e5832000 	str	r2, [r3]
			pxOverflowDelayedTaskList = pxTemp;
   1297c:	e59f3198 	ldr	r3, [pc, #408]	; 12b1c <vTaskIncrementTick+0x1fc>
   12980:	e51b2008 	ldr	r2, [fp, #-8]
   12984:	e5832000 	str	r2, [r3]
			xNumOfOverflows++;
   12988:	e59f3190 	ldr	r3, [pc, #400]	; 12b20 <vTaskIncrementTick+0x200>
   1298c:	e5933000 	ldr	r3, [r3]
   12990:	e2832001 	add	r2, r3, #1
   12994:	e59f3184 	ldr	r3, [pc, #388]	; 12b20 <vTaskIncrementTick+0x200>
   12998:	e5832000 	str	r2, [r3]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1299c:	e59f3174 	ldr	r3, [pc, #372]	; 12b18 <vTaskIncrementTick+0x1f8>
   129a0:	e5933000 	ldr	r3, [r3]
   129a4:	e5933000 	ldr	r3, [r3]
   129a8:	e3530000 	cmp	r3, #0
   129ac:	1a000003 	bne	129c0 <vTaskIncrementTick+0xa0>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
   129b0:	e59f316c 	ldr	r3, [pc, #364]	; 12b24 <vTaskIncrementTick+0x204>
   129b4:	e3e02000 	mvn	r2, #0
   129b8:	e5832000 	str	r2, [r3]
   129bc:	ea000008 	b	129e4 <vTaskIncrementTick+0xc4>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   129c0:	e59f3150 	ldr	r3, [pc, #336]	; 12b18 <vTaskIncrementTick+0x1f8>
   129c4:	e5933000 	ldr	r3, [r3]
   129c8:	e593300c 	ldr	r3, [r3, #12]
   129cc:	e593300c 	ldr	r3, [r3, #12]
   129d0:	e50b300c 	str	r3, [fp, #-12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   129d4:	e51b300c 	ldr	r3, [fp, #-12]
   129d8:	e5932004 	ldr	r2, [r3, #4]
   129dc:	e59f3140 	ldr	r3, [pc, #320]	; 12b24 <vTaskIncrementTick+0x204>
   129e0:	e5832000 	str	r2, [r3]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
   129e4:	e59f3128 	ldr	r3, [pc, #296]	; 12b14 <vTaskIncrementTick+0x1f4>
   129e8:	e5932000 	ldr	r2, [r3]
   129ec:	e59f3130 	ldr	r3, [pc, #304]	; 12b24 <vTaskIncrementTick+0x204>
   129f0:	e5933000 	ldr	r3, [r3]
   129f4:	e1520003 	cmp	r2, r3
   129f8:	3a000042 	bcc	12b08 <vTaskIncrementTick+0x1e8>
   129fc:	e59f3114 	ldr	r3, [pc, #276]	; 12b18 <vTaskIncrementTick+0x1f8>
   12a00:	e5933000 	ldr	r3, [r3]
   12a04:	e5933000 	ldr	r3, [r3]
   12a08:	e3530000 	cmp	r3, #0
   12a0c:	1a000003 	bne	12a20 <vTaskIncrementTick+0x100>
   12a10:	e59f310c 	ldr	r3, [pc, #268]	; 12b24 <vTaskIncrementTick+0x204>
   12a14:	e3e02000 	mvn	r2, #0
   12a18:	e5832000 	str	r2, [r3]
   12a1c:	ea000039 	b	12b08 <vTaskIncrementTick+0x1e8>
   12a20:	e59f30f0 	ldr	r3, [pc, #240]	; 12b18 <vTaskIncrementTick+0x1f8>
   12a24:	e5933000 	ldr	r3, [r3]
   12a28:	e593300c 	ldr	r3, [r3, #12]
   12a2c:	e593300c 	ldr	r3, [r3, #12]
   12a30:	e50b300c 	str	r3, [fp, #-12]
   12a34:	e51b300c 	ldr	r3, [fp, #-12]
   12a38:	e5933004 	ldr	r3, [r3, #4]
   12a3c:	e50b3010 	str	r3, [fp, #-16]
   12a40:	e59f30cc 	ldr	r3, [pc, #204]	; 12b14 <vTaskIncrementTick+0x1f4>
   12a44:	e5932000 	ldr	r2, [r3]
   12a48:	e51b3010 	ldr	r3, [fp, #-16]
   12a4c:	e1520003 	cmp	r2, r3
   12a50:	2a000003 	bcs	12a64 <vTaskIncrementTick+0x144>
   12a54:	e59f30c8 	ldr	r3, [pc, #200]	; 12b24 <vTaskIncrementTick+0x204>
   12a58:	e51b2010 	ldr	r2, [fp, #-16]
   12a5c:	e5832000 	str	r2, [r3]
   12a60:	ea000028 	b	12b08 <vTaskIncrementTick+0x1e8>
   12a64:	e51b300c 	ldr	r3, [fp, #-12]
   12a68:	e2833004 	add	r3, r3, #4
   12a6c:	e1a00003 	mov	r0, r3
   12a70:	ebfff935 	bl	10f4c <vListRemove>
   12a74:	e51b300c 	ldr	r3, [fp, #-12]
   12a78:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   12a7c:	e3530000 	cmp	r3, #0
   12a80:	0a000003 	beq	12a94 <vTaskIncrementTick+0x174>
   12a84:	e51b300c 	ldr	r3, [fp, #-12]
   12a88:	e2833018 	add	r3, r3, #24
   12a8c:	e1a00003 	mov	r0, r3
   12a90:	ebfff92d 	bl	10f4c <vListRemove>
   12a94:	e51b300c 	ldr	r3, [fp, #-12]
   12a98:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   12a9c:	e59f3084 	ldr	r3, [pc, #132]	; 12b28 <vTaskIncrementTick+0x208>
   12aa0:	e5933000 	ldr	r3, [r3]
   12aa4:	e1520003 	cmp	r2, r3
   12aa8:	9a000003 	bls	12abc <vTaskIncrementTick+0x19c>
   12aac:	e51b300c 	ldr	r3, [fp, #-12]
   12ab0:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   12ab4:	e59f306c 	ldr	r3, [pc, #108]	; 12b28 <vTaskIncrementTick+0x208>
   12ab8:	e5832000 	str	r2, [r3]
   12abc:	e51b300c 	ldr	r3, [fp, #-12]
   12ac0:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   12ac4:	e1a03002 	mov	r3, r2
   12ac8:	e1a03103 	lsl	r3, r3, #2
   12acc:	e0833002 	add	r3, r3, r2
   12ad0:	e1a03103 	lsl	r3, r3, #2
   12ad4:	e59f2050 	ldr	r2, [pc, #80]	; 12b2c <vTaskIncrementTick+0x20c>
   12ad8:	e0832002 	add	r2, r3, r2
   12adc:	e51b300c 	ldr	r3, [fp, #-12]
   12ae0:	e2833004 	add	r3, r3, #4
   12ae4:	e1a00002 	mov	r0, r2
   12ae8:	e1a01003 	mov	r1, r3
   12aec:	ebfff8bc 	bl	10de4 <vListInsertEnd>
   12af0:	eaffffc1 	b	129fc <vTaskIncrementTick+0xdc>
	}
	else
	{
		++uxMissedTicks;
   12af4:	e59f3034 	ldr	r3, [pc, #52]	; 12b30 <vTaskIncrementTick+0x210>
   12af8:	e5933000 	ldr	r3, [r3]
   12afc:	e2832001 	add	r2, r3, #1
   12b00:	e59f3028 	ldr	r3, [pc, #40]	; 12b30 <vTaskIncrementTick+0x210>
   12b04:	e5832000 	str	r2, [r3]
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
   12b08:	e24bd004 	sub	sp, fp, #4
   12b0c:	e8bd8800 	pop	{fp, pc}
   12b10:	00014650 	andeq	r4, r1, r0, asr r6
   12b14:	00014640 	andeq	r4, r1, r0, asr #12
   12b18:	000145f4 	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   12b1c:	000145f8 	strdeq	r4, [r1], -r8
   12b20:	0001465c 	andeq	r4, r1, ip, asr r6
   12b24:	000144d4 	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   12b28:	00014648 	andeq	r4, r1, r8, asr #12
   12b2c:	00014568 	andeq	r4, r1, r8, ror #10
   12b30:	00014654 	andeq	r4, r1, r4, asr r6

00012b34 <vTaskSetApplicationTaskTag>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	void vTaskSetApplicationTaskTag( xTaskHandle xTask, pdTASK_HOOK_CODE pxHookFunction )
	{
   12b34:	e92d4800 	push	{fp, lr}
   12b38:	e28db004 	add	fp, sp, #4
   12b3c:	e24dd010 	sub	sp, sp, #16
   12b40:	e50b0010 	str	r0, [fp, #-16]
   12b44:	e50b1014 	str	r1, [fp, #-20]
	tskTCB *xTCB;

		/* If xTask is NULL then we are setting our own task hook. */
		if( xTask == NULL )
   12b48:	e51b3010 	ldr	r3, [fp, #-16]
   12b4c:	e3530000 	cmp	r3, #0
   12b50:	1a000003 	bne	12b64 <vTaskSetApplicationTaskTag+0x30>
		{
			xTCB = ( tskTCB * ) pxCurrentTCB;
   12b54:	e59f302c 	ldr	r3, [pc, #44]	; 12b88 <vTaskSetApplicationTaskTag+0x54>
   12b58:	e5933000 	ldr	r3, [r3]
   12b5c:	e50b3008 	str	r3, [fp, #-8]
   12b60:	ea000001 	b	12b6c <vTaskSetApplicationTaskTag+0x38>
		}
		else
		{
			xTCB = ( tskTCB * ) xTask;
   12b64:	e51b3010 	ldr	r3, [fp, #-16]
   12b68:	e50b3008 	str	r3, [fp, #-8]
		}

		/* Save the hook function in the TCB.  A critical section is required as
		the value can be accessed from an interrupt. */
		taskENTER_CRITICAL();
   12b6c:	ebfff676 	bl	1054c <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
   12b70:	e51b3008 	ldr	r3, [fp, #-8]
   12b74:	e51b2014 	ldr	r2, [fp, #-20]
   12b78:	e5832044 	str	r2, [r3, #68]	; 0x44
		taskEXIT_CRITICAL();
   12b7c:	ebfff682 	bl	1058c <vPortExitCritical>
	}
   12b80:	e24bd004 	sub	sp, fp, #4
   12b84:	e8bd8800 	pop	{fp, pc}
   12b88:	00014564 	andeq	r4, r1, r4, ror #10

00012b8c <xTaskGetApplicationTaskTag>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	pdTASK_HOOK_CODE xTaskGetApplicationTaskTag( xTaskHandle xTask )
	{
   12b8c:	e92d4800 	push	{fp, lr}
   12b90:	e28db004 	add	fp, sp, #4
   12b94:	e24dd010 	sub	sp, sp, #16
   12b98:	e50b0010 	str	r0, [fp, #-16]
	tskTCB *xTCB;
	pdTASK_HOOK_CODE xReturn;

		/* If xTask is NULL then we are setting our own task hook. */
		if( xTask == NULL )
   12b9c:	e51b3010 	ldr	r3, [fp, #-16]
   12ba0:	e3530000 	cmp	r3, #0
   12ba4:	1a000003 	bne	12bb8 <xTaskGetApplicationTaskTag+0x2c>
		{
			xTCB = ( tskTCB * ) pxCurrentTCB;
   12ba8:	e59f3034 	ldr	r3, [pc, #52]	; 12be4 <xTaskGetApplicationTaskTag+0x58>
   12bac:	e5933000 	ldr	r3, [r3]
   12bb0:	e50b3008 	str	r3, [fp, #-8]
   12bb4:	ea000001 	b	12bc0 <xTaskGetApplicationTaskTag+0x34>
		}
		else
		{
			xTCB = ( tskTCB * ) xTask;
   12bb8:	e51b3010 	ldr	r3, [fp, #-16]
   12bbc:	e50b3008 	str	r3, [fp, #-8]
		}

		/* Save the hook function in the TCB.  A critical section is required as
		the value can be accessed from an interrupt. */
		taskENTER_CRITICAL();
   12bc0:	ebfff661 	bl	1054c <vPortEnterCritical>
			xReturn = xTCB->pxTaskTag;
   12bc4:	e51b3008 	ldr	r3, [fp, #-8]
   12bc8:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   12bcc:	e50b300c 	str	r3, [fp, #-12]
		taskEXIT_CRITICAL();
   12bd0:	ebfff66d 	bl	1058c <vPortExitCritical>

		return xReturn;
   12bd4:	e51b300c 	ldr	r3, [fp, #-12]
	}
   12bd8:	e1a00003 	mov	r0, r3
   12bdc:	e24bd004 	sub	sp, fp, #4
   12be0:	e8bd8800 	pop	{fp, pc}
   12be4:	00014564 	andeq	r4, r1, r4, ror #10

00012be8 <xTaskCallApplicationTaskHook>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	portBASE_TYPE xTaskCallApplicationTaskHook( xTaskHandle xTask, void *pvParameter )
	{
   12be8:	e92d4800 	push	{fp, lr}
   12bec:	e28db004 	add	fp, sp, #4
   12bf0:	e24dd010 	sub	sp, sp, #16
   12bf4:	e50b0010 	str	r0, [fp, #-16]
   12bf8:	e50b1014 	str	r1, [fp, #-20]
	tskTCB *xTCB;
	portBASE_TYPE xReturn;

		/* If xTask is NULL then we are calling our own task hook. */
		if( xTask == NULL )
   12bfc:	e51b3010 	ldr	r3, [fp, #-16]
   12c00:	e3530000 	cmp	r3, #0
   12c04:	1a000003 	bne	12c18 <xTaskCallApplicationTaskHook+0x30>
		{
			xTCB = ( tskTCB * ) pxCurrentTCB;
   12c08:	e59f3050 	ldr	r3, [pc, #80]	; 12c60 <xTaskCallApplicationTaskHook+0x78>
   12c0c:	e5933000 	ldr	r3, [r3]
   12c10:	e50b3008 	str	r3, [fp, #-8]
   12c14:	ea000001 	b	12c20 <xTaskCallApplicationTaskHook+0x38>
		}
		else
		{
			xTCB = ( tskTCB * ) xTask;
   12c18:	e51b3010 	ldr	r3, [fp, #-16]
   12c1c:	e50b3008 	str	r3, [fp, #-8]
		}

		if( xTCB->pxTaskTag != NULL )
   12c20:	e51b3008 	ldr	r3, [fp, #-8]
   12c24:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   12c28:	e3530000 	cmp	r3, #0
   12c2c:	0a000005 	beq	12c48 <xTaskCallApplicationTaskHook+0x60>
		{
			xReturn = xTCB->pxTaskTag( pvParameter );
   12c30:	e51b3008 	ldr	r3, [fp, #-8]
   12c34:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   12c38:	e51b0014 	ldr	r0, [fp, #-20]
   12c3c:	e12fff33 	blx	r3
   12c40:	e50b000c 	str	r0, [fp, #-12]
   12c44:	ea000001 	b	12c50 <xTaskCallApplicationTaskHook+0x68>
		}
		else
		{
			xReturn = pdFAIL;
   12c48:	e3a03000 	mov	r3, #0
   12c4c:	e50b300c 	str	r3, [fp, #-12]
		}

		return xReturn;
   12c50:	e51b300c 	ldr	r3, [fp, #-12]
	}
   12c54:	e1a00003 	mov	r0, r3
   12c58:	e24bd004 	sub	sp, fp, #4
   12c5c:	e8bd8800 	pop	{fp, pc}
   12c60:	00014564 	andeq	r4, r1, r4, ror #10

00012c64 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   12c64:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   12c68:	e28db000 	add	fp, sp, #0
   12c6c:	e24dd00c 	sub	sp, sp, #12
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   12c70:	e59f30e4 	ldr	r3, [pc, #228]	; 12d5c <vTaskSwitchContext+0xf8>
   12c74:	e5933000 	ldr	r3, [r3]
   12c78:	e3530000 	cmp	r3, #0
   12c7c:	0a000009 	beq	12ca8 <vTaskSwitchContext+0x44>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
   12c80:	e59f30d8 	ldr	r3, [pc, #216]	; 12d60 <vTaskSwitchContext+0xfc>
   12c84:	e3a02001 	mov	r2, #1
   12c88:	e5832000 	str	r2, [r3]
   12c8c:	ea00002f 	b	12d50 <vTaskSwitchContext+0xec>

		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
   12c90:	e59f30cc 	ldr	r3, [pc, #204]	; 12d64 <vTaskSwitchContext+0x100>
   12c94:	e5933000 	ldr	r3, [r3]
   12c98:	e2432001 	sub	r2, r3, #1
   12c9c:	e59f30c0 	ldr	r3, [pc, #192]	; 12d64 <vTaskSwitchContext+0x100>
   12ca0:	e5832000 	str	r2, [r3]
   12ca4:	ea000000 	b	12cac <vTaskSwitchContext+0x48>

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
   12ca8:	e1a00000 	nop			; (mov r0, r0)
   12cac:	e59f30b0 	ldr	r3, [pc, #176]	; 12d64 <vTaskSwitchContext+0x100>
   12cb0:	e5932000 	ldr	r2, [r3]
   12cb4:	e59f10ac 	ldr	r1, [pc, #172]	; 12d68 <vTaskSwitchContext+0x104>
   12cb8:	e1a03002 	mov	r3, r2
   12cbc:	e1a03103 	lsl	r3, r3, #2
   12cc0:	e0833002 	add	r3, r3, r2
   12cc4:	e1a03103 	lsl	r3, r3, #2
   12cc8:	e0813003 	add	r3, r1, r3
   12ccc:	e5933000 	ldr	r3, [r3]
   12cd0:	e3530000 	cmp	r3, #0
   12cd4:	0affffed 	beq	12c90 <vTaskSwitchContext+0x2c>

#if (configBLUETHUNDER == 1)
		pxCurrentTCB->pTraceEvent = pTraceEvent;	// Save Trace event pointer state to TCB.
#endif

		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
   12cd8:	e59f3084 	ldr	r3, [pc, #132]	; 12d64 <vTaskSwitchContext+0x100>
   12cdc:	e5932000 	ldr	r2, [r3]
   12ce0:	e1a03002 	mov	r3, r2
   12ce4:	e1a03103 	lsl	r3, r3, #2
   12ce8:	e0833002 	add	r3, r3, r2
   12cec:	e1a03103 	lsl	r3, r3, #2
   12cf0:	e59f2070 	ldr	r2, [pc, #112]	; 12d68 <vTaskSwitchContext+0x104>
   12cf4:	e0833002 	add	r3, r3, r2
   12cf8:	e50b3008 	str	r3, [fp, #-8]
   12cfc:	e51b3008 	ldr	r3, [fp, #-8]
   12d00:	e5933004 	ldr	r3, [r3, #4]
   12d04:	e5932004 	ldr	r2, [r3, #4]
   12d08:	e51b3008 	ldr	r3, [fp, #-8]
   12d0c:	e5832004 	str	r2, [r3, #4]
   12d10:	e51b3008 	ldr	r3, [fp, #-8]
   12d14:	e5932004 	ldr	r2, [r3, #4]
   12d18:	e51b3008 	ldr	r3, [fp, #-8]
   12d1c:	e2833008 	add	r3, r3, #8
   12d20:	e1520003 	cmp	r2, r3
   12d24:	1a000004 	bne	12d3c <vTaskSwitchContext+0xd8>
   12d28:	e51b3008 	ldr	r3, [fp, #-8]
   12d2c:	e5933004 	ldr	r3, [r3, #4]
   12d30:	e5932004 	ldr	r2, [r3, #4]
   12d34:	e51b3008 	ldr	r3, [fp, #-8]
   12d38:	e5832004 	str	r2, [r3, #4]
   12d3c:	e51b3008 	ldr	r3, [fp, #-8]
   12d40:	e5933004 	ldr	r3, [r3, #4]
   12d44:	e593200c 	ldr	r2, [r3, #12]
   12d48:	e59f301c 	ldr	r3, [pc, #28]	; 12d6c <vTaskSwitchContext+0x108>
   12d4c:	e5832000 	str	r2, [r3]
		pTraceEvent = pxCurrentTCB->pTraceEvent;	// Restore Trace event pointer state to TCB.
#endif

		traceTASK_SWITCHED_IN();
	}
}
   12d50:	e28bd000 	add	sp, fp, #0
   12d54:	e8bd0800 	pop	{fp}
   12d58:	e12fff1e 	bx	lr
   12d5c:	00014650 	andeq	r4, r1, r0, asr r6
   12d60:	00014658 	andeq	r4, r1, r8, asr r6
   12d64:	00014648 	andeq	r4, r1, r8, asr #12
   12d68:	00014568 	andeq	r4, r1, r8, ror #10
   12d6c:	00014564 	andeq	r4, r1, r4, ror #10

00012d70 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
   12d70:	e92d4800 	push	{fp, lr}
   12d74:	e28db004 	add	fp, sp, #4
   12d78:	e24dd010 	sub	sp, sp, #16
   12d7c:	e50b0010 	str	r0, [fp, #-16]
   12d80:	e50b1014 	str	r1, [fp, #-20]
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   12d84:	e59f3070 	ldr	r3, [pc, #112]	; 12dfc <vTaskPlaceOnEventList+0x8c>
   12d88:	e5933000 	ldr	r3, [r3]
   12d8c:	e2833018 	add	r3, r3, #24
   12d90:	e51b0010 	ldr	r0, [fp, #-16]
   12d94:	e1a01003 	mov	r1, r3
   12d98:	ebfff836 	bl	10e78 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   12d9c:	e59f3058 	ldr	r3, [pc, #88]	; 12dfc <vTaskPlaceOnEventList+0x8c>
   12da0:	e5933000 	ldr	r3, [r3]
   12da4:	e2833004 	add	r3, r3, #4
   12da8:	e1a00003 	mov	r0, r3
   12dac:	ebfff866 	bl	10f4c <vListRemove>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
   12db0:	e51b3014 	ldr	r3, [fp, #-20]
   12db4:	e3730001 	cmn	r3, #1
   12db8:	1a000006 	bne	12dd8 <vTaskPlaceOnEventList+0x68>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   12dbc:	e59f3038 	ldr	r3, [pc, #56]	; 12dfc <vTaskPlaceOnEventList+0x8c>
   12dc0:	e5933000 	ldr	r3, [r3]
   12dc4:	e2833004 	add	r3, r3, #4
   12dc8:	e59f0030 	ldr	r0, [pc, #48]	; 12e00 <vTaskPlaceOnEventList+0x90>
   12dcc:	e1a01003 	mov	r1, r3
   12dd0:	ebfff803 	bl	10de4 <vListInsertEnd>
   12dd4:	ea000006 	b	12df4 <vTaskPlaceOnEventList+0x84>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
   12dd8:	e59f3024 	ldr	r3, [pc, #36]	; 12e04 <vTaskPlaceOnEventList+0x94>
   12ddc:	e5932000 	ldr	r2, [r3]
   12de0:	e51b3014 	ldr	r3, [fp, #-20]
   12de4:	e0823003 	add	r3, r2, r3
   12de8:	e50b3008 	str	r3, [fp, #-8]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
   12dec:	e51b0008 	ldr	r0, [fp, #-8]
   12df0:	eb00013b 	bl	132e4 <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
   12df4:	e24bd004 	sub	sp, fp, #4
   12df8:	e8bd8800 	pop	{fp, pc}
   12dfc:	00014564 	andeq	r4, r1, r4, ror #10
   12e00:	00014628 	andeq	r4, r1, r8, lsr #12
   12e04:	00014640 	andeq	r4, r1, r0, asr #12

00012e08 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
   12e08:	e92d4800 	push	{fp, lr}
   12e0c:	e28db004 	add	fp, sp, #4
   12e10:	e24dd010 	sub	sp, sp, #16
   12e14:	e50b0010 	str	r0, [fp, #-16]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   12e18:	e51b3010 	ldr	r3, [fp, #-16]
   12e1c:	e593300c 	ldr	r3, [r3, #12]
   12e20:	e593300c 	ldr	r3, [r3, #12]
   12e24:	e50b300c 	str	r3, [fp, #-12]
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
   12e28:	e51b300c 	ldr	r3, [fp, #-12]
   12e2c:	e2833018 	add	r3, r3, #24
   12e30:	e1a00003 	mov	r0, r3
   12e34:	ebfff844 	bl	10f4c <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   12e38:	e59f30cc 	ldr	r3, [pc, #204]	; 12f0c <xTaskRemoveFromEventList+0x104>
   12e3c:	e5933000 	ldr	r3, [r3]
   12e40:	e3530000 	cmp	r3, #0
   12e44:	1a00001b 	bne	12eb8 <xTaskRemoveFromEventList+0xb0>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
   12e48:	e51b300c 	ldr	r3, [fp, #-12]
   12e4c:	e2833004 	add	r3, r3, #4
   12e50:	e1a00003 	mov	r0, r3
   12e54:	ebfff83c 	bl	10f4c <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
   12e58:	e51b300c 	ldr	r3, [fp, #-12]
   12e5c:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   12e60:	e59f30a8 	ldr	r3, [pc, #168]	; 12f10 <xTaskRemoveFromEventList+0x108>
   12e64:	e5933000 	ldr	r3, [r3]
   12e68:	e1520003 	cmp	r2, r3
   12e6c:	9a000003 	bls	12e80 <xTaskRemoveFromEventList+0x78>
   12e70:	e51b300c 	ldr	r3, [fp, #-12]
   12e74:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   12e78:	e59f3090 	ldr	r3, [pc, #144]	; 12f10 <xTaskRemoveFromEventList+0x108>
   12e7c:	e5832000 	str	r2, [r3]
   12e80:	e51b300c 	ldr	r3, [fp, #-12]
   12e84:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   12e88:	e1a03002 	mov	r3, r2
   12e8c:	e1a03103 	lsl	r3, r3, #2
   12e90:	e0833002 	add	r3, r3, r2
   12e94:	e1a03103 	lsl	r3, r3, #2
   12e98:	e59f2074 	ldr	r2, [pc, #116]	; 12f14 <xTaskRemoveFromEventList+0x10c>
   12e9c:	e0832002 	add	r2, r3, r2
   12ea0:	e51b300c 	ldr	r3, [fp, #-12]
   12ea4:	e2833004 	add	r3, r3, #4
   12ea8:	e1a00002 	mov	r0, r2
   12eac:	e1a01003 	mov	r1, r3
   12eb0:	ebfff7cb 	bl	10de4 <vListInsertEnd>
   12eb4:	ea000004 	b	12ecc <xTaskRemoveFromEventList+0xc4>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   12eb8:	e51b300c 	ldr	r3, [fp, #-12]
   12ebc:	e2833018 	add	r3, r3, #24
   12ec0:	e59f0050 	ldr	r0, [pc, #80]	; 12f18 <xTaskRemoveFromEventList+0x110>
   12ec4:	e1a01003 	mov	r1, r3
   12ec8:	ebfff7c5 	bl	10de4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
   12ecc:	e51b300c 	ldr	r3, [fp, #-12]
   12ed0:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   12ed4:	e59f3040 	ldr	r3, [pc, #64]	; 12f1c <xTaskRemoveFromEventList+0x114>
   12ed8:	e5933000 	ldr	r3, [r3]
   12edc:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   12ee0:	e1520003 	cmp	r2, r3
   12ee4:	3a000002 	bcc	12ef4 <xTaskRemoveFromEventList+0xec>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
   12ee8:	e3a03001 	mov	r3, #1
   12eec:	e50b3008 	str	r3, [fp, #-8]
   12ef0:	ea000001 	b	12efc <xTaskRemoveFromEventList+0xf4>
	}
	else
	{
		xReturn = pdFALSE;
   12ef4:	e3a03000 	mov	r3, #0
   12ef8:	e50b3008 	str	r3, [fp, #-8]
	}

	return xReturn;
   12efc:	e51b3008 	ldr	r3, [fp, #-8]
}
   12f00:	e1a00003 	mov	r0, r3
   12f04:	e24bd004 	sub	sp, fp, #4
   12f08:	e8bd8800 	pop	{fp, pc}
   12f0c:	00014650 	andeq	r4, r1, r0, asr r6
   12f10:	00014648 	andeq	r4, r1, r8, asr #12
   12f14:	00014568 	andeq	r4, r1, r8, ror #10
   12f18:	000145fc 	strdeq	r4, [r1], -ip
   12f1c:	00014564 	andeq	r4, r1, r4, ror #10

00012f20 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
   12f20:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   12f24:	e28db000 	add	fp, sp, #0
   12f28:	e24dd00c 	sub	sp, sp, #12
   12f2c:	e50b0008 	str	r0, [fp, #-8]
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   12f30:	e59f3024 	ldr	r3, [pc, #36]	; 12f5c <vTaskSetTimeOutState+0x3c>
   12f34:	e5932000 	ldr	r2, [r3]
   12f38:	e51b3008 	ldr	r3, [fp, #-8]
   12f3c:	e5832000 	str	r2, [r3]
	pxTimeOut->xTimeOnEntering = xTickCount;
   12f40:	e59f3018 	ldr	r3, [pc, #24]	; 12f60 <vTaskSetTimeOutState+0x40>
   12f44:	e5932000 	ldr	r2, [r3]
   12f48:	e51b3008 	ldr	r3, [fp, #-8]
   12f4c:	e5832004 	str	r2, [r3, #4]
}
   12f50:	e28bd000 	add	sp, fp, #0
   12f54:	e8bd0800 	pop	{fp}
   12f58:	e12fff1e 	bx	lr
   12f5c:	0001465c 	andeq	r4, r1, ip, asr r6
   12f60:	00014640 	andeq	r4, r1, r0, asr #12

00012f64 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
   12f64:	e92d4800 	push	{fp, lr}
   12f68:	e28db004 	add	fp, sp, #4
   12f6c:	e24dd010 	sub	sp, sp, #16
   12f70:	e50b0010 	str	r0, [fp, #-16]
   12f74:	e50b1014 	str	r1, [fp, #-20]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
   12f78:	ebfff573 	bl	1054c <vPortEnterCritical>
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
   12f7c:	e51b3014 	ldr	r3, [fp, #-20]
   12f80:	e5933000 	ldr	r3, [r3]
   12f84:	e3730001 	cmn	r3, #1
   12f88:	1a000002 	bne	12f98 <xTaskCheckForTimeOut+0x34>
			{
				xReturn = pdFALSE;
   12f8c:	e3a03000 	mov	r3, #0
   12f90:	e50b3008 	str	r3, [fp, #-8]
   12f94:	ea000028 	b	1303c <xTaskCheckForTimeOut+0xd8>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
   12f98:	e51b3010 	ldr	r3, [fp, #-16]
   12f9c:	e5932000 	ldr	r2, [r3]
   12fa0:	e59f30a8 	ldr	r3, [pc, #168]	; 13050 <xTaskCheckForTimeOut+0xec>
   12fa4:	e5933000 	ldr	r3, [r3]
   12fa8:	e1520003 	cmp	r2, r3
   12fac:	0a000008 	beq	12fd4 <xTaskCheckForTimeOut+0x70>
   12fb0:	e51b3010 	ldr	r3, [fp, #-16]
   12fb4:	e5932004 	ldr	r2, [r3, #4]
   12fb8:	e59f3094 	ldr	r3, [pc, #148]	; 13054 <xTaskCheckForTimeOut+0xf0>
   12fbc:	e5933000 	ldr	r3, [r3]
   12fc0:	e1520003 	cmp	r2, r3
   12fc4:	8a000002 	bhi	12fd4 <xTaskCheckForTimeOut+0x70>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
   12fc8:	e3a03001 	mov	r3, #1
   12fcc:	e50b3008 	str	r3, [fp, #-8]
   12fd0:	ea000019 	b	1303c <xTaskCheckForTimeOut+0xd8>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
   12fd4:	e59f3078 	ldr	r3, [pc, #120]	; 13054 <xTaskCheckForTimeOut+0xf0>
   12fd8:	e5932000 	ldr	r2, [r3]
   12fdc:	e51b3010 	ldr	r3, [fp, #-16]
   12fe0:	e5933004 	ldr	r3, [r3, #4]
   12fe4:	e0632002 	rsb	r2, r3, r2
   12fe8:	e51b3014 	ldr	r3, [fp, #-20]
   12fec:	e5933000 	ldr	r3, [r3]
   12ff0:	e1520003 	cmp	r2, r3
   12ff4:	2a00000e 	bcs	13034 <xTaskCheckForTimeOut+0xd0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
   12ff8:	e51b3014 	ldr	r3, [fp, #-20]
   12ffc:	e5932000 	ldr	r2, [r3]
   13000:	e51b3010 	ldr	r3, [fp, #-16]
   13004:	e5931004 	ldr	r1, [r3, #4]
   13008:	e59f3044 	ldr	r3, [pc, #68]	; 13054 <xTaskCheckForTimeOut+0xf0>
   1300c:	e5933000 	ldr	r3, [r3]
   13010:	e0633001 	rsb	r3, r3, r1
   13014:	e0822003 	add	r2, r2, r3
   13018:	e51b3014 	ldr	r3, [fp, #-20]
   1301c:	e5832000 	str	r2, [r3]
			vTaskSetTimeOutState( pxTimeOut );
   13020:	e51b0010 	ldr	r0, [fp, #-16]
   13024:	ebffffbd 	bl	12f20 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
   13028:	e3a03000 	mov	r3, #0
   1302c:	e50b3008 	str	r3, [fp, #-8]
   13030:	ea000001 	b	1303c <xTaskCheckForTimeOut+0xd8>
		}
		else
		{
			xReturn = pdTRUE;
   13034:	e3a03001 	mov	r3, #1
   13038:	e50b3008 	str	r3, [fp, #-8]
		}
	}
	taskEXIT_CRITICAL();
   1303c:	ebfff552 	bl	1058c <vPortExitCritical>

	return xReturn;
   13040:	e51b3008 	ldr	r3, [fp, #-8]
}
   13044:	e1a00003 	mov	r0, r3
   13048:	e24bd004 	sub	sp, fp, #4
   1304c:	e8bd8800 	pop	{fp, pc}
   13050:	0001465c 	andeq	r4, r1, ip, asr r6
   13054:	00014640 	andeq	r4, r1, r0, asr #12

00013058 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
   13058:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   1305c:	e28db000 	add	fp, sp, #0
	xMissedYield = pdTRUE;
   13060:	e59f3010 	ldr	r3, [pc, #16]	; 13078 <vTaskMissedYield+0x20>
   13064:	e3a02001 	mov	r2, #1
   13068:	e5832000 	str	r2, [r3]
}
   1306c:	e28bd000 	add	sp, fp, #0
   13070:	e8bd0800 	pop	{fp}
   13074:	e12fff1e 	bx	lr
   13078:	00014658 	andeq	r4, r1, r8, asr r6

0001307c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   1307c:	e92d4800 	push	{fp, lr}
   13080:	e28db004 	add	fp, sp, #4
   13084:	e24dd008 	sub	sp, sp, #8
   13088:	e50b0008 	str	r0, [fp, #-8]
   1308c:	ea000000 	b	13094 <prvIdleTask+0x18>
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
		}
		#endif
	}
   13090:	e1a00000 	nop			; (mov r0, r0)
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
   13094:	eb000064 	bl	1322c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
   13098:	e59f3010 	ldr	r3, [pc, #16]	; 130b0 <prvIdleTask+0x34>
   1309c:	e5933000 	ldr	r3, [r3]
   130a0:	e3530001 	cmp	r3, #1
   130a4:	9afffff9 	bls	13090 <prvIdleTask+0x14>
			{
				taskYIELD();
   130a8:	ef000000 	svc	0x00000000
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
		}
		#endif
	}
   130ac:	eafffff7 	b	13090 <prvIdleTask+0x14>
   130b0:	00014568 	andeq	r4, r1, r8, ror #10

000130b4 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
   130b4:	e92d4800 	push	{fp, lr}
   130b8:	e28db004 	add	fp, sp, #4
   130bc:	e24dd010 	sub	sp, sp, #16
   130c0:	e50b0008 	str	r0, [fp, #-8]
   130c4:	e50b100c 	str	r1, [fp, #-12]
   130c8:	e50b2010 	str	r2, [fp, #-16]
   130cc:	e50b3014 	str	r3, [fp, #-20]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
   130d0:	e51b3008 	ldr	r3, [fp, #-8]
   130d4:	e2833034 	add	r3, r3, #52	; 0x34
   130d8:	e1a00003 	mov	r0, r3
   130dc:	e51b100c 	ldr	r1, [fp, #-12]
   130e0:	e3a02010 	mov	r2, #16
   130e4:	eb0004c7 	bl	14408 <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
   130e8:	e51b3008 	ldr	r3, [fp, #-8]
   130ec:	e3a02000 	mov	r2, #0
   130f0:	e5c32043 	strb	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
   130f4:	e51b3010 	ldr	r3, [fp, #-16]
   130f8:	e3530004 	cmp	r3, #4
   130fc:	9a000001 	bls	13108 <prvInitialiseTCBVariables+0x54>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
   13100:	e3a03004 	mov	r3, #4
   13104:	e50b3010 	str	r3, [fp, #-16]
	}

	pxTCB->uxPriority = uxPriority;
   13108:	e51b3008 	ldr	r3, [fp, #-8]
   1310c:	e51b2010 	ldr	r2, [fp, #-16]
   13110:	e583202c 	str	r2, [r3, #44]	; 0x2c
	{
		pxTCB->uxBasePriority = uxPriority;
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
   13114:	e51b3008 	ldr	r3, [fp, #-8]
   13118:	e2833004 	add	r3, r3, #4
   1311c:	e1a00003 	mov	r0, r3
   13120:	ebfff725 	bl	10dbc <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
   13124:	e51b3008 	ldr	r3, [fp, #-8]
   13128:	e2833018 	add	r3, r3, #24
   1312c:	e1a00003 	mov	r0, r3
   13130:	ebfff721 	bl	10dbc <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
   13134:	e51b3008 	ldr	r3, [fp, #-8]
   13138:	e51b2008 	ldr	r2, [fp, #-8]
   1313c:	e5832010 	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
   13140:	e51b3010 	ldr	r3, [fp, #-16]
   13144:	e2632005 	rsb	r2, r3, #5
   13148:	e51b3008 	ldr	r3, [fp, #-8]
   1314c:	e5832018 	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
   13150:	e51b3008 	ldr	r3, [fp, #-8]
   13154:	e51b2008 	ldr	r2, [fp, #-8]
   13158:	e5832024 	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxTCB->pxTaskTag = NULL;
   1315c:	e51b3008 	ldr	r3, [fp, #-8]
   13160:	e3a02000 	mov	r2, #0
   13164:	e5832044 	str	r2, [r3, #68]	; 0x44
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
   13168:	e24bd004 	sub	sp, fp, #4
   1316c:	e8bd8800 	pop	{fp, pc}

00013170 <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
   13170:	e92d4800 	push	{fp, lr}
   13174:	e28db004 	add	fp, sp, #4
   13178:	e24dd008 	sub	sp, sp, #8
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
   1317c:	e3a03000 	mov	r3, #0
   13180:	e50b3008 	str	r3, [fp, #-8]
   13184:	ea00000b 	b	131b8 <prvInitialiseTaskLists+0x48>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
   13188:	e51b2008 	ldr	r2, [fp, #-8]
   1318c:	e1a03002 	mov	r3, r2
   13190:	e1a03103 	lsl	r3, r3, #2
   13194:	e0833002 	add	r3, r3, r2
   13198:	e1a03103 	lsl	r3, r3, #2
   1319c:	e59f2068 	ldr	r2, [pc, #104]	; 1320c <prvInitialiseTaskLists+0x9c>
   131a0:	e0833002 	add	r3, r3, r2
   131a4:	e1a00003 	mov	r0, r3
   131a8:	ebfff6ea 	bl	10d58 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
   131ac:	e51b3008 	ldr	r3, [fp, #-8]
   131b0:	e2833001 	add	r3, r3, #1
   131b4:	e50b3008 	str	r3, [fp, #-8]
   131b8:	e51b3008 	ldr	r3, [fp, #-8]
   131bc:	e3530004 	cmp	r3, #4
   131c0:	9afffff0 	bls	13188 <prvInitialiseTaskLists+0x18>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
   131c4:	e59f0044 	ldr	r0, [pc, #68]	; 13210 <prvInitialiseTaskLists+0xa0>
   131c8:	ebfff6e2 	bl	10d58 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
   131cc:	e59f0040 	ldr	r0, [pc, #64]	; 13214 <prvInitialiseTaskLists+0xa4>
   131d0:	ebfff6e0 	bl	10d58 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
   131d4:	e59f003c 	ldr	r0, [pc, #60]	; 13218 <prvInitialiseTaskLists+0xa8>
   131d8:	ebfff6de 	bl	10d58 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
   131dc:	e59f0038 	ldr	r0, [pc, #56]	; 1321c <prvInitialiseTaskLists+0xac>
   131e0:	ebfff6dc 	bl	10d58 <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
   131e4:	e59f0034 	ldr	r0, [pc, #52]	; 13220 <prvInitialiseTaskLists+0xb0>
   131e8:	ebfff6da 	bl	10d58 <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   131ec:	e59f3030 	ldr	r3, [pc, #48]	; 13224 <prvInitialiseTaskLists+0xb4>
   131f0:	e59f2018 	ldr	r2, [pc, #24]	; 13210 <prvInitialiseTaskLists+0xa0>
   131f4:	e5832000 	str	r2, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   131f8:	e59f3028 	ldr	r3, [pc, #40]	; 13228 <prvInitialiseTaskLists+0xb8>
   131fc:	e59f2010 	ldr	r2, [pc, #16]	; 13214 <prvInitialiseTaskLists+0xa4>
   13200:	e5832000 	str	r2, [r3]
}
   13204:	e24bd004 	sub	sp, fp, #4
   13208:	e8bd8800 	pop	{fp, pc}
   1320c:	00014568 	andeq	r4, r1, r8, ror #10
   13210:	000145cc 	andeq	r4, r1, ip, asr #11
   13214:	000145e0 	andeq	r4, r1, r0, ror #11
   13218:	000145fc 	strdeq	r4, [r1], -ip
   1321c:	00014610 	andeq	r4, r1, r0, lsl r6
   13220:	00014628 	andeq	r4, r1, r8, lsr #12
   13224:	000145f4 	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13228:	000145f8 	strdeq	r4, [r1], -r8

0001322c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
   1322c:	e92d4800 	push	{fp, lr}
   13230:	e28db004 	add	fp, sp, #4
   13234:	e24dd008 	sub	sp, sp, #8
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   13238:	e59f3098 	ldr	r3, [pc, #152]	; 132d8 <prvCheckTasksWaitingTermination+0xac>
   1323c:	e5933000 	ldr	r3, [r3]
   13240:	e3530000 	cmp	r3, #0
   13244:	0a000021 	beq	132d0 <prvCheckTasksWaitingTermination+0xa4>
		{
			vTaskSuspendAll();
   13248:	ebfffd1c 	bl	126c0 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   1324c:	e59f3088 	ldr	r3, [pc, #136]	; 132dc <prvCheckTasksWaitingTermination+0xb0>
   13250:	e5933000 	ldr	r3, [r3]
   13254:	e3530000 	cmp	r3, #0
   13258:	13a03000 	movne	r3, #0
   1325c:	03a03001 	moveq	r3, #1
   13260:	e6ef3073 	uxtb	r3, r3
   13264:	e50b3008 	str	r3, [fp, #-8]
			xTaskResumeAll();
   13268:	ebfffd1f 	bl	126ec <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
   1326c:	e51b3008 	ldr	r3, [fp, #-8]
   13270:	e3530000 	cmp	r3, #0
   13274:	1a000015 	bne	132d0 <prvCheckTasksWaitingTermination+0xa4>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
   13278:	ebfff4b3 	bl	1054c <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
   1327c:	e59f3058 	ldr	r3, [pc, #88]	; 132dc <prvCheckTasksWaitingTermination+0xb0>
   13280:	e593300c 	ldr	r3, [r3, #12]
   13284:	e593300c 	ldr	r3, [r3, #12]
   13288:	e50b300c 	str	r3, [fp, #-12]
					vListRemove( &( pxTCB->xGenericListItem ) );
   1328c:	e51b300c 	ldr	r3, [fp, #-12]
   13290:	e2833004 	add	r3, r3, #4
   13294:	e1a00003 	mov	r0, r3
   13298:	ebfff72b 	bl	10f4c <vListRemove>
					--uxCurrentNumberOfTasks;
   1329c:	e59f303c 	ldr	r3, [pc, #60]	; 132e0 <prvCheckTasksWaitingTermination+0xb4>
   132a0:	e5933000 	ldr	r3, [r3]
   132a4:	e2432001 	sub	r2, r3, #1
   132a8:	e59f3030 	ldr	r3, [pc, #48]	; 132e0 <prvCheckTasksWaitingTermination+0xb4>
   132ac:	e5832000 	str	r2, [r3]
					--uxTasksDeleted;
   132b0:	e59f3020 	ldr	r3, [pc, #32]	; 132d8 <prvCheckTasksWaitingTermination+0xac>
   132b4:	e5933000 	ldr	r3, [r3]
   132b8:	e2432001 	sub	r2, r3, #1
   132bc:	e59f3014 	ldr	r3, [pc, #20]	; 132d8 <prvCheckTasksWaitingTermination+0xac>
   132c0:	e5832000 	str	r2, [r3]
				}
				taskEXIT_CRITICAL();
   132c4:	ebfff4b0 	bl	1058c <vPortExitCritical>

				prvDeleteTCB( pxTCB );
   132c8:	e51b000c 	ldr	r0, [fp, #-12]
   132cc:	eb00005e 	bl	1344c <prvDeleteTCB>
			}
		}
	}
	#endif
}
   132d0:	e24bd004 	sub	sp, fp, #4
   132d4:	e8bd8800 	pop	{fp, pc}
   132d8:	00014624 	andeq	r4, r1, r4, lsr #12
   132dc:	00014610 	andeq	r4, r1, r0, lsl r6
   132e0:	0001463c 	andeq	r4, r1, ip, lsr r6

000132e4 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
   132e4:	e92d4800 	push	{fp, lr}
   132e8:	e28db004 	add	fp, sp, #4
   132ec:	e24dd008 	sub	sp, sp, #8
   132f0:	e50b0008 	str	r0, [fp, #-8]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
   132f4:	e59f3088 	ldr	r3, [pc, #136]	; 13384 <prvAddCurrentTaskToDelayedList+0xa0>
   132f8:	e5933000 	ldr	r3, [r3]
   132fc:	e51b2008 	ldr	r2, [fp, #-8]
   13300:	e5832004 	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
   13304:	e59f307c 	ldr	r3, [pc, #124]	; 13388 <prvAddCurrentTaskToDelayedList+0xa4>
   13308:	e5933000 	ldr	r3, [r3]
   1330c:	e51b2008 	ldr	r2, [fp, #-8]
   13310:	e1520003 	cmp	r2, r3
   13314:	2a000008 	bcs	1333c <prvAddCurrentTaskToDelayedList+0x58>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   13318:	e59f306c 	ldr	r3, [pc, #108]	; 1338c <prvAddCurrentTaskToDelayedList+0xa8>
   1331c:	e5932000 	ldr	r2, [r3]
   13320:	e59f305c 	ldr	r3, [pc, #92]	; 13384 <prvAddCurrentTaskToDelayedList+0xa0>
   13324:	e5933000 	ldr	r3, [r3]
   13328:	e2833004 	add	r3, r3, #4
   1332c:	e1a00002 	mov	r0, r2
   13330:	e1a01003 	mov	r1, r3
   13334:	ebfff6cf 	bl	10e78 <vListInsert>
   13338:	ea00000f 	b	1337c <prvAddCurrentTaskToDelayedList+0x98>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   1333c:	e59f304c 	ldr	r3, [pc, #76]	; 13390 <prvAddCurrentTaskToDelayedList+0xac>
   13340:	e5932000 	ldr	r2, [r3]
   13344:	e59f3038 	ldr	r3, [pc, #56]	; 13384 <prvAddCurrentTaskToDelayedList+0xa0>
   13348:	e5933000 	ldr	r3, [r3]
   1334c:	e2833004 	add	r3, r3, #4
   13350:	e1a00002 	mov	r0, r2
   13354:	e1a01003 	mov	r1, r3
   13358:	ebfff6c6 	bl	10e78 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
   1335c:	e59f3030 	ldr	r3, [pc, #48]	; 13394 <prvAddCurrentTaskToDelayedList+0xb0>
   13360:	e5933000 	ldr	r3, [r3]
   13364:	e51b2008 	ldr	r2, [fp, #-8]
   13368:	e1520003 	cmp	r2, r3
   1336c:	2a000002 	bcs	1337c <prvAddCurrentTaskToDelayedList+0x98>
		{
			xNextTaskUnblockTime = xTimeToWake;
   13370:	e59f301c 	ldr	r3, [pc, #28]	; 13394 <prvAddCurrentTaskToDelayedList+0xb0>
   13374:	e51b2008 	ldr	r2, [fp, #-8]
   13378:	e5832000 	str	r2, [r3]
		}
	}
}
   1337c:	e24bd004 	sub	sp, fp, #4
   13380:	e8bd8800 	pop	{fp, pc}
   13384:	00014564 	andeq	r4, r1, r4, ror #10
   13388:	00014640 	andeq	r4, r1, r0, asr #12
   1338c:	000145f8 	strdeq	r4, [r1], -r8
   13390:	000145f4 	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13394:	000144d4 	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>

00013398 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
   13398:	e92d4800 	push	{fp, lr}
   1339c:	e28db004 	add	fp, sp, #4
   133a0:	e24dd010 	sub	sp, sp, #16
   133a4:	e1a03000 	mov	r3, r0
   133a8:	e50b1014 	str	r1, [fp, #-20]
   133ac:	e14b30be 	strh	r3, [fp, #-14]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
   133b0:	e3a00048 	mov	r0, #72	; 0x48
   133b4:	eb000030 	bl	1347c <pvPortMalloc>
   133b8:	e50b0008 	str	r0, [fp, #-8]

	if( pxNewTCB != NULL )
   133bc:	e51b3008 	ldr	r3, [fp, #-8]
   133c0:	e3530000 	cmp	r3, #0
   133c4:	0a00001c 	beq	1343c <prvAllocateTCBAndStack+0xa4>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   133c8:	e51b3014 	ldr	r3, [fp, #-20]
   133cc:	e3530000 	cmp	r3, #0
   133d0:	1a000005 	bne	133ec <prvAllocateTCBAndStack+0x54>
   133d4:	e15b30be 	ldrh	r3, [fp, #-14]
   133d8:	e1a03103 	lsl	r3, r3, #2
   133dc:	e1a00003 	mov	r0, r3
   133e0:	eb000025 	bl	1347c <pvPortMalloc>
   133e4:	e1a03000 	mov	r3, r0
   133e8:	ea000000 	b	133f0 <prvAllocateTCBAndStack+0x58>
   133ec:	e51b3014 	ldr	r3, [fp, #-20]
   133f0:	e51b2008 	ldr	r2, [fp, #-8]
   133f4:	e5823030 	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
   133f8:	e51b3008 	ldr	r3, [fp, #-8]
   133fc:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   13400:	e3530000 	cmp	r3, #0
   13404:	1a000004 	bne	1341c <prvAllocateTCBAndStack+0x84>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
   13408:	e51b0008 	ldr	r0, [fp, #-8]
   1340c:	eb000091 	bl	13658 <vPortFree>
			pxNewTCB = NULL;
   13410:	e3a03000 	mov	r3, #0
   13414:	e50b3008 	str	r3, [fp, #-8]
   13418:	ea000007 	b	1343c <prvAllocateTCBAndStack+0xa4>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
   1341c:	e51b3008 	ldr	r3, [fp, #-8]
   13420:	e5932030 	ldr	r2, [r3, #48]	; 0x30
   13424:	e15b30be 	ldrh	r3, [fp, #-14]
   13428:	e1a03103 	lsl	r3, r3, #2
   1342c:	e1a00002 	mov	r0, r2
   13430:	e3a010a5 	mov	r1, #165	; 0xa5
   13434:	e1a02003 	mov	r2, r3
   13438:	eb0003b4 	bl	14310 <memset>
	pxNewTCB->pTraceEvent 		= NULL;
	pxNewTCB->pTraceEventMin 	= NULL;
	pxNewTCB->pTraceEventMax 	= NULL;
#endif

	return pxNewTCB;
   1343c:	e51b3008 	ldr	r3, [fp, #-8]
}
   13440:	e1a00003 	mov	r0, r3
   13444:	e24bd004 	sub	sp, fp, #4
   13448:	e8bd8800 	pop	{fp, pc}

0001344c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
   1344c:	e92d4800 	push	{fp, lr}
   13450:	e28db004 	add	fp, sp, #4
   13454:	e24dd008 	sub	sp, sp, #8
   13458:	e50b0008 	str	r0, [fp, #-8]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
   1345c:	e51b3008 	ldr	r3, [fp, #-8]
   13460:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   13464:	e1a00003 	mov	r0, r3
   13468:	eb00007a 	bl	13658 <vPortFree>
		vPortFree( pxTCB );
   1346c:	e51b0008 	ldr	r0, [fp, #-8]
   13470:	eb000078 	bl	13658 <vPortFree>
	}
   13474:	e24bd004 	sub	sp, fp, #4
   13478:	e8bd8800 	pop	{fp, pc}

0001347c <pvPortMalloc>:
/* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */

/*-----------------------------------------------------------*/
size_t allocated = 0;
void *pvPortMalloc( size_t xWantedSize )
{
   1347c:	e92d4800 	push	{fp, lr}
   13480:	e28db004 	add	fp, sp, #4
   13484:	e24dd018 	sub	sp, sp, #24
   13488:	e50b0018 	str	r0, [fp, #-24]
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
   1348c:	e3a03000 	mov	r3, #0
   13490:	e50b3010 	str	r3, [fp, #-16]

	vTaskSuspendAll();
   13494:	ebfffc89 	bl	126c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
   13498:	e59f31a0 	ldr	r3, [pc, #416]	; 13640 <pvPortMalloc+0x1c4>
   1349c:	e5933000 	ldr	r3, [r3]
   134a0:	e3530000 	cmp	r3, #0
   134a4:	1a000000 	bne	134ac <pvPortMalloc+0x30>
		{
			prvHeapInit();
   134a8:	eb000098 	bl	13710 <prvHeapInit>
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
   134ac:	e51b3018 	ldr	r3, [fp, #-24]
   134b0:	e3530000 	cmp	r3, #0
   134b4:	0a00000c 	beq	134ec <pvPortMalloc+0x70>
		{
			xWantedSize += heapSTRUCT_SIZE;
   134b8:	e59f3184 	ldr	r3, [pc, #388]	; 13644 <pvPortMalloc+0x1c8>
   134bc:	e1d330b0 	ldrh	r3, [r3]
   134c0:	e51b2018 	ldr	r2, [fp, #-24]
   134c4:	e0823003 	add	r3, r2, r3
   134c8:	e50b3018 	str	r3, [fp, #-24]

			/* Ensure that blocks are always aligned to the required number of 
			bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   134cc:	e51b3018 	ldr	r3, [fp, #-24]
   134d0:	e2033007 	and	r3, r3, #7
   134d4:	e3530000 	cmp	r3, #0
   134d8:	0a000003 	beq	134ec <pvPortMalloc+0x70>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   134dc:	e51b3018 	ldr	r3, [fp, #-24]
   134e0:	e3c33007 	bic	r3, r3, #7
   134e4:	e2833008 	add	r3, r3, #8
   134e8:	e50b3018 	str	r3, [fp, #-24]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
   134ec:	e51b3018 	ldr	r3, [fp, #-24]
   134f0:	e3530000 	cmp	r3, #0
   134f4:	0a000046 	beq	13614 <pvPortMalloc+0x198>
   134f8:	e59f3148 	ldr	r3, [pc, #328]	; 13648 <pvPortMalloc+0x1cc>
   134fc:	e5933000 	ldr	r3, [r3]
   13500:	e51b2018 	ldr	r2, [fp, #-24]
   13504:	e1520003 	cmp	r2, r3
   13508:	2a000041 	bcs	13614 <pvPortMalloc+0x198>
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
   1350c:	e59f3138 	ldr	r3, [pc, #312]	; 1364c <pvPortMalloc+0x1d0>
   13510:	e50b300c 	str	r3, [fp, #-12]
			pxBlock = xStart.pxNextFreeBlock;
   13514:	e59f3130 	ldr	r3, [pc, #304]	; 1364c <pvPortMalloc+0x1d0>
   13518:	e5933000 	ldr	r3, [r3]
   1351c:	e50b3008 	str	r3, [fp, #-8]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   13520:	ea000004 	b	13538 <pvPortMalloc+0xbc>
			{
				pxPreviousBlock = pxBlock;
   13524:	e51b3008 	ldr	r3, [fp, #-8]
   13528:	e50b300c 	str	r3, [fp, #-12]
				pxBlock = pxBlock->pxNextFreeBlock;
   1352c:	e51b3008 	ldr	r3, [fp, #-8]
   13530:	e5933000 	ldr	r3, [r3]
   13534:	e50b3008 	str	r3, [fp, #-8]
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   13538:	e51b3008 	ldr	r3, [fp, #-8]
   1353c:	e5932004 	ldr	r2, [r3, #4]
   13540:	e51b3018 	ldr	r3, [fp, #-24]
   13544:	e1520003 	cmp	r2, r3
   13548:	2a000003 	bcs	1355c <pvPortMalloc+0xe0>
   1354c:	e51b3008 	ldr	r3, [fp, #-8]
   13550:	e5933000 	ldr	r3, [r3]
   13554:	e3530000 	cmp	r3, #0
   13558:	1afffff1 	bne	13524 <pvPortMalloc+0xa8>
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If the end marker was reached then a block of adequate size was
			not found. */
			if( pxBlock != pxEnd )
   1355c:	e59f30dc 	ldr	r3, [pc, #220]	; 13640 <pvPortMalloc+0x1c4>
   13560:	e5933000 	ldr	r3, [r3]
   13564:	e51b2008 	ldr	r2, [fp, #-8]
   13568:	e1520003 	cmp	r2, r3
   1356c:	0a000028 	beq	13614 <pvPortMalloc+0x198>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
   13570:	e51b300c 	ldr	r3, [fp, #-12]
   13574:	e5932000 	ldr	r2, [r3]
   13578:	e59f30c4 	ldr	r3, [pc, #196]	; 13644 <pvPortMalloc+0x1c8>
   1357c:	e1d330b0 	ldrh	r3, [r3]
   13580:	e0823003 	add	r3, r2, r3
   13584:	e50b3010 	str	r3, [fp, #-16]

				/* This block is being returned for use so must be taken out of
				the	list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   13588:	e51b3008 	ldr	r3, [fp, #-8]
   1358c:	e5932000 	ldr	r2, [r3]
   13590:	e51b300c 	ldr	r3, [fp, #-12]
   13594:	e5832000 	str	r2, [r3]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   13598:	e51b3008 	ldr	r3, [fp, #-8]
   1359c:	e5932004 	ldr	r2, [r3, #4]
   135a0:	e51b3018 	ldr	r3, [fp, #-24]
   135a4:	e0632002 	rsb	r2, r3, r2
   135a8:	e59f3094 	ldr	r3, [pc, #148]	; 13644 <pvPortMalloc+0x1c8>
   135ac:	e1d330b0 	ldrh	r3, [r3]
   135b0:	e1a03083 	lsl	r3, r3, #1
   135b4:	e1520003 	cmp	r2, r3
   135b8:	9a00000e 	bls	135f8 <pvPortMalloc+0x17c>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
   135bc:	e51b2008 	ldr	r2, [fp, #-8]
   135c0:	e51b3018 	ldr	r3, [fp, #-24]
   135c4:	e0823003 	add	r3, r2, r3
   135c8:	e50b3014 	str	r3, [fp, #-20]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   135cc:	e51b3008 	ldr	r3, [fp, #-8]
   135d0:	e5932004 	ldr	r2, [r3, #4]
   135d4:	e51b3018 	ldr	r3, [fp, #-24]
   135d8:	e0632002 	rsb	r2, r3, r2
   135dc:	e51b3014 	ldr	r3, [fp, #-20]
   135e0:	e5832004 	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
   135e4:	e51b3008 	ldr	r3, [fp, #-8]
   135e8:	e51b2018 	ldr	r2, [fp, #-24]
   135ec:	e5832004 	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
   135f0:	e51b0014 	ldr	r0, [fp, #-20]
   135f4:	eb000081 	bl	13800 <prvInsertBlockIntoFreeList>
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
   135f8:	e59f3050 	ldr	r3, [pc, #80]	; 13650 <pvPortMalloc+0x1d4>
   135fc:	e5932000 	ldr	r2, [r3]
   13600:	e51b3008 	ldr	r3, [fp, #-8]
   13604:	e5933004 	ldr	r3, [r3, #4]
   13608:	e0632002 	rsb	r2, r3, r2
   1360c:	e59f303c 	ldr	r3, [pc, #60]	; 13650 <pvPortMalloc+0x1d4>
   13610:	e5832000 	str	r2, [r3]
			}
		}
	}
	xTaskResumeAll();
   13614:	ebfffc34 	bl	126ec <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif
	
	allocated += xWantedSize;
   13618:	e59f3034 	ldr	r3, [pc, #52]	; 13654 <pvPortMalloc+0x1d8>
   1361c:	e5932000 	ldr	r2, [r3]
   13620:	e51b3018 	ldr	r3, [fp, #-24]
   13624:	e0822003 	add	r2, r2, r3
   13628:	e59f3024 	ldr	r3, [pc, #36]	; 13654 <pvPortMalloc+0x1d8>
   1362c:	e5832000 	str	r2, [r3]

	return pvReturn;
   13630:	e51b3010 	ldr	r3, [fp, #-16]
}
   13634:	e1a00003 	mov	r0, r3
   13638:	e24bd004 	sub	sp, fp, #4
   1363c:	e8bd8800 	pop	{fp, pc}
   13640:	00015670 	andeq	r5, r1, r0, ror r6
   13644:	000141cc 	andeq	r4, r1, ip, asr #3
   13648:	000141d0 	ldrdeq	r4, [r1], -r0
   1364c:	00015668 	andeq	r5, r1, r8, ror #12
   13650:	000144d8 	ldrdeq	r4, [r1], -r8
   13654:	00015674 	andeq	r5, r1, r4, ror r6

00013658 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   13658:	e92d4800 	push	{fp, lr}
   1365c:	e28db004 	add	fp, sp, #4
   13660:	e24dd010 	sub	sp, sp, #16
   13664:	e50b0010 	str	r0, [fp, #-16]
unsigned char *puc = ( unsigned char * ) pv;
   13668:	e51b3010 	ldr	r3, [fp, #-16]
   1366c:	e50b3008 	str	r3, [fp, #-8]
xBlockLink *pxLink;

	if( pv != NULL )
   13670:	e51b3010 	ldr	r3, [fp, #-16]
   13674:	e3530000 	cmp	r3, #0
   13678:	0a000012 	beq	136c8 <vPortFree+0x70>
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
   1367c:	e59f304c 	ldr	r3, [pc, #76]	; 136d0 <vPortFree+0x78>
   13680:	e1d330b0 	ldrh	r3, [r3]
   13684:	e2633000 	rsb	r3, r3, #0
   13688:	e51b2008 	ldr	r2, [fp, #-8]
   1368c:	e0823003 	add	r3, r2, r3
   13690:	e50b3008 	str	r3, [fp, #-8]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
   13694:	e51b3008 	ldr	r3, [fp, #-8]
   13698:	e50b300c 	str	r3, [fp, #-12]

		vTaskSuspendAll();
   1369c:	ebfffc07 	bl	126c0 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			xFreeBytesRemaining += pxLink->xBlockSize;
   136a0:	e51b300c 	ldr	r3, [fp, #-12]
   136a4:	e5932004 	ldr	r2, [r3, #4]
   136a8:	e59f3024 	ldr	r3, [pc, #36]	; 136d4 <vPortFree+0x7c>
   136ac:	e5933000 	ldr	r3, [r3]
   136b0:	e0822003 	add	r2, r2, r3
   136b4:	e59f3018 	ldr	r3, [pc, #24]	; 136d4 <vPortFree+0x7c>
   136b8:	e5832000 	str	r2, [r3]
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );			
   136bc:	e51b000c 	ldr	r0, [fp, #-12]
   136c0:	eb00004e 	bl	13800 <prvInsertBlockIntoFreeList>
		}
		xTaskResumeAll();
   136c4:	ebfffc08 	bl	126ec <xTaskResumeAll>
	}
}
   136c8:	e24bd004 	sub	sp, fp, #4
   136cc:	e8bd8800 	pop	{fp, pc}
   136d0:	000141cc 	andeq	r4, r1, ip, asr #3
   136d4:	000144d8 	ldrdeq	r4, [r1], -r8

000136d8 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
   136d8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   136dc:	e28db000 	add	fp, sp, #0
	return xFreeBytesRemaining;
   136e0:	e59f3010 	ldr	r3, [pc, #16]	; 136f8 <xPortGetFreeHeapSize+0x20>
   136e4:	e5933000 	ldr	r3, [r3]
}
   136e8:	e1a00003 	mov	r0, r3
   136ec:	e28bd000 	add	sp, fp, #0
   136f0:	e8bd0800 	pop	{fp}
   136f4:	e12fff1e 	bx	lr
   136f8:	000144d8 	ldrdeq	r4, [r1], -r8

000136fc <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
   136fc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   13700:	e28db000 	add	fp, sp, #0
	/* This just exists to keep the linker quiet. */
}
   13704:	e28bd000 	add	sp, fp, #0
   13708:	e8bd0800 	pop	{fp}
   1370c:	e12fff1e 	bx	lr

00013710 <prvHeapInit>:
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
   13710:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   13714:	e28db000 	add	fp, sp, #0
   13718:	e24dd00c 	sub	sp, sp, #12
	/* Ensure the start of the heap is aligned. */
	configASSERT( ( ( ( unsigned long ) xHeap.ucHeap ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
   1371c:	e59f30c4 	ldr	r3, [pc, #196]	; 137e8 <prvHeapInit+0xd8>
   13720:	e59f20c4 	ldr	r2, [pc, #196]	; 137ec <prvHeapInit+0xdc>
   13724:	e5832000 	str	r2, [r3]
	xStart.xBlockSize = ( size_t ) 0;
   13728:	e59f30b8 	ldr	r3, [pc, #184]	; 137e8 <prvHeapInit+0xd8>
   1372c:	e3a02000 	mov	r2, #0
   13730:	e5832004 	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	pucHeapEnd = xHeap.ucHeap + xTotalHeapSize;
   13734:	e59f30b4 	ldr	r3, [pc, #180]	; 137f0 <prvHeapInit+0xe0>
   13738:	e5932000 	ldr	r2, [r3]
   1373c:	e59f30a8 	ldr	r3, [pc, #168]	; 137ec <prvHeapInit+0xdc>
   13740:	e0823003 	add	r3, r2, r3
   13744:	e50b3008 	str	r3, [fp, #-8]
	pucHeapEnd -= heapSTRUCT_SIZE;
   13748:	e59f30a4 	ldr	r3, [pc, #164]	; 137f4 <prvHeapInit+0xe4>
   1374c:	e1d330b0 	ldrh	r3, [r3]
   13750:	e2633000 	rsb	r3, r3, #0
   13754:	e51b2008 	ldr	r2, [fp, #-8]
   13758:	e0823003 	add	r3, r2, r3
   1375c:	e50b3008 	str	r3, [fp, #-8]
	pxEnd = ( void * ) pucHeapEnd;
   13760:	e59f3090 	ldr	r3, [pc, #144]	; 137f8 <prvHeapInit+0xe8>
   13764:	e51b2008 	ldr	r2, [fp, #-8]
   13768:	e5832000 	str	r2, [r3]
	configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
	pxEnd->xBlockSize = 0;
   1376c:	e59f3084 	ldr	r3, [pc, #132]	; 137f8 <prvHeapInit+0xe8>
   13770:	e5933000 	ldr	r3, [r3]
   13774:	e3a02000 	mov	r2, #0
   13778:	e5832004 	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
   1377c:	e59f3074 	ldr	r3, [pc, #116]	; 137f8 <prvHeapInit+0xe8>
   13780:	e5933000 	ldr	r3, [r3]
   13784:	e3a02000 	mov	r2, #0
   13788:	e5832000 	str	r2, [r3]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) xHeap.ucHeap;
   1378c:	e59f3058 	ldr	r3, [pc, #88]	; 137ec <prvHeapInit+0xdc>
   13790:	e50b300c 	str	r3, [fp, #-12]
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
   13794:	e59f3054 	ldr	r3, [pc, #84]	; 137f0 <prvHeapInit+0xe0>
   13798:	e5932000 	ldr	r2, [r3]
   1379c:	e59f3050 	ldr	r3, [pc, #80]	; 137f4 <prvHeapInit+0xe4>
   137a0:	e1d330b0 	ldrh	r3, [r3]
   137a4:	e0632002 	rsb	r2, r3, r2
   137a8:	e51b300c 	ldr	r3, [fp, #-12]
   137ac:	e5832004 	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
   137b0:	e59f3040 	ldr	r3, [pc, #64]	; 137f8 <prvHeapInit+0xe8>
   137b4:	e5932000 	ldr	r2, [r3]
   137b8:	e51b300c 	ldr	r3, [fp, #-12]
   137bc:	e5832000 	str	r2, [r3]

	/* The heap now contains pxEnd. */
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
   137c0:	e59f3034 	ldr	r3, [pc, #52]	; 137fc <prvHeapInit+0xec>
   137c4:	e5932000 	ldr	r2, [r3]
   137c8:	e59f3024 	ldr	r3, [pc, #36]	; 137f4 <prvHeapInit+0xe4>
   137cc:	e1d330b0 	ldrh	r3, [r3]
   137d0:	e0632002 	rsb	r2, r3, r2
   137d4:	e59f3020 	ldr	r3, [pc, #32]	; 137fc <prvHeapInit+0xec>
   137d8:	e5832000 	str	r2, [r3]
}
   137dc:	e28bd000 	add	sp, fp, #0
   137e0:	e8bd0800 	pop	{fp}
   137e4:	e12fff1e 	bx	lr
   137e8:	00015668 	andeq	r5, r1, r8, ror #12
   137ec:	00014668 	andeq	r4, r1, r8, ror #12
   137f0:	000141d0 	ldrdeq	r4, [r1], -r0
   137f4:	000141cc 	andeq	r4, r1, ip, asr #3
   137f8:	00015670 	andeq	r5, r1, r0, ror r6
   137fc:	000144d8 	ldrdeq	r4, [r1], -r8

00013800 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
   13800:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   13804:	e28db000 	add	fp, sp, #0
   13808:	e24dd014 	sub	sp, sp, #20
   1380c:	e50b0010 	str	r0, [fp, #-16]
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
   13810:	e59f3130 	ldr	r3, [pc, #304]	; 13948 <prvInsertBlockIntoFreeList+0x148>
   13814:	e50b3008 	str	r3, [fp, #-8]
   13818:	ea000002 	b	13828 <prvInsertBlockIntoFreeList+0x28>
   1381c:	e51b3008 	ldr	r3, [fp, #-8]
   13820:	e5933000 	ldr	r3, [r3]
   13824:	e50b3008 	str	r3, [fp, #-8]
   13828:	e51b3008 	ldr	r3, [fp, #-8]
   1382c:	e5932000 	ldr	r2, [r3]
   13830:	e51b3010 	ldr	r3, [fp, #-16]
   13834:	e1520003 	cmp	r2, r3
   13838:	3afffff7 	bcc	1381c <prvInsertBlockIntoFreeList+0x1c>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
   1383c:	e51b3008 	ldr	r3, [fp, #-8]
   13840:	e50b300c 	str	r3, [fp, #-12]
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
   13844:	e51b3008 	ldr	r3, [fp, #-8]
   13848:	e5933004 	ldr	r3, [r3, #4]
   1384c:	e51b200c 	ldr	r2, [fp, #-12]
   13850:	e0822003 	add	r2, r2, r3
   13854:	e51b3010 	ldr	r3, [fp, #-16]
   13858:	e1520003 	cmp	r2, r3
   1385c:	1a000008 	bne	13884 <prvInsertBlockIntoFreeList+0x84>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
   13860:	e51b3008 	ldr	r3, [fp, #-8]
   13864:	e5932004 	ldr	r2, [r3, #4]
   13868:	e51b3010 	ldr	r3, [fp, #-16]
   1386c:	e5933004 	ldr	r3, [r3, #4]
   13870:	e0822003 	add	r2, r2, r3
   13874:	e51b3008 	ldr	r3, [fp, #-8]
   13878:	e5832004 	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
   1387c:	e51b3008 	ldr	r3, [fp, #-8]
   13880:	e50b3010 	str	r3, [fp, #-16]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
   13884:	e51b3010 	ldr	r3, [fp, #-16]
   13888:	e50b300c 	str	r3, [fp, #-12]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
   1388c:	e51b3010 	ldr	r3, [fp, #-16]
   13890:	e5933004 	ldr	r3, [r3, #4]
   13894:	e51b200c 	ldr	r2, [fp, #-12]
   13898:	e0822003 	add	r2, r2, r3
   1389c:	e51b3008 	ldr	r3, [fp, #-8]
   138a0:	e5933000 	ldr	r3, [r3]
   138a4:	e1520003 	cmp	r2, r3
   138a8:	1a000018 	bne	13910 <prvInsertBlockIntoFreeList+0x110>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
   138ac:	e51b3008 	ldr	r3, [fp, #-8]
   138b0:	e5932000 	ldr	r2, [r3]
   138b4:	e59f3090 	ldr	r3, [pc, #144]	; 1394c <prvInsertBlockIntoFreeList+0x14c>
   138b8:	e5933000 	ldr	r3, [r3]
   138bc:	e1520003 	cmp	r2, r3
   138c0:	0a00000d 	beq	138fc <prvInsertBlockIntoFreeList+0xfc>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
   138c4:	e51b3010 	ldr	r3, [fp, #-16]
   138c8:	e5932004 	ldr	r2, [r3, #4]
   138cc:	e51b3008 	ldr	r3, [fp, #-8]
   138d0:	e5933000 	ldr	r3, [r3]
   138d4:	e5933004 	ldr	r3, [r3, #4]
   138d8:	e0822003 	add	r2, r2, r3
   138dc:	e51b3010 	ldr	r3, [fp, #-16]
   138e0:	e5832004 	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
   138e4:	e51b3008 	ldr	r3, [fp, #-8]
   138e8:	e5933000 	ldr	r3, [r3]
   138ec:	e5932000 	ldr	r2, [r3]
   138f0:	e51b3010 	ldr	r3, [fp, #-16]
   138f4:	e5832000 	str	r2, [r3]
   138f8:	ea000008 	b	13920 <prvInsertBlockIntoFreeList+0x120>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
   138fc:	e59f3048 	ldr	r3, [pc, #72]	; 1394c <prvInsertBlockIntoFreeList+0x14c>
   13900:	e5932000 	ldr	r2, [r3]
   13904:	e51b3010 	ldr	r3, [fp, #-16]
   13908:	e5832000 	str	r2, [r3]
   1390c:	ea000003 	b	13920 <prvInsertBlockIntoFreeList+0x120>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
   13910:	e51b3008 	ldr	r3, [fp, #-8]
   13914:	e5932000 	ldr	r2, [r3]
   13918:	e51b3010 	ldr	r3, [fp, #-16]
   1391c:	e5832000 	str	r2, [r3]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
   13920:	e51b2008 	ldr	r2, [fp, #-8]
   13924:	e51b3010 	ldr	r3, [fp, #-16]
   13928:	e1520003 	cmp	r2, r3
   1392c:	0a000002 	beq	1393c <prvInsertBlockIntoFreeList+0x13c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
   13930:	e51b3008 	ldr	r3, [fp, #-8]
   13934:	e51b2010 	ldr	r2, [fp, #-16]
   13938:	e5832000 	str	r2, [r3]
	}
}
   1393c:	e28bd000 	add	sp, fp, #0
   13940:	e8bd0800 	pop	{fp}
   13944:	e12fff1e 	bx	lr
   13948:	00015668 	andeq	r5, r1, r8, ror #12
   1394c:	00015670 	andeq	r5, r1, r0, ror r6

00013950 <undefined_instruction>:
   13950:	eafffffe 	b	13950 <undefined_instruction>

00013954 <prefetch_abort>:
   13954:	eafffffe 	b	13954 <prefetch_abort>

00013958 <data_abort>:
   13958:	eafffffe 	b	13958 <data_abort>

0001395c <unused>:
   1395c:	eafffffe 	b	1395c <unused>

00013960 <fiq>:
   13960:	eafffffe 	b	13960 <fiq>

00013964 <hang>:
   13964:	eafffffe 	b	13964 <hang>

00013968 <irqEnable>:
static volatile BCM2835_INTC_REGS * const pRegs = (BCM2835_INTC_REGS *) (BCM2835_BASE_INTC);

/**
 *	Enables all IRQ's in the CPU's CPSR register.
 **/
static void irqEnable() {
   13968:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   1396c:	e28db000 	add	fp, sp, #0
	__asm volatile("mrs 	r0,cpsr");		// Read in the cpsr register.
   13970:	e10f0000 	mrs	r0, CPSR
	__asm volatile("bic		r0,r0,#0x80");	// Clear bit 8, (0x80) -- Causes IRQs to be enabled.
   13974:	e3c00080 	bic	r0, r0, #128	; 0x80
	__asm volatile("msr		cpsr_c, r0");	// Write it back to the CPSR register
   13978:	e121f000 	msr	CPSR_c, r0
}
   1397c:	e28bd000 	add	sp, fp, #0
   13980:	e8bd0800 	pop	{fp}
   13984:	e12fff1e 	bx	lr

00013988 <irqDisable>:

static void irqDisable() {
   13988:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   1398c:	e28db000 	add	fp, sp, #0
	__asm volatile("mrs		r0,cpsr");		// Read in the cpsr register.
   13990:	e10f0000 	mrs	r0, CPSR
	__asm volatile("orr		r0,r0,#0x80");	// Set bit 8, (0x80) -- Causes IRQs to be disabled.
   13994:	e3800080 	orr	r0, r0, #128	; 0x80
	__asm volatile("msr		cpsr_c, r0");	// Write it back to the CPSR register.
   13998:	e121f000 	msr	CPSR_c, r0

}
   1399c:	e28bd000 	add	sp, fp, #0
   139a0:	e8bd0800 	pop	{fp}
   139a4:	e12fff1e 	bx	lr

000139a8 <irqHandler>:
/**
 *	This is the global IRQ handler  on this platform!
 *	It is based on the assembler code found in the Broadcom datasheet.
 *
 **/
void irqHandler() {	
   139a8:	e92d4870 	push	{r4, r5, r6, fp, lr}
   139ac:	e28db010 	add	fp, sp, #16
   139b0:	e24dd014 	sub	sp, sp, #20

	register unsigned long ulMaskedStatus;
	register unsigned long irqNumber;
	register unsigned long tmp;

	ulMaskedStatus = pRegs->IRQBasic;
   139b4:	e59f30f0 	ldr	r3, [pc, #240]	; 13aac <irqHandler+0x104>
   139b8:	e5933000 	ldr	r3, [r3]
   139bc:	e5934000 	ldr	r4, [r3]
	tmp = ulMaskedStatus & 0x00000300;			// Check if anything pending in pr1/pr2.   
   139c0:	e2046c03 	and	r6, r4, #768	; 0x300

	if(ulMaskedStatus & ~0xFFFFF300) {			// Note how we mask out the GPU interrupt Aliases.
   139c4:	e59f30e4 	ldr	r3, [pc, #228]	; 13ab0 <irqHandler+0x108>
   139c8:	e0043003 	and	r3, r4, r3
   139cc:	e3530000 	cmp	r3, #0
   139d0:	0a000001 	beq	139dc <irqHandler+0x34>
		irqNumber = 64 + 31;						// Shifting the basic ARM IRQs to be IRQ# 64 +
   139d4:	e3a0505f 	mov	r5, #95	; 0x5f
		goto emit_interrupt;
   139d8:	ea000013 	b	13a2c <irqHandler+0x84>
	}

	if(tmp & 0x100) {
   139dc:	e2063c01 	and	r3, r6, #256	; 0x100
   139e0:	e3530000 	cmp	r3, #0
   139e4:	0a000005 	beq	13a00 <irqHandler+0x58>
		ulMaskedStatus = pRegs->Pending1;
   139e8:	e59f30bc 	ldr	r3, [pc, #188]	; 13aac <irqHandler+0x104>
   139ec:	e5933000 	ldr	r3, [r3]
   139f0:	e5934004 	ldr	r4, [r3, #4]
		irqNumber = 0 + 31;
   139f4:	e3a0501f 	mov	r5, #31
		// Clear the interrupts also available in basic IRQ pending reg.
		//ulMaskedStatus &= ~((1 << 7) | (1 << 9) | (1 << 10) | (1 << 18) | (1 << 19));
		if(ulMaskedStatus) {
   139f8:	e3540000 	cmp	r4, #0
   139fc:	1a000009 	bne	13a28 <irqHandler+0x80>
			goto emit_interrupt;
		}
	}

	if(tmp & 0x200) {
   13a00:	e2063c02 	and	r3, r6, #512	; 0x200
   13a04:	e3530000 	cmp	r3, #0
   13a08:	0a000024 	beq	13aa0 <irqHandler+0xf8>
		ulMaskedStatus + pRegs->Pending2;		
   13a0c:	e59f3098 	ldr	r3, [pc, #152]	; 13aac <irqHandler+0x104>
   13a10:	e5933000 	ldr	r3, [r3]
   13a14:	e5933008 	ldr	r3, [r3, #8]
		irqNumber = 32 + 31;
   13a18:	e3a0503f 	mov	r5, #63	; 0x3f
		// Don't clear the interrupts in the basic pending, simply allow them to processed here!
		if(ulMaskedStatus) {
   13a1c:	e3540000 	cmp	r4, #0
   13a20:	0a00001e 	beq	13aa0 <irqHandler+0xf8>
			goto emit_interrupt;
   13a24:	ea000000 	b	13a2c <irqHandler+0x84>
		ulMaskedStatus = pRegs->Pending1;
		irqNumber = 0 + 31;
		// Clear the interrupts also available in basic IRQ pending reg.
		//ulMaskedStatus &= ~((1 << 7) | (1 << 9) | (1 << 10) | (1 << 18) | (1 << 19));
		if(ulMaskedStatus) {
			goto emit_interrupt;
   13a28:	e1a00000 	nop			; (mov r0, r0)

	return;

emit_interrupt:

	tmp = ulMaskedStatus - 1;
   13a2c:	e2446001 	sub	r6, r4, #1
	ulMaskedStatus = ulMaskedStatus ^ tmp;
   13a30:	e0244006 	eor	r4, r4, r6

	unsigned long lz = clz(ulMaskedStatus);
   13a34:	e50b4018 	str	r4, [fp, #-24]
   13a38:	e51b3018 	ldr	r3, [fp, #-24]
   13a3c:	e16f4f13 	clz	r4, r3
   13a40:	e50b401c 	str	r4, [fp, #-28]
   13a44:	e51b301c 	ldr	r3, [fp, #-28]
   13a48:	e50b3020 	str	r3, [fp, #-32]
	//irqNumber = irqNumber - 

	//__asm volatile("clz	r7,r5");				// r5 is the ulMaskedStatus register. Leaving result in r6!
	//__asm volatile("sub r6,r7");

	if(g_VectorTable[irqNumber-lz].pfnHandler) {
   13a4c:	e51b3020 	ldr	r3, [fp, #-32]
   13a50:	e0632005 	rsb	r2, r3, r5
   13a54:	e59f3058 	ldr	r3, [pc, #88]	; 13ab4 <irqHandler+0x10c>
   13a58:	e7933182 	ldr	r3, [r3, r2, lsl #3]
   13a5c:	e3530000 	cmp	r3, #0
   13a60:	0a00000f 	beq	13aa4 <irqHandler+0xfc>
		g_VectorTable[irqNumber-lz].pfnHandler(irqNumber, g_VectorTable[irqNumber].pParam);
   13a64:	e51b3020 	ldr	r3, [fp, #-32]
   13a68:	e0632005 	rsb	r2, r3, r5
   13a6c:	e59f3040 	ldr	r3, [pc, #64]	; 13ab4 <irqHandler+0x10c>
   13a70:	e7933182 	ldr	r3, [r3, r2, lsl #3]
   13a74:	e1a01005 	mov	r1, r5
   13a78:	e59fc034 	ldr	ip, [pc, #52]	; 13ab4 <irqHandler+0x10c>
   13a7c:	e3a02004 	mov	r2, #4
   13a80:	e1a00185 	lsl	r0, r5, #3
   13a84:	e08c0000 	add	r0, ip, r0
   13a88:	e0802002 	add	r2, r0, r2
   13a8c:	e5922000 	ldr	r2, [r2]
   13a90:	e1a00001 	mov	r0, r1
   13a94:	e1a01002 	mov	r1, r2
   13a98:	e12fff33 	blx	r3
   13a9c:	ea000000 	b	13aa4 <irqHandler+0xfc>
		if(ulMaskedStatus) {
			goto emit_interrupt;
		}				
	}

	return;
   13aa0:	e1a00000 	nop			; (mov r0, r0)
	//__asm volatile("sub r6,r7");

	if(g_VectorTable[irqNumber-lz].pfnHandler) {
		g_VectorTable[irqNumber-lz].pfnHandler(irqNumber, g_VectorTable[irqNumber].pParam);
	}
}
   13aa4:	e24bd010 	sub	sp, fp, #16
   13aa8:	e8bd8870 	pop	{r4, r5, r6, fp, pc}
   13aac:	000141d4 	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13ab0:	00000cff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   13ab4:	00015678 	andeq	r5, r1, r8, ror r6

00013ab8 <stubHandler>:


static void stubHandler(int nIRQ, void *pParam) {
   13ab8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   13abc:	e28db000 	add	fp, sp, #0
   13ac0:	e24dd00c 	sub	sp, sp, #12
   13ac4:	e50b0008 	str	r0, [fp, #-8]
   13ac8:	e50b100c 	str	r1, [fp, #-12]
	/**
	 *	Actually if we get here, we should probably disable the IRQ,
	 *	otherwise we could lock up this system, as there is nothing to 
	 *	ackknowledge the interrupt.
	 **/   
}
   13acc:	e28bd000 	add	sp, fp, #0
   13ad0:	e8bd0800 	pop	{fp}
   13ad4:	e12fff1e 	bx	lr

00013ad8 <InitInterruptController>:

int InitInterruptController() {
   13ad8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   13adc:	e28db000 	add	fp, sp, #0
   13ae0:	e24dd00c 	sub	sp, sp, #12
	int i;
	for(i = 0; i < BCM2835_INTC_TOTAL_IRQ; i++) {
   13ae4:	e3a03000 	mov	r3, #0
   13ae8:	e50b3008 	str	r3, [fp, #-8]
   13aec:	ea00000e 	b	13b2c <InitInterruptController+0x54>
		g_VectorTable[i].pfnHandler 	= stubHandler;
   13af0:	e59f3054 	ldr	r3, [pc, #84]	; 13b4c <InitInterruptController+0x74>
   13af4:	e51b2008 	ldr	r2, [fp, #-8]
   13af8:	e59f1050 	ldr	r1, [pc, #80]	; 13b50 <InitInterruptController+0x78>
   13afc:	e7831182 	str	r1, [r3, r2, lsl #3]
		g_VectorTable[i].pParam			= (void *) 0;
   13b00:	e59f1044 	ldr	r1, [pc, #68]	; 13b4c <InitInterruptController+0x74>
   13b04:	e51b2008 	ldr	r2, [fp, #-8]
   13b08:	e3a03004 	mov	r3, #4
   13b0c:	e1a02182 	lsl	r2, r2, #3
   13b10:	e0812002 	add	r2, r1, r2
   13b14:	e0823003 	add	r3, r2, r3
   13b18:	e3a02000 	mov	r2, #0
   13b1c:	e5832000 	str	r2, [r3]
	 **/   
}

int InitInterruptController() {
	int i;
	for(i = 0; i < BCM2835_INTC_TOTAL_IRQ; i++) {
   13b20:	e51b3008 	ldr	r3, [fp, #-8]
   13b24:	e2833001 	add	r3, r3, #1
   13b28:	e50b3008 	str	r3, [fp, #-8]
   13b2c:	e51b3008 	ldr	r3, [fp, #-8]
   13b30:	e3530047 	cmp	r3, #71	; 0x47
   13b34:	daffffed 	ble	13af0 <InitInterruptController+0x18>
		g_VectorTable[i].pfnHandler 	= stubHandler;
		g_VectorTable[i].pParam			= (void *) 0;
	}
	return 0;
   13b38:	e3a03000 	mov	r3, #0
}
   13b3c:	e1a00003 	mov	r0, r3
   13b40:	e28bd000 	add	sp, fp, #0
   13b44:	e8bd0800 	pop	{fp}
   13b48:	e12fff1e 	bx	lr
   13b4c:	00015678 	andeq	r5, r1, r8, ror r6
   13b50:	00013ab8 			; <UNDEFINED> instruction: 0x00013ab8

00013b54 <RegisterInterrupt>:



int RegisterInterrupt(int nIRQ, FN_INTERRUPT_HANDLER pfnHandler, void *pParam) {
   13b54:	e92d4800 	push	{fp, lr}
   13b58:	e28db004 	add	fp, sp, #4
   13b5c:	e24dd010 	sub	sp, sp, #16
   13b60:	e50b0008 	str	r0, [fp, #-8]
   13b64:	e50b100c 	str	r1, [fp, #-12]
   13b68:	e50b2010 	str	r2, [fp, #-16]

	irqDisable();
   13b6c:	ebffff85 	bl	13988 <irqDisable>
	{
		g_VectorTable[nIRQ].pfnHandler = pfnHandler;
   13b70:	e59f303c 	ldr	r3, [pc, #60]	; 13bb4 <RegisterInterrupt+0x60>
   13b74:	e51b2008 	ldr	r2, [fp, #-8]
   13b78:	e51b100c 	ldr	r1, [fp, #-12]
   13b7c:	e7831182 	str	r1, [r3, r2, lsl #3]
		g_VectorTable[nIRQ].pParam		= pParam;
   13b80:	e59f102c 	ldr	r1, [pc, #44]	; 13bb4 <RegisterInterrupt+0x60>
   13b84:	e51b2008 	ldr	r2, [fp, #-8]
   13b88:	e3a03004 	mov	r3, #4
   13b8c:	e1a02182 	lsl	r2, r2, #3
   13b90:	e0812002 	add	r2, r1, r2
   13b94:	e0823003 	add	r3, r2, r3
   13b98:	e51b2010 	ldr	r2, [fp, #-16]
   13b9c:	e5832000 	str	r2, [r3]
	}
	irqEnable();
   13ba0:	ebffff70 	bl	13968 <irqEnable>
	return 0;
   13ba4:	e3a03000 	mov	r3, #0
}
   13ba8:	e1a00003 	mov	r0, r3
   13bac:	e24bd004 	sub	sp, fp, #4
   13bb0:	e8bd8800 	pop	{fp, pc}
   13bb4:	00015678 	andeq	r5, r1, r8, ror r6

00013bb8 <EnableInterrupt>:

int EnableInterrupt(int nIRQ) {
   13bb8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   13bbc:	e28db000 	add	fp, sp, #0
   13bc0:	e24dd014 	sub	sp, sp, #20
   13bc4:	e50b0010 	str	r0, [fp, #-16]

	unsigned long	ulTMP;

	ulTMP = pRegs->EnableBasic;
   13bc8:	e59f3060 	ldr	r3, [pc, #96]	; 13c30 <EnableInterrupt+0x78>
   13bcc:	e5933000 	ldr	r3, [r3]
   13bd0:	e5933018 	ldr	r3, [r3, #24]
   13bd4:	e50b3008 	str	r3, [fp, #-8]

	if(nIRQ >= 64 && nIRQ <= 72) {	// Basic IRQ enables
   13bd8:	e51b3010 	ldr	r3, [fp, #-16]
   13bdc:	e353003f 	cmp	r3, #63	; 0x3f
   13be0:	da000009 	ble	13c0c <EnableInterrupt+0x54>
   13be4:	e51b3010 	ldr	r3, [fp, #-16]
   13be8:	e3530048 	cmp	r3, #72	; 0x48
   13bec:	ca000006 	bgt	13c0c <EnableInterrupt+0x54>
		pRegs->EnableBasic = 1 << (nIRQ - 64);
   13bf0:	e59f3038 	ldr	r3, [pc, #56]	; 13c30 <EnableInterrupt+0x78>
   13bf4:	e5933000 	ldr	r3, [r3]
   13bf8:	e51b2010 	ldr	r2, [fp, #-16]
   13bfc:	e2422040 	sub	r2, r2, #64	; 0x40
   13c00:	e3a01001 	mov	r1, #1
   13c04:	e1a02211 	lsl	r2, r1, r2
   13c08:	e5832018 	str	r2, [r3, #24]
	}

	ulTMP = pRegs->EnableBasic;
   13c0c:	e59f301c 	ldr	r3, [pc, #28]	; 13c30 <EnableInterrupt+0x78>
   13c10:	e5933000 	ldr	r3, [r3]
   13c14:	e5933018 	ldr	r3, [r3, #24]
   13c18:	e50b3008 	str	r3, [fp, #-8]

	// Otherwise its a GPU interrupt, and we're not supporting those...yet!

	return 0;
   13c1c:	e3a03000 	mov	r3, #0
}
   13c20:	e1a00003 	mov	r0, r3
   13c24:	e28bd000 	add	sp, fp, #0
   13c28:	e8bd0800 	pop	{fp}
   13c2c:	e12fff1e 	bx	lr
   13c30:	000141d4 	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>

00013c34 <DisableInterrupt>:

int DisableInterrupt(int nIRQ) {
   13c34:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   13c38:	e28db000 	add	fp, sp, #0
   13c3c:	e24dd00c 	sub	sp, sp, #12
   13c40:	e50b0008 	str	r0, [fp, #-8]
	if(nIRQ >= 64 && nIRQ <= 72) {
   13c44:	e51b3008 	ldr	r3, [fp, #-8]
   13c48:	e353003f 	cmp	r3, #63	; 0x3f
   13c4c:	da000009 	ble	13c78 <DisableInterrupt+0x44>
   13c50:	e51b3008 	ldr	r3, [fp, #-8]
   13c54:	e3530048 	cmp	r3, #72	; 0x48
   13c58:	ca000006 	bgt	13c78 <DisableInterrupt+0x44>
		pRegs->DisableBasic = 1 << (nIRQ - 64);
   13c5c:	e59f3028 	ldr	r3, [pc, #40]	; 13c8c <DisableInterrupt+0x58>
   13c60:	e5933000 	ldr	r3, [r3]
   13c64:	e51b2008 	ldr	r2, [fp, #-8]
   13c68:	e2422040 	sub	r2, r2, #64	; 0x40
   13c6c:	e3a01001 	mov	r1, #1
   13c70:	e1a02211 	lsl	r2, r1, r2
   13c74:	e5832024 	str	r2, [r3, #36]	; 0x24
	}

	// I'm currently only supporting the basic IRQs.

	return 0;
   13c78:	e3a03000 	mov	r3, #0
}
   13c7c:	e1a00003 	mov	r0, r3
   13c80:	e28bd000 	add	sp, fp, #0
   13c84:	e8bd0800 	pop	{fp}
   13c88:	e12fff1e 	bx	lr
   13c8c:	000141d4 	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>

00013c90 <EnableInterrupts>:

int EnableInterrupts() {
   13c90:	e92d4800 	push	{fp, lr}
   13c94:	e28db004 	add	fp, sp, #4
	irqEnable();
   13c98:	ebffff32 	bl	13968 <irqEnable>
	return 0;
   13c9c:	e3a03000 	mov	r3, #0
}
   13ca0:	e1a00003 	mov	r0, r3
   13ca4:	e8bd8800 	pop	{fp, pc}

00013ca8 <DisableInterrupts>:

int DisableInterrupts() {
   13ca8:	e92d4800 	push	{fp, lr}
   13cac:	e28db004 	add	fp, sp, #4
	irqDisable();
   13cb0:	ebffff34 	bl	13988 <irqDisable>
	return 0;
   13cb4:	e3a03000 	mov	r3, #0
}
   13cb8:	e1a00003 	mov	r0, r3
   13cbc:	e8bd8800 	pop	{fp, pc}

00013cc0 <SetGpioFunction>:
} BCM2835_GPIO_REGS;

volatile BCM2835_GPIO_REGS * const pRegs = (BCM2835_GPIO_REGS *) (0x20200000);


void SetGpioFunction(unsigned int pinNum, unsigned int funcNum) {
   13cc0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   13cc4:	e28db000 	add	fp, sp, #0
   13cc8:	e24dd01c 	sub	sp, sp, #28
   13ccc:	e50b0018 	str	r0, [fp, #-24]
   13cd0:	e50b101c 	str	r1, [fp, #-28]

	int offset = pinNum / 10;
   13cd4:	e51b2018 	ldr	r2, [fp, #-24]
   13cd8:	e59f30b4 	ldr	r3, [pc, #180]	; 13d94 <SetGpioFunction+0xd4>
   13cdc:	e0831293 	umull	r1, r3, r3, r2
   13ce0:	e1a031a3 	lsr	r3, r3, #3
   13ce4:	e50b3008 	str	r3, [fp, #-8]

	unsigned long val = pRegs->GPFSEL[offset];	// Read in the original register value.
   13ce8:	e59f30a8 	ldr	r3, [pc, #168]	; 13d98 <SetGpioFunction+0xd8>
   13cec:	e5933000 	ldr	r3, [r3]
   13cf0:	e51b2008 	ldr	r2, [fp, #-8]
   13cf4:	e7933102 	ldr	r3, [r3, r2, lsl #2]
   13cf8:	e50b300c 	str	r3, [fp, #-12]

	int item = pinNum % 10;
   13cfc:	e51b1018 	ldr	r1, [fp, #-24]
   13d00:	e59f308c 	ldr	r3, [pc, #140]	; 13d94 <SetGpioFunction+0xd4>
   13d04:	e0832193 	umull	r2, r3, r3, r1
   13d08:	e1a021a3 	lsr	r2, r3, #3
   13d0c:	e1a03002 	mov	r3, r2
   13d10:	e1a03103 	lsl	r3, r3, #2
   13d14:	e0833002 	add	r3, r3, r2
   13d18:	e1a03083 	lsl	r3, r3, #1
   13d1c:	e0632001 	rsb	r2, r3, r1
   13d20:	e50b2010 	str	r2, [fp, #-16]
	val &= ~(0x7 << (item * 3));
   13d24:	e51b2010 	ldr	r2, [fp, #-16]
   13d28:	e1a03002 	mov	r3, r2
   13d2c:	e1a03083 	lsl	r3, r3, #1
   13d30:	e0833002 	add	r3, r3, r2
   13d34:	e3a02007 	mov	r2, #7
   13d38:	e1a03312 	lsl	r3, r2, r3
   13d3c:	e1e03003 	mvn	r3, r3
   13d40:	e51b200c 	ldr	r2, [fp, #-12]
   13d44:	e0023003 	and	r3, r2, r3
   13d48:	e50b300c 	str	r3, [fp, #-12]
	val |= ((funcNum & 0x7) << (item * 3));
   13d4c:	e51b301c 	ldr	r3, [fp, #-28]
   13d50:	e2031007 	and	r1, r3, #7
   13d54:	e51b2010 	ldr	r2, [fp, #-16]
   13d58:	e1a03002 	mov	r3, r2
   13d5c:	e1a03083 	lsl	r3, r3, #1
   13d60:	e0833002 	add	r3, r3, r2
   13d64:	e1a03311 	lsl	r3, r1, r3
   13d68:	e51b200c 	ldr	r2, [fp, #-12]
   13d6c:	e1823003 	orr	r3, r2, r3
   13d70:	e50b300c 	str	r3, [fp, #-12]
	pRegs->GPFSEL[offset] = val;
   13d74:	e59f301c 	ldr	r3, [pc, #28]	; 13d98 <SetGpioFunction+0xd8>
   13d78:	e5933000 	ldr	r3, [r3]
   13d7c:	e51b2008 	ldr	r2, [fp, #-8]
   13d80:	e51b100c 	ldr	r1, [fp, #-12]
   13d84:	e7831102 	str	r1, [r3, r2, lsl #2]
}
   13d88:	e28bd000 	add	sp, fp, #0
   13d8c:	e8bd0800 	pop	{fp}
   13d90:	e12fff1e 	bx	lr
   13d94:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
   13d98:	000141d8 	ldrdeq	r4, [r1], -r8

00013d9c <SetGpio>:

void SetGpio(unsigned int pinNum, unsigned int pinVal) {
   13d9c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   13da0:	e28db000 	add	fp, sp, #0
   13da4:	e24dd014 	sub	sp, sp, #20
   13da8:	e50b0010 	str	r0, [fp, #-16]
   13dac:	e50b1014 	str	r1, [fp, #-20]
	int offset = pinNum / 32;
   13db0:	e51b3010 	ldr	r3, [fp, #-16]
   13db4:	e1a032a3 	lsr	r3, r3, #5
   13db8:	e50b3008 	str	r3, [fp, #-8]

	if(pinVal) {
   13dbc:	e51b3014 	ldr	r3, [fp, #-20]
   13dc0:	e3530000 	cmp	r3, #0
   13dc4:	0a00000e 	beq	13e04 <SetGpio+0x68>
		pRegs->GPSET[offset] = 1 << (pinNum % 32);		
   13dc8:	e59f3068 	ldr	r3, [pc, #104]	; 13e38 <SetGpio+0x9c>
   13dcc:	e5930000 	ldr	r0, [r3]
   13dd0:	e51b3010 	ldr	r3, [fp, #-16]
   13dd4:	e203301f 	and	r3, r3, #31
   13dd8:	e3a02001 	mov	r2, #1
   13ddc:	e1a03312 	lsl	r3, r2, r3
   13de0:	e1a02003 	mov	r2, r3
   13de4:	e51b3008 	ldr	r3, [fp, #-8]
   13de8:	e2831006 	add	r1, r3, #6
   13dec:	e3a03004 	mov	r3, #4
   13df0:	e1a01101 	lsl	r1, r1, #2
   13df4:	e0801001 	add	r1, r0, r1
   13df8:	e0813003 	add	r3, r1, r3
   13dfc:	e5832000 	str	r2, [r3]
   13e00:	ea000009 	b	13e2c <SetGpio+0x90>
	} else {
		pRegs->GPCLR[offset] = 1 << (pinNum % 32);
   13e04:	e59f302c 	ldr	r3, [pc, #44]	; 13e38 <SetGpio+0x9c>
   13e08:	e5933000 	ldr	r3, [r3]
   13e0c:	e51b2010 	ldr	r2, [fp, #-16]
   13e10:	e202201f 	and	r2, r2, #31
   13e14:	e3a01001 	mov	r1, #1
   13e18:	e1a02211 	lsl	r2, r1, r2
   13e1c:	e1a01002 	mov	r1, r2
   13e20:	e51b2008 	ldr	r2, [fp, #-8]
   13e24:	e282200a 	add	r2, r2, #10
   13e28:	e7831102 	str	r1, [r3, r2, lsl #2]
	}
}
   13e2c:	e28bd000 	add	sp, fp, #0
   13e30:	e8bd0800 	pop	{fp}
   13e34:	e12fff1e 	bx	lr
   13e38:	000141d8 	ldrdeq	r4, [r1], -r8

00013e3c <SetupUART>:
/* Definition of variables from header file. */
xSemaphoreHandle ReadSemaphore;
xSemaphoreHandle WriteSemaphore;

int SetupUART(void)
{
   13e3c:	e92d4800 	push	{fp, lr}
   13e40:	e28db004 	add	fp, sp, #4
	/* Mutexes have priority inheritance, semaphores do not. Free choice. */
	vSemaphoreCreateBinary(ReadSemaphore);
   13e44:	e3a00001 	mov	r0, #1
   13e48:	e3a01000 	mov	r1, #0
   13e4c:	e3a02003 	mov	r2, #3
   13e50:	ebfff4a7 	bl	110f4 <xQueueGenericCreate>
   13e54:	e1a02000 	mov	r2, r0
   13e58:	e59f3080 	ldr	r3, [pc, #128]	; 13ee0 <SetupUART+0xa4>
   13e5c:	e5832000 	str	r2, [r3]
   13e60:	e59f3078 	ldr	r3, [pc, #120]	; 13ee0 <SetupUART+0xa4>
   13e64:	e5933000 	ldr	r3, [r3]
   13e68:	e3530000 	cmp	r3, #0
   13e6c:	0a000006 	beq	13e8c <SetupUART+0x50>
   13e70:	e59f3068 	ldr	r3, [pc, #104]	; 13ee0 <SetupUART+0xa4>
   13e74:	e5933000 	ldr	r3, [r3]
   13e78:	e1a00003 	mov	r0, r3
   13e7c:	e3a01000 	mov	r1, #0
   13e80:	e3a02000 	mov	r2, #0
   13e84:	e3a03000 	mov	r3, #0
   13e88:	ebfff4cb 	bl	111bc <xQueueGenericSend>
	vSemaphoreCreateBinary(WriteSemaphore);
   13e8c:	e3a00001 	mov	r0, #1
   13e90:	e3a01000 	mov	r1, #0
   13e94:	e3a02003 	mov	r2, #3
   13e98:	ebfff495 	bl	110f4 <xQueueGenericCreate>
   13e9c:	e1a02000 	mov	r2, r0
   13ea0:	e59f303c 	ldr	r3, [pc, #60]	; 13ee4 <SetupUART+0xa8>
   13ea4:	e5832000 	str	r2, [r3]
   13ea8:	e59f3034 	ldr	r3, [pc, #52]	; 13ee4 <SetupUART+0xa8>
   13eac:	e5933000 	ldr	r3, [r3]
   13eb0:	e3530000 	cmp	r3, #0
   13eb4:	0a000006 	beq	13ed4 <SetupUART+0x98>
   13eb8:	e59f3024 	ldr	r3, [pc, #36]	; 13ee4 <SetupUART+0xa8>
   13ebc:	e5933000 	ldr	r3, [r3]
   13ec0:	e1a00003 	mov	r0, r3
   13ec4:	e3a01000 	mov	r1, #0
   13ec8:	e3a02000 	mov	r2, #0
   13ecc:	e3a03000 	mov	r3, #0
   13ed0:	ebfff4b9 	bl	111bc <xQueueGenericSend>
	
	/* TODO: Set up registers and stuff. */
	return 0;
   13ed4:	e3a03000 	mov	r3, #0
}
   13ed8:	e1a00003 	mov	r0, r3
   13edc:	e8bd8800 	pop	{fp, pc}
   13ee0:	000158b8 			; <UNDEFINED> instruction: 0x000158b8
   13ee4:	000158bc 			; <UNDEFINED> instruction: 0x000158bc

00013ee8 <WriteUART>:
/* TODO: The while loops are basically a busy-wait. This means that they will
 * not yield if they are blocking. Set up some interrupt or similar?
 */

int WriteUART(int ch)
{
   13ee8:	e92d4800 	push	{fp, lr}
   13eec:	e28db004 	add	fp, sp, #4
   13ef0:	e24dd008 	sub	sp, sp, #8
   13ef4:	e50b0008 	str	r0, [fp, #-8]
	/* Wait for WriteSemaphore indefinitely */
	xSemaphoreTake(WriteSemaphore,portMAX_DELAY);
   13ef8:	e59f306c 	ldr	r3, [pc, #108]	; 13f6c <WriteUART+0x84>
   13efc:	e5933000 	ldr	r3, [r3]
   13f00:	e1a00003 	mov	r0, r3
   13f04:	e3a01000 	mov	r1, #0
   13f08:	e3e02000 	mvn	r2, #0
   13f0c:	e3a03000 	mov	r3, #0
   13f10:	ebfff54b 	bl	11444 <xQueueGenericReceive>
	/* Wait until UART TX FIFO is not full */
	while (IOWord(UART0_FR)&FR_TXFF);
   13f14:	e1a00000 	nop			; (mov r0, r0)
   13f18:	e59f3050 	ldr	r3, [pc, #80]	; 13f70 <WriteUART+0x88>
   13f1c:	e5933000 	ldr	r3, [r3]
   13f20:	e2033020 	and	r3, r3, #32
   13f24:	e3530000 	cmp	r3, #0
   13f28:	1afffffa 	bne	13f18 <WriteUART+0x30>
	/* Cast to 8 bits, write, and save */
	ch=(IOWord(UART0_DR)=(char)ch&DR_DATA);
   13f2c:	e59f2040 	ldr	r2, [pc, #64]	; 13f74 <WriteUART+0x8c>
   13f30:	e51b3008 	ldr	r3, [fp, #-8]
   13f34:	e6ef3073 	uxtb	r3, r3
   13f38:	e5823000 	str	r3, [r2]
   13f3c:	e50b3008 	str	r3, [fp, #-8]
	/* Release the semaphore */
	xSemaphoreGive(WriteSemaphore);
   13f40:	e59f3024 	ldr	r3, [pc, #36]	; 13f6c <WriteUART+0x84>
   13f44:	e5933000 	ldr	r3, [r3]
   13f48:	e1a00003 	mov	r0, r3
   13f4c:	e3a01000 	mov	r1, #0
   13f50:	e3a02000 	mov	r2, #0
   13f54:	e3a03000 	mov	r3, #0
   13f58:	ebfff497 	bl	111bc <xQueueGenericSend>
	/* Return the character written */
	return ch;
   13f5c:	e51b3008 	ldr	r3, [fp, #-8]
}
   13f60:	e1a00003 	mov	r0, r3
   13f64:	e24bd004 	sub	sp, fp, #4
   13f68:	e8bd8800 	pop	{fp, pc}
   13f6c:	000158bc 			; <UNDEFINED> instruction: 0x000158bc
   13f70:	20201018 	eorcs	r1, r0, r8, lsl r0
   13f74:	20201000 	eorcs	r1, r0, r0

00013f78 <ReadUART>:

/* Blocking version */
int ReadUART(void)
{
   13f78:	e92d4818 	push	{r3, r4, fp, lr}
   13f7c:	e28db00c 	add	fp, sp, #12
	register int read;
	/* Wait for ReadSemaphore indefinitely */
	xSemaphoreTake(ReadSemaphore,portMAX_DELAY);
   13f80:	e59f3060 	ldr	r3, [pc, #96]	; 13fe8 <ReadUART+0x70>
   13f84:	e5933000 	ldr	r3, [r3]
   13f88:	e1a00003 	mov	r0, r3
   13f8c:	e3a01000 	mov	r1, #0
   13f90:	e3e02000 	mvn	r2, #0
   13f94:	e3a03000 	mov	r3, #0
   13f98:	ebfff529 	bl	11444 <xQueueGenericReceive>
	/* Wait until UART RX FIFO is not empty */
	while (IOWord(UART0_FR)&FR_RXFE);
   13f9c:	e1a00000 	nop			; (mov r0, r0)
   13fa0:	e59f3044 	ldr	r3, [pc, #68]	; 13fec <ReadUART+0x74>
   13fa4:	e5933000 	ldr	r3, [r3]
   13fa8:	e2033010 	and	r3, r3, #16
   13fac:	e3530000 	cmp	r3, #0
   13fb0:	1afffffa 	bne	13fa0 <ReadUART+0x28>
	/* Receive character */
	read=(IOWord(UART0_DR)&DR_DATA);
   13fb4:	e59f3034 	ldr	r3, [pc, #52]	; 13ff0 <ReadUART+0x78>
   13fb8:	e5933000 	ldr	r3, [r3]
   13fbc:	e6ef4073 	uxtb	r4, r3
	/* Return the semaphore */
	xSemaphoreGive(ReadSemaphore);
   13fc0:	e59f3020 	ldr	r3, [pc, #32]	; 13fe8 <ReadUART+0x70>
   13fc4:	e5933000 	ldr	r3, [r3]
   13fc8:	e1a00003 	mov	r0, r3
   13fcc:	e3a01000 	mov	r1, #0
   13fd0:	e3a02000 	mov	r2, #0
   13fd4:	e3a03000 	mov	r3, #0
   13fd8:	ebfff477 	bl	111bc <xQueueGenericSend>
	/* Return the character */
	return read;
   13fdc:	e1a03004 	mov	r3, r4
}
   13fe0:	e1a00003 	mov	r0, r3
   13fe4:	e8bd8818 	pop	{r3, r4, fp, pc}
   13fe8:	000158b8 			; <UNDEFINED> instruction: 0x000158b8
   13fec:	20201018 	eorcs	r1, r0, r8, lsl r0
   13ff0:	20201000 	eorcs	r1, r0, r0

00013ff4 <putchar>:
 * Therefore, the stack usage elsewhere is predictable, and stack usage
 * locally is minimal.
 */

inline int putchar(int ch)
{
   13ff4:	e92d4800 	push	{fp, lr}
   13ff8:	e28db004 	add	fp, sp, #4
   13ffc:	e24dd008 	sub	sp, sp, #8
   14000:	e50b0008 	str	r0, [fp, #-8]
	return WriteUART(ch);
   14004:	e51b0008 	ldr	r0, [fp, #-8]
   14008:	ebffffb6 	bl	13ee8 <WriteUART>
   1400c:	e1a03000 	mov	r3, r0
}
   14010:	e1a00003 	mov	r0, r3
   14014:	e24bd004 	sub	sp, fp, #4
   14018:	e8bd8800 	pop	{fp, pc}

0001401c <getchar>:

inline int getchar()
{
   1401c:	e92d4800 	push	{fp, lr}
   14020:	e28db004 	add	fp, sp, #4
	return ReadUART();
   14024:	ebffffd3 	bl	13f78 <ReadUART>
   14028:	e1a03000 	mov	r3, r0
}
   1402c:	e1a00003 	mov	r0, r3
   14030:	e8bd8800 	pop	{fp, pc}

00014034 <puts>:

int puts(const char* s)
{
   14034:	e92d4800 	push	{fp, lr}
   14038:	e28db004 	add	fp, sp, #4
   1403c:	e24dd008 	sub	sp, sp, #8
   14040:	e50b0008 	str	r0, [fp, #-8]
	while(*s)
   14044:	ea00000b 	b	14078 <puts+0x44>
		if (putchar(*s++)==EOF) return EOF;
   14048:	e51b3008 	ldr	r3, [fp, #-8]
   1404c:	e5d33000 	ldrb	r3, [r3]
   14050:	e51b2008 	ldr	r2, [fp, #-8]
   14054:	e2822001 	add	r2, r2, #1
   14058:	e50b2008 	str	r2, [fp, #-8]
   1405c:	e1a00003 	mov	r0, r3
   14060:	ebffffe3 	bl	13ff4 <putchar>
   14064:	e1a03000 	mov	r3, r0
   14068:	e3730001 	cmn	r3, #1
   1406c:	1a000001 	bne	14078 <puts+0x44>
   14070:	e3e03000 	mvn	r3, #0
   14074:	ea000004 	b	1408c <puts+0x58>
	return ReadUART();
}

int puts(const char* s)
{
	while(*s)
   14078:	e51b3008 	ldr	r3, [fp, #-8]
   1407c:	e5d33000 	ldrb	r3, [r3]
   14080:	e3530000 	cmp	r3, #0
   14084:	1affffef 	bne	14048 <puts+0x14>
		if (putchar(*s++)==EOF) return EOF;
	return 0;
   14088:	e3a03000 	mov	r3, #0
}
   1408c:	e1a00003 	mov	r0, r3
   14090:	e24bd004 	sub	sp, fp, #4
   14094:	e8bd8800 	pop	{fp, pc}

00014098 <echo_task>:
#include "Drivers/interrupts.h"
#include "Drivers/gpio.h"

#include "stdio.h"

void echo_task(void *pParam) {
   14098:	e92d4800 	push	{fp, lr}
   1409c:	e28db004 	add	fp, sp, #4
   140a0:	e24dd010 	sub	sp, sp, #16
   140a4:	e50b0010 	str	r0, [fp, #-16]
	char c;

	while(1) {
		c=getchar();
   140a8:	ebffffdb 	bl	1401c <getchar>
   140ac:	e1a03000 	mov	r3, r0
   140b0:	e54b3005 	strb	r3, [fp, #-5]
		putchar(c);
   140b4:	e55b3005 	ldrb	r3, [fp, #-5]
   140b8:	e1a00003 	mov	r0, r3
   140bc:	ebffffcc 	bl	13ff4 <putchar>
	}
   140c0:	eafffff8 	b	140a8 <echo_task+0x10>

000140c4 <led_task>:
}

void led_task(void *pParam) {
   140c4:	e92d4800 	push	{fp, lr}
   140c8:	e28db004 	add	fp, sp, #4
   140cc:	e24dd010 	sub	sp, sp, #16
   140d0:	e50b0010 	str	r0, [fp, #-16]

	int i = 0;
   140d4:	e3a03000 	mov	r3, #0
   140d8:	e50b3008 	str	r3, [fp, #-8]
	while(1) {
		i^=1;
   140dc:	e51b3008 	ldr	r3, [fp, #-8]
   140e0:	e2233001 	eor	r3, r3, #1
   140e4:	e50b3008 	str	r3, [fp, #-8]
		SetGpio(16, i);
   140e8:	e51b3008 	ldr	r3, [fp, #-8]
   140ec:	e3a00010 	mov	r0, #16
   140f0:	e1a01003 	mov	r1, r3
   140f4:	ebffff28 	bl	13d9c <SetGpio>
		vTaskDelay(500);
   140f8:	e3a00f7d 	mov	r0, #500	; 0x1f4
   140fc:	ebfff7ba 	bl	11fec <vTaskDelay>
	}
   14100:	eafffff5 	b	140dc <led_task+0x18>

00014104 <main>:
}


void main(void) {
   14104:	e92d4800 	push	{fp, lr}
   14108:	e28db004 	add	fp, sp, #4
   1410c:	e24dd010 	sub	sp, sp, #16
	DisableInterrupts();
   14110:	ebfffee4 	bl	13ca8 <DisableInterrupts>
	InitInterruptController();
   14114:	ebfffe6f 	bl	13ad8 <InitInterruptController>

	SetGpioFunction(16, 1);
   14118:	e3a00010 	mov	r0, #16
   1411c:	e3a01001 	mov	r1, #1
   14120:	ebfffee6 	bl	13cc0 <SetGpioFunction>

	SetupUART();
   14124:	ebffff44 	bl	13e3c <SetupUART>

	puts("Test - Charcter echo\n");
   14128:	e59f0078 	ldr	r0, [pc, #120]	; 141a8 <main+0xa4>
   1412c:	ebffffc0 	bl	14034 <puts>

	/* Code entry point, task handle, stack word depth, arguments, priority, handle pointer */
	xTaskCreate(echo_task, "ECHO", 128, NULL, 0, NULL);
   14130:	e3a03000 	mov	r3, #0
   14134:	e58d3000 	str	r3, [sp]
   14138:	e3a03000 	mov	r3, #0
   1413c:	e58d3004 	str	r3, [sp, #4]
   14140:	e3a03000 	mov	r3, #0
   14144:	e58d3008 	str	r3, [sp, #8]
   14148:	e3a03000 	mov	r3, #0
   1414c:	e58d300c 	str	r3, [sp, #12]
   14150:	e59f0054 	ldr	r0, [pc, #84]	; 141ac <main+0xa8>
   14154:	e59f1054 	ldr	r1, [pc, #84]	; 141b0 <main+0xac>
   14158:	e3a02080 	mov	r2, #128	; 0x80
   1415c:	e3a03000 	mov	r3, #0
   14160:	ebfff68d 	bl	11b9c <xTaskGenericCreate>
	xTaskCreate(led_task, "LED", 128, NULL, 1, NULL);
   14164:	e3a03001 	mov	r3, #1
   14168:	e58d3000 	str	r3, [sp]
   1416c:	e3a03000 	mov	r3, #0
   14170:	e58d3004 	str	r3, [sp, #4]
   14174:	e3a03000 	mov	r3, #0
   14178:	e58d3008 	str	r3, [sp, #8]
   1417c:	e3a03000 	mov	r3, #0
   14180:	e58d300c 	str	r3, [sp, #12]
   14184:	e59f0028 	ldr	r0, [pc, #40]	; 141b4 <main+0xb0>
   14188:	e59f1028 	ldr	r1, [pc, #40]	; 141b8 <main+0xb4>
   1418c:	e3a02080 	mov	r2, #128	; 0x80
   14190:	e3a03000 	mov	r3, #0
   14194:	ebfff680 	bl	11b9c <xTaskGenericCreate>

	vTaskStartScheduler();
   14198:	ebfff915 	bl	125f4 <vTaskStartScheduler>

	/* We should never reach here, but just in case. */
	puts("Error occured - halting\n");
   1419c:	e59f0018 	ldr	r0, [pc, #24]	; 141bc <main+0xb8>
   141a0:	ebffffa3 	bl	14034 <puts>
	while(1);
   141a4:	eafffffe 	b	141a4 <main+0xa0>
   141a8:	000141dc 	ldrdeq	r4, [r1], -ip
   141ac:	00014098 	muleq	r1, r8, r0
   141b0:	000141f4 	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   141b4:	000140c4 	andeq	r4, r1, r4, asr #1
   141b8:	000141fc 	strdeq	r4, [r1], -ip
   141bc:	00014200 	andeq	r4, r1, r0, lsl #4

Disassembly of section .rodata:

000141c0 <pRegs>:
   141c0:	2000b400 	andcs	fp, r0, r0, lsl #8
   141c4:	454c4449 	strbmi	r4, [ip, #-1097]	; 0x449
   141c8:	00000000 	andeq	r0, r0, r0

000141cc <heapSTRUCT_SIZE>:
   141cc:	00000010 	andeq	r0, r0, r0, lsl r0

000141d0 <xTotalHeapSize>:
   141d0:	00001000 	andeq	r1, r0, r0

000141d4 <pRegs>:
   141d4:	2000b200 	andcs	fp, r0, r0, lsl #4

000141d8 <pRegs>:
   141d8:	20200000 	eorcs	r0, r0, r0
   141dc:	74736554 	ldrbtvc	r6, [r3], #-1364	; 0x554
   141e0:	43202d20 	teqmi	r0, #2048	; 0x800
   141e4:	63726168 	cmnvs	r2, #26
   141e8:	20726574 	rsbscs	r6, r2, r4, ror r5
   141ec:	6f686365 	svcvs	0x00686365
   141f0:	0000000a 	andeq	r0, r0, sl
   141f4:	4f484345 	svcmi	0x00484345
   141f8:	00000000 	andeq	r0, r0, r0
   141fc:	0044454c 	subeq	r4, r4, ip, asr #10
   14200:	6f727245 	svcvs	0x00727245
   14204:	636f2072 	cmnvs	pc, #114	; 0x72
   14208:	65727563 	ldrbvs	r7, [r2, #-1379]!	; 0x563
   1420c:	202d2064 	eorcs	r2, sp, r4, rrx
   14210:	746c6168 	strbtvc	r6, [ip], #-360	; 0x168
   14214:	0a676e69 	beq	19efbc0 <WriteSemaphore+0x19da304>
   14218:	00000000 	andeq	r0, r0, r0

Disassembly of section .text.memcpy:

0001421c <memcpy>:
   1421c:	e352000f 	cmp	r2, #15
   14220:	e92d00f0 	push	{r4, r5, r6, r7}
   14224:	9a00002a 	bls	142d4 <memcpy+0xb8>
   14228:	e1813000 	orr	r3, r1, r0
   1422c:	e3130003 	tst	r3, #3
   14230:	1a000032 	bne	14300 <memcpy+0xe4>
   14234:	e1a0c001 	mov	ip, r1
   14238:	e1a03000 	mov	r3, r0
   1423c:	e1a04002 	mov	r4, r2
   14240:	e59c5000 	ldr	r5, [ip]
   14244:	e5835000 	str	r5, [r3]
   14248:	e59c5004 	ldr	r5, [ip, #4]
   1424c:	e5835004 	str	r5, [r3, #4]
   14250:	e59c5008 	ldr	r5, [ip, #8]
   14254:	e5835008 	str	r5, [r3, #8]
   14258:	e2444010 	sub	r4, r4, #16
   1425c:	e59c500c 	ldr	r5, [ip, #12]
   14260:	e354000f 	cmp	r4, #15
   14264:	e583500c 	str	r5, [r3, #12]
   14268:	e28cc010 	add	ip, ip, #16
   1426c:	e2833010 	add	r3, r3, #16
   14270:	8afffff2 	bhi	14240 <memcpy+0x24>
   14274:	e2424010 	sub	r4, r2, #16
   14278:	e3c4400f 	bic	r4, r4, #15
   1427c:	e202c00f 	and	ip, r2, #15
   14280:	e2844010 	add	r4, r4, #16
   14284:	e35c0003 	cmp	ip, #3
   14288:	e0803004 	add	r3, r0, r4
   1428c:	e0811004 	add	r1, r1, r4
   14290:	9a00001c 	bls	14308 <memcpy+0xec>
   14294:	e24cc004 	sub	ip, ip, #4
   14298:	e1a0712c 	lsr	r7, ip, #2
   1429c:	e0816107 	add	r6, r1, r7, lsl #2
   142a0:	e1a0c001 	mov	ip, r1
   142a4:	e2866004 	add	r6, r6, #4
   142a8:	e1a04003 	mov	r4, r3
   142ac:	e49c5004 	ldr	r5, [ip], #4
   142b0:	e15c0006 	cmp	ip, r6
   142b4:	e4845004 	str	r5, [r4], #4
   142b8:	1afffffb 	bne	142ac <memcpy+0x90>
   142bc:	e287c001 	add	ip, r7, #1
   142c0:	e1a0c10c 	lsl	ip, ip, #2
   142c4:	e2022003 	and	r2, r2, #3
   142c8:	e081100c 	add	r1, r1, ip
   142cc:	e083300c 	add	r3, r3, ip
   142d0:	ea000000 	b	142d8 <memcpy+0xbc>
   142d4:	e1a03000 	mov	r3, r0
   142d8:	e3520000 	cmp	r2, #0
   142dc:	0a000005 	beq	142f8 <memcpy+0xdc>
   142e0:	e2411001 	sub	r1, r1, #1
   142e4:	e0832002 	add	r2, r3, r2
   142e8:	e5f1c001 	ldrb	ip, [r1, #1]!
   142ec:	e4c3c001 	strb	ip, [r3], #1
   142f0:	e1530002 	cmp	r3, r2
   142f4:	1afffffb 	bne	142e8 <memcpy+0xcc>
   142f8:	e8bd00f0 	pop	{r4, r5, r6, r7}
   142fc:	e12fff1e 	bx	lr
   14300:	e1a03000 	mov	r3, r0
   14304:	eafffff5 	b	142e0 <memcpy+0xc4>
   14308:	e1a0200c 	mov	r2, ip
   1430c:	eafffff1 	b	142d8 <memcpy+0xbc>

Disassembly of section .text.memset:

00014310 <memset>:
   14310:	e3100003 	tst	r0, #3
   14314:	e92d0030 	push	{r4, r5}
   14318:	e1a03000 	mov	r3, r0
   1431c:	0a000037 	beq	14400 <memset+0xf0>
   14320:	e3520000 	cmp	r2, #0
   14324:	e2422001 	sub	r2, r2, #1
   14328:	0a000032 	beq	143f8 <memset+0xe8>
   1432c:	e20140ff 	and	r4, r1, #255	; 0xff
   14330:	ea000002 	b	14340 <memset+0x30>
   14334:	e3520000 	cmp	r2, #0
   14338:	e2422001 	sub	r2, r2, #1
   1433c:	0a00002d 	beq	143f8 <memset+0xe8>
   14340:	e4c34001 	strb	r4, [r3], #1
   14344:	e3130003 	tst	r3, #3
   14348:	e1a0c003 	mov	ip, r3
   1434c:	1afffff8 	bne	14334 <memset+0x24>
   14350:	e3520003 	cmp	r2, #3
   14354:	9a000020 	bls	143dc <memset+0xcc>
   14358:	e20140ff 	and	r4, r1, #255	; 0xff
   1435c:	e352000f 	cmp	r2, #15
   14360:	e1844404 	orr	r4, r4, r4, lsl #8
   14364:	e1844804 	orr	r4, r4, r4, lsl #16
   14368:	81a0300c 	movhi	r3, ip
   1436c:	81a05002 	movhi	r5, r2
   14370:	9a00000e 	bls	143b0 <memset+0xa0>
   14374:	e2455010 	sub	r5, r5, #16
   14378:	e355000f 	cmp	r5, #15
   1437c:	e5834000 	str	r4, [r3]
   14380:	e5834004 	str	r4, [r3, #4]
   14384:	e5834008 	str	r4, [r3, #8]
   14388:	e583400c 	str	r4, [r3, #12]
   1438c:	e2833010 	add	r3, r3, #16
   14390:	8afffff7 	bhi	14374 <memset+0x64>
   14394:	e2423010 	sub	r3, r2, #16
   14398:	e3c3300f 	bic	r3, r3, #15
   1439c:	e202200f 	and	r2, r2, #15
   143a0:	e2833010 	add	r3, r3, #16
   143a4:	e3520003 	cmp	r2, #3
   143a8:	e08cc003 	add	ip, ip, r3
   143ac:	9a00000a 	bls	143dc <memset+0xcc>
   143b0:	e1a0500c 	mov	r5, ip
   143b4:	e1a03002 	mov	r3, r2
   143b8:	e2433004 	sub	r3, r3, #4
   143bc:	e3530003 	cmp	r3, #3
   143c0:	e4854004 	str	r4, [r5], #4
   143c4:	8afffffb 	bhi	143b8 <memset+0xa8>
   143c8:	e2423004 	sub	r3, r2, #4
   143cc:	e3c33003 	bic	r3, r3, #3
   143d0:	e2833004 	add	r3, r3, #4
   143d4:	e2022003 	and	r2, r2, #3
   143d8:	e08cc003 	add	ip, ip, r3
   143dc:	e3520000 	cmp	r2, #0
   143e0:	120110ff 	andne	r1, r1, #255	; 0xff
   143e4:	108c2002 	addne	r2, ip, r2
   143e8:	0a000002 	beq	143f8 <memset+0xe8>
   143ec:	e4cc1001 	strb	r1, [ip], #1
   143f0:	e15c0002 	cmp	ip, r2
   143f4:	1afffffc 	bne	143ec <memset+0xdc>
   143f8:	e8bd0030 	pop	{r4, r5}
   143fc:	e12fff1e 	bx	lr
   14400:	e1a0c000 	mov	ip, r0
   14404:	eaffffd1 	b	14350 <memset+0x40>

Disassembly of section .text.strncpy:

00014408 <strncpy>:
   14408:	e1813000 	orr	r3, r1, r0
   1440c:	e3130003 	tst	r3, #3
   14410:	e92d0070 	push	{r4, r5, r6}
   14414:	e1a03000 	mov	r3, r0
   14418:	1a000001 	bne	14424 <strncpy+0x1c>
   1441c:	e3520003 	cmp	r2, #3
   14420:	8a000018 	bhi	14488 <strncpy+0x80>
   14424:	e3520000 	cmp	r2, #0
   14428:	0a000014 	beq	14480 <strncpy+0x78>
   1442c:	e5d1c000 	ldrb	ip, [r1]
   14430:	e4c3c001 	strb	ip, [r3], #1
   14434:	e35c0000 	cmp	ip, #0
   14438:	e2422001 	sub	r2, r2, #1
   1443c:	11a0c003 	movne	ip, r3
   14440:	0a000007 	beq	14464 <strncpy+0x5c>
   14444:	e3520000 	cmp	r2, #0
   14448:	0a00000c 	beq	14480 <strncpy+0x78>
   1444c:	e5f13001 	ldrb	r3, [r1, #1]!
   14450:	e4cc3001 	strb	r3, [ip], #1
   14454:	e3530000 	cmp	r3, #0
   14458:	e2422001 	sub	r2, r2, #1
   1445c:	e1a0300c 	mov	r3, ip
   14460:	1afffff7 	bne	14444 <strncpy+0x3c>
   14464:	e3520000 	cmp	r2, #0
   14468:	10832002 	addne	r2, r3, r2
   1446c:	13a01000 	movne	r1, #0
   14470:	0a000002 	beq	14480 <strncpy+0x78>
   14474:	e4c31001 	strb	r1, [r3], #1
   14478:	e1530002 	cmp	r3, r2
   1447c:	1afffffc 	bne	14474 <strncpy+0x6c>
   14480:	e8bd0070 	pop	{r4, r5, r6}
   14484:	e12fff1e 	bx	lr
   14488:	e1a06001 	mov	r6, r1
   1448c:	e59f4034 	ldr	r4, [pc, #52]	; 144c8 <strncpy+0xc0>
   14490:	e4915004 	ldr	r5, [r1], #4
   14494:	e59fc030 	ldr	ip, [pc, #48]	; 144cc <strncpy+0xc4>
   14498:	e0854004 	add	r4, r5, r4
   1449c:	e1c44005 	bic	r4, r4, r5
   144a0:	e004c00c 	and	ip, r4, ip
   144a4:	e35c0000 	cmp	ip, #0
   144a8:	1a000004 	bne	144c0 <strncpy+0xb8>
   144ac:	e2422004 	sub	r2, r2, #4
   144b0:	e3520003 	cmp	r2, #3
   144b4:	e4835004 	str	r5, [r3], #4
   144b8:	8afffff2 	bhi	14488 <strncpy+0x80>
   144bc:	eaffffd8 	b	14424 <strncpy+0x1c>
   144c0:	e1a01006 	mov	r1, r6
   144c4:	eaffffd6 	b	14424 <strncpy+0x1c>
   144c8:	fefefeff 	mrc2	14, 7, pc, cr14, cr15, {7}
   144cc:	80808080 	addhi	r8, r0, r0, lsl #1

Disassembly of section .data:

000144d0 <ulCriticalNesting>:
   144d0:	0000270f 	andeq	r2, r0, pc, lsl #14

000144d4 <xNextTaskUnblockTime>:
   144d4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

000144d8 <xFreeBytesRemaining>:
   144d8:	00001000 	andeq	r1, r0, r0

Disassembly of section .bss:

000144e0 <__bss_start>:
   144e0:	00000000 	andeq	r0, r0, r0

000144e4 <pxReadyCoRoutineLists>:
	...

0001450c <xDelayedCoRoutineList1>:
	...

00014520 <xDelayedCoRoutineList2>:
	...

00014534 <pxDelayedCoRoutineList>:
   14534:	00000000 	andeq	r0, r0, r0

00014538 <pxOverflowDelayedCoRoutineList>:
   14538:	00000000 	andeq	r0, r0, r0

0001453c <xPendingReadyCoRoutineList>:
	...

00014550 <pxCurrentCoRoutine>:
   14550:	00000000 	andeq	r0, r0, r0

00014554 <uxTopCoRoutineReadyPriority>:
   14554:	00000000 	andeq	r0, r0, r0

00014558 <xCoRoutineTickCount>:
   14558:	00000000 	andeq	r0, r0, r0

0001455c <xLastTickCount>:
   1455c:	00000000 	andeq	r0, r0, r0

00014560 <xPassedTicks>:
   14560:	00000000 	andeq	r0, r0, r0

00014564 <pxCurrentTCB>:
   14564:	00000000 	andeq	r0, r0, r0

00014568 <pxReadyTasksLists>:
	...

000145cc <xDelayedTaskList1>:
	...

000145e0 <xDelayedTaskList2>:
	...

000145f4 <pxDelayedTaskList>:
   145f4:	00000000 	andeq	r0, r0, r0

000145f8 <pxOverflowDelayedTaskList>:
   145f8:	00000000 	andeq	r0, r0, r0

000145fc <xPendingReadyList>:
	...

00014610 <xTasksWaitingTermination>:
	...

00014624 <uxTasksDeleted>:
   14624:	00000000 	andeq	r0, r0, r0

00014628 <xSuspendedTaskList>:
	...

0001463c <uxCurrentNumberOfTasks>:
   1463c:	00000000 	andeq	r0, r0, r0

00014640 <xTickCount>:
   14640:	00000000 	andeq	r0, r0, r0

00014644 <uxTopUsedPriority>:
   14644:	00000000 	andeq	r0, r0, r0

00014648 <uxTopReadyPriority>:
   14648:	00000000 	andeq	r0, r0, r0

0001464c <xSchedulerRunning>:
   1464c:	00000000 	andeq	r0, r0, r0

00014650 <uxSchedulerSuspended>:
   14650:	00000000 	andeq	r0, r0, r0

00014654 <uxMissedTicks>:
   14654:	00000000 	andeq	r0, r0, r0

00014658 <xMissedYield>:
   14658:	00000000 	andeq	r0, r0, r0

0001465c <xNumOfOverflows>:
   1465c:	00000000 	andeq	r0, r0, r0

00014660 <uxTaskNumber>:
	...

00014668 <xHeap>:
	...

00015668 <xStart>:
	...

00015670 <pxEnd>:
   15670:	00000000 	andeq	r0, r0, r0

00015674 <allocated>:
   15674:	00000000 	andeq	r0, r0, r0

00015678 <g_VectorTable>:
	...

000158b8 <ReadSemaphore>:
   158b8:	00000000 	andeq	r0, r0, r0

000158bc <WriteSemaphore>:
   158bc:	00000000 	andeq	r0, r0, r0

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	00000277 	andeq	r0, r0, r7, ror r2
       4:	00000002 	andeq	r0, r0, r2
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	00000137 	andeq	r0, r0, r7, lsr r1
      10:	00000c01 	andeq	r0, r0, r1, lsl #24
      14:	01000000 	mrseq	r0, (UNDEF: 0)
      18:	01035c00 	tsteq	r3, r0, lsl #24
      1c:	00000000 	andeq	r0, r0, r0
      20:	05040200 	streq	r0, [r4, #-512]	; 0x200
      24:	00746e69 	rsbseq	r6, r4, r9, ror #28
      28:	8a070403 	bhi	1c103c <WriteSemaphore+0x1ab780>
      2c:	04000006 	streq	r0, [r0], #-6
      30:	000000c3 	andeq	r0, r0, r3, asr #1
      34:	003a4702 	eorseq	r4, sl, r2, lsl #14
      38:	04050000 	streq	r0, [r5], #-0
      3c:	00000040 	andeq	r0, r0, r0, asr #32
      40:	004c0106 	subeq	r0, ip, r6, lsl #2
      44:	4c070000 	stcmi	0, cr0, [r7], {-0}
      48:	00000000 	andeq	r0, r0, r0
      4c:	56040408 	strpl	r0, [r4], -r8, lsl #8
      50:	03000000 	movweq	r0, #0
      54:	0000591f 	andeq	r5, r0, pc, lsl r9
      58:	07040300 	streq	r0, [r4, -r0, lsl #6]
      5c:	00000685 	andeq	r0, r0, r5, lsl #13
      60:	5b050403 	blpl	141074 <WriteSemaphore+0x12b7b8>
      64:	03000006 	movweq	r0, #6
      68:	06740601 	ldrbteq	r0, [r4], -r1, lsl #12
      6c:	02030000 	andeq	r0, r3, #0
      70:	0000b007 	andeq	fp, r0, r7
      74:	59040500 	stmdbpl	r4, {r8, sl}
      78:	03000000 	movweq	r0, #0
      7c:	010e0704 	tsteq	lr, r4, lsl #14
      80:	98090000 	stmdals	r9, {}	; <UNPREDICTABLE>
      84:	24000001 	strcs	r0, [r0], #-1
      88:	010d1601 	tsteq	sp, r1, lsl #12
      8c:	4c0a0000 	stcmi	0, cr0, [sl], {-0}
      90:	0100444f 	tsteq	r0, pc, asr #8
      94:	00005917 	andeq	r5, r0, r7, lsl r9
      98:	00230200 	eoreq	r0, r3, r0, lsl #4
      9c:	4c41560a 	mcrrmi	6, 0, r5, r1, cr10
      a0:	59180100 	ldmdbpl	r8, {r8}
      a4:	02000000 	andeq	r0, r0, #0
      a8:	430a0423 	movwmi	r0, #42019	; 0xa423
      ac:	01004c54 	tsteq	r0, r4, asr ip
      b0:	00005919 	andeq	r5, r0, r9, lsl r9
      b4:	08230200 	stmdaeq	r3!, {r9}
      b8:	494c430a 	stmdbmi	ip, {r1, r3, r8, r9, lr}^
      bc:	591a0100 	ldmdbpl	sl, {r8}
      c0:	02000000 	andeq	r0, r0, #0
      c4:	520a0c23 	andpl	r0, sl, #8960	; 0x2300
      c8:	01005349 	tsteq	r0, r9, asr #6
      cc:	0000591b 	andeq	r5, r0, fp, lsl r9
      d0:	10230200 	eorne	r0, r3, r0, lsl #4
      d4:	53494d0a 	movtpl	r4, #40202	; 0x9d0a
      d8:	591c0100 	ldmdbpl	ip, {r8}
      dc:	02000000 	andeq	r0, r0, #0
      e0:	520a1423 	andpl	r1, sl, #587202560	; 0x23000000
      e4:	0100444c 	tsteq	r0, ip, asr #8
      e8:	0000591d 	andeq	r5, r0, sp, lsl r9
      ec:	18230200 	stmdane	r3!, {r9}
      f0:	5649440a 	strbpl	r4, [r9], -sl, lsl #8
      f4:	591e0100 	ldmdbpl	lr, {r8}
      f8:	02000000 	andeq	r0, r0, #0
      fc:	430a1c23 	movwmi	r1, #44067	; 0xac23
     100:	0100544e 	tsteq	r0, lr, asr #8
     104:	0000591f 	andeq	r5, r0, pc, lsl r9
     108:	20230200 	eorcs	r0, r3, r0, lsl #4
     10c:	01990400 	orrseq	r0, r9, r0, lsl #8
     110:	20010000 	andcs	r0, r1, r0
     114:	00000082 	andeq	r0, r0, r2, lsl #1
     118:	01c0010b 	biceq	r0, r0, fp, lsl #2
     11c:	37010000 	strcc	r0, [r1, -r0]
     120:	00007501 	andeq	r7, r0, r1, lsl #10
     124:	01000000 	mrseq	r0, (UNDEF: 0)
     128:	01024000 	mrseq	r4, (UNDEF: 2)
     12c:	00000000 	andeq	r0, r0, r0
     130:	016f0100 	cmneq	pc, r0, lsl #2
     134:	2a0c0000 	bcs	30013c <WriteSemaphore+0x2ea880>
     138:	01000001 	tsteq	r0, r1
     13c:	00007537 	andeq	r7, r0, r7, lsr r5
     140:	6c910200 	lfmvs	f0, 4, [r1], {0}
     144:	0000050c 	andeq	r0, r0, ip, lsl #10
     148:	2f370100 	svccs	0x00370100
     14c:	02000000 	andeq	r0, r0, #0
     150:	170c6891 			; <UNDEFINED> instruction: 0x170c6891
     154:	01000001 	tsteq	r0, r1
     158:	00004c37 	andeq	r4, r0, r7, lsr ip
     15c:	64910200 	ldrvs	r0, [r1], #512	; 0x200
     160:	0000a20d 	andeq	sl, r0, sp, lsl #4
     164:	75390100 	ldrvc	r0, [r9, #-256]!	; 0x100
     168:	02000000 	andeq	r0, r0, #0
     16c:	0e007491 	mcreq	4, 0, r7, cr0, cr1, {4}
     170:	0001ac01 	andeq	sl, r1, r1, lsl #24
     174:	01820100 	orreq	r0, r2, r0, lsl #2
     178:	00000060 	andeq	r0, r0, r0, rrx
     17c:	00010240 	andeq	r0, r1, r0, asr #4
     180:	0001025c 	andeq	r0, r1, ip, asr r2
     184:	0000002c 	andeq	r0, r0, ip, lsr #32
     188:	e1010f01 	tst	r1, r1, lsl #30
     18c:	01000000 	mrseq	r0, (UNDEF: 0)
     190:	025c0190 	subseq	r0, ip, #36	; 0x24
     194:	02700001 	rsbseq	r0, r0, #1
     198:	00580001 	subseq	r0, r8, r1
     19c:	10010000 	andne	r0, r1, r0
     1a0:	00010501 	andeq	r0, r1, r1, lsl #10
     1a4:	019d0100 	orrseq	r0, sp, r0, lsl #2
     1a8:	00010270 	andeq	r0, r1, r0, ror r2
     1ac:	000102a8 	andeq	r0, r1, r8, lsr #5
     1b0:	00000084 	andeq	r0, r0, r4, lsl #1
     1b4:	0001d601 	andeq	sp, r1, r1, lsl #12
     1b8:	00000c00 	andeq	r0, r0, r0, lsl #24
     1bc:	9d010000 	stcls	0, cr0, [r1, #-0]
     1c0:	00000021 	andeq	r0, r0, r1, lsr #32
     1c4:	0c749102 	ldfeqp	f1, [r4], #-8
     1c8:	0000007a 	andeq	r0, r0, sl, ror r0
     1cc:	004c9d01 	subeq	r9, ip, r1, lsl #26
     1d0:	91020000 	mrsls	r0, (UNDEF: 2)
     1d4:	63110070 	tstvs	r1, #112	; 0x70
     1d8:	01000000 	mrseq	r0, (UNDEF: 0)
     1dc:	02a801ab 	adceq	r0, r8, #-1073741782	; 0xc000002a
     1e0:	035c0001 	cmpeq	ip, #1
     1e4:	00b00001 	adcseq	r0, r0, r1
     1e8:	59010000 	stmdbpl	r1, {}	; <UNPREDICTABLE>
     1ec:	0d000002 	stceq	0, cr0, [r0, #-8]
     1f0:	000001d6 	ldrdeq	r0, [r0], -r6
     1f4:	0059ad01 	subseq	sl, r9, r1, lsl #26
     1f8:	91020000 	mrsls	r0, (UNDEF: 2)
     1fc:	f3011274 	vqsub.u8	<illegal reg q0.5>, <illegal reg q0.5>, q10
     200:	01000000 	mrseq	r0, (UNDEF: 0)
     204:	000021bb 			; <UNDEFINED> instruction: 0x000021bb
     208:	02100100 	andseq	r0, r0, #0
     20c:	00130000 	andseq	r0, r3, r0
     210:	01800112 	orreq	r0, r0, r2, lsl r1
     214:	bc010000 	stclt	0, cr0, [r1], {-0}
     218:	00000021 	andeq	r0, r0, r1, lsr #32
     21c:	00022301 	andeq	r2, r2, r1, lsl #6
     220:	12001300 	andne	r1, r0, #0
     224:	00008101 	andeq	r8, r0, r1, lsl #2
     228:	21bd0100 			; <UNDEFINED> instruction: 0x21bd0100
     22c:	01000000 	mrseq	r0, (UNDEF: 0)
     230:	00000236 	andeq	r0, r0, r6, lsr r2
     234:	01120013 	tsteq	r2, r3, lsl r0
     238:	000000cf 	andeq	r0, r0, pc, asr #1
     23c:	0021bf01 	eoreq	fp, r1, r1, lsl #30
     240:	49010000 	stmdbmi	r1, {}	; <UNPREDICTABLE>
     244:	13000002 	movwne	r0, #2
     248:	92011400 	andls	r1, r1, #0
     24c:	01000000 	mrseq	r0, (UNDEF: 0)
     250:	000021c8 	andeq	r2, r0, r8, asr #3
     254:	00130100 	andseq	r0, r3, r0, lsl #2
     258:	01240d00 	teqeq	r4, r0, lsl #26
     25c:	22010000 	andcs	r0, r1, #0
     260:	0000026a 	andeq	r0, r0, sl, ror #4
     264:	41c00305 	bicmi	r0, r0, r5, lsl #6
     268:	6f150001 	svcvs	0x00150001
     26c:	05000002 	streq	r0, [r0, #-2]
     270:	00027504 	andeq	r7, r2, r4, lsl #10
     274:	010d1600 	tsteq	sp, r0, lsl #12
     278:	b3000000 	movwlt	r0, #0
     27c:	02000001 	andeq	r0, r0, #1
     280:	00014800 	andeq	r4, r1, r0, lsl #16
     284:	37010400 	strcc	r0, [r1, -r0, lsl #8]
     288:	01000001 	tsteq	r0, r1
     28c:	000001e5 	andeq	r0, r0, r5, ror #3
     290:	0001035c 	andeq	r0, r1, ip, asr r3
     294:	000105ec 	andeq	r0, r1, ip, ror #11
     298:	00000111 	andeq	r0, r0, r1, lsl r1
     29c:	69050402 	stmdbvs	r5, {r1, sl}
     2a0:	0300746e 	movweq	r7, #1134	; 0x46e
     2a4:	068a0704 	streq	r0, [sl], r4, lsl #14
     2a8:	04030000 	streq	r0, [r3], #-0
     2ac:	00068507 	andeq	r8, r6, r7, lsl #10
     2b0:	05040300 	streq	r0, [r4, #-768]	; 0x300
     2b4:	0000065b 	andeq	r0, r0, fp, asr r6
     2b8:	027f0104 	rsbseq	r0, pc, #1
     2bc:	33010000 	movwcc	r0, #4096	; 0x1000
     2c0:	01035c01 	tsteq	r3, r1, lsl #24
     2c4:	0103f000 	mrseq	pc, (UNDEF: 3)	; <UNPREDICTABLE>
     2c8:	0000dc00 	andeq	sp, r0, r0, lsl #24
     2cc:	007c0100 	rsbseq	r0, ip, r0, lsl #2
     2d0:	84050000 	strhi	r0, [r5], #-0
     2d4:	cc000103 	stfgts	f0, [r0], {3}
     2d8:	06000103 	streq	r0, [r0], -r3, lsl #2
     2dc:	00000272 	andeq	r0, r0, r2, ror r2
     2e0:	007c4601 	rsbseq	r4, ip, r1, lsl #12
     2e4:	01010000 	mrseq	r0, (UNDEF: 1)
     2e8:	0002a806 	andeq	sl, r2, r6, lsl #16
     2ec:	88460100 	stmdahi	r6, {r8}^
     2f0:	01000000 	mrseq	r0, (UNDEF: 0)
     2f4:	07000001 	streq	r0, [r0, -r1]
     2f8:	00000081 	andeq	r0, r0, r1, lsl #1
     2fc:	00870408 	addeq	r0, r7, r8, lsl #8
     300:	07090000 	streq	r0, [r9, -r0]
     304:	0000002f 	andeq	r0, r0, pc, lsr #32
     308:	023d010a 	eorseq	r0, sp, #-2147483646	; 0x80000002
     30c:	5a010000 	bpl	40314 <WriteSemaphore+0x2aa58>
     310:	0103f001 	tsteq	r3, r1
     314:	0104a000 	mrseq	sl, (UNDEF: 4)
     318:	007d0200 	rsbseq	r0, sp, r0, lsl #4
     31c:	0000f301 	andeq	pc, r0, r1, lsl #6
     320:	03f40b00 	mvnseq	r0, #0
     324:	044c0001 	strbeq	r0, [ip], #-1
     328:	00ce0001 	sbceq	r0, lr, r1
     32c:	72060000 	andvc	r0, r6, #0
     330:	01000002 	tsteq	r0, r2
     334:	00007c62 	andeq	r7, r0, r2, ror #24
     338:	06010100 	streq	r0, [r1], -r0, lsl #2
     33c:	000002a8 	andeq	r0, r0, r8, lsr #5
     340:	00886201 	addeq	r6, r8, r1, lsl #4
     344:	01010000 	mrseq	r0, (UNDEF: 1)
     348:	04500500 	ldrbeq	r0, [r0], #-1280	; 0x500
     34c:	04980001 	ldreq	r0, [r8], #1
     350:	72060001 	andvc	r0, r6, #1
     354:	01000002 	tsteq	r0, r2
     358:	00007c68 	andeq	r7, r0, r8, ror #24
     35c:	06010100 	streq	r0, [r1], -r0, lsl #2
     360:	000002a8 	andeq	r0, r0, r8, lsr #5
     364:	00886801 	addeq	r6, r8, r1, lsl #16
     368:	01010000 	mrseq	r0, (UNDEF: 1)
     36c:	010c0000 	mrseq	r0, (UNDEF: 12)
     370:	00000251 	andeq	r0, r0, r1, asr r2
     374:	a0017f01 	andge	r7, r1, r1, lsl #30
     378:	4c000104 	stfmis	f0, [r0], {4}
     37c:	02000105 	andeq	r0, r0, #1073741825	; 0x40000001
     380:	5901007d 	stmdbpl	r1, {r0, r2, r3, r4, r5, r6}
     384:	0b000001 	bleq	390 <_start-0x7c70>
     388:	000104a0 	andeq	r0, r1, r0, lsr #9
     38c:	000104f8 	strdeq	r0, [r1], -r8
     390:	00000134 	andeq	r0, r0, r4, lsr r1
     394:	00027206 	andeq	r7, r2, r6, lsl #4
     398:	7c800100 	stfvcs	f0, [r0], {0}
     39c:	01000000 	mrseq	r0, (UNDEF: 0)
     3a0:	02a80601 	adceq	r0, r8, #1048576	; 0x100000
     3a4:	80010000 	andhi	r0, r1, r0
     3a8:	00000088 	andeq	r0, r0, r8, lsl #1
     3ac:	05000101 	streq	r0, [r0, #-257]	; 0x101
     3b0:	000104fc 	strdeq	r0, [r1], -ip
     3b4:	00010544 	andeq	r0, r1, r4, asr #10
     3b8:	00027206 	andeq	r7, r2, r6, lsl #4
     3bc:	7c820100 	stfvcs	f0, [r2], {0}
     3c0:	01000000 	mrseq	r0, (UNDEF: 0)
     3c4:	02a80601 	adceq	r0, r8, #1048576	; 0x100000
     3c8:	82010000 	andhi	r0, r1, #0
     3cc:	00000088 	andeq	r0, r0, r8, lsl #1
     3d0:	00000101 	andeq	r0, r0, r1, lsl #2
     3d4:	025f010d 	subseq	r0, pc, #1073741827	; 0x40000003
     3d8:	ac010000 	stcge	0, cr0, [r1], {-0}
     3dc:	01054c01 	tsteq	r5, r1, lsl #24
     3e0:	01058c00 	tsteq	r5, r0, lsl #24
     3e4:	00010800 	andeq	r0, r1, r0, lsl #16
     3e8:	010d0100 	mrseq	r0, (UNDEF: 29)
     3ec:	00000296 	muleq	r0, r6, r2
     3f0:	8c01bc01 	stchi	12, cr11, [r1], {1}
     3f4:	ec000105 	stfs	f0, [r0], {5}
     3f8:	34000105 	strcc	r0, [r0], #-261	; 0x105
     3fc:	01000001 	tsteq	r0, r1
     400:	0002a80e 	andeq	sl, r2, lr, lsl #16
     404:	88230100 	stmdahi	r3!, {r8}
     408:	01000000 	mrseq	r0, (UNDEF: 0)
     40c:	44d00305 	ldrbmi	r0, [r0], #773	; 0x305
     410:	320e0001 	andcc	r0, lr, #1
     414:	01000002 	tsteq	r0, r2
     418:	00002131 	andeq	r2, r0, r1, lsr r1
     41c:	03050100 	movweq	r0, #20736	; 0x5100
     420:	000144e0 	andeq	r4, r1, r0, ror #9
     424:	00027206 	andeq	r7, r2, r6, lsl #4
     428:	7c820100 	stfvcs	f0, [r2], {0}
     42c:	01000000 	mrseq	r0, (UNDEF: 0)
     430:	04aa0001 	strteq	r0, [sl], #1
     434:	00020000 	andeq	r0, r2, r0
     438:	00000221 	andeq	r0, r0, r1, lsr #4
     43c:	01370104 	teqeq	r7, r4, lsl #2
     440:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
     444:	f4000005 	vst4.8	{d0-d3}, [r0], r5
     448:	58000105 	stmdapl	r0, {r0, r2, r8}
     44c:	bb00010d 	bllt	888 <_start-0x7778>
     450:	02000001 	andeq	r0, r0, #1
     454:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     458:	04030074 	streq	r0, [r3], #-116	; 0x74
     45c:	00068a07 	andeq	r8, r6, r7, lsl #20
     460:	05040400 	streq	r0, [r4, #-1024]	; 0x400
     464:	00000056 	andeq	r0, r0, r6, asr r0
     468:	003c1f03 	eorseq	r1, ip, r3, lsl #30
     46c:	04030000 	streq	r0, [r3], #-0
     470:	00068507 	andeq	r8, r6, r7, lsl #10
     474:	05040300 	streq	r0, [r4, #-768]	; 0x300
     478:	0000065b 	andeq	r0, r0, fp, asr r6
     47c:	00036006 	andeq	r6, r3, r6
     480:	69021400 	stmdbvs	r2, {sl, ip}
     484:	0000009d 	muleq	r0, sp, r0
     488:	00032107 	andeq	r2, r3, r7, lsl #2
     48c:	316b0200 	cmncc	fp, r0, lsl #4
     490:	02000000 	andeq	r0, r0, #0
     494:	de070023 	cdple	0, 0, cr0, cr7, cr3, {1}
     498:	02000004 	andeq	r0, r0, #4
     49c:	00009d6c 	andeq	r9, r0, ip, ror #26
     4a0:	04230200 	strteq	r0, [r3], #-512	; 0x200
     4a4:	0003d007 	andeq	sp, r3, r7
     4a8:	9d6d0200 	sfmls	f0, 2, [sp, #-0]
     4ac:	02000000 	andeq	r0, r0, #0
     4b0:	35070823 	strcc	r0, [r7, #-2083]	; 0x823
     4b4:	02000003 	andeq	r0, r0, #3
     4b8:	00002f6e 	andeq	r2, r0, lr, ror #30
     4bc:	0c230200 	sfmeq	f0, 4, [r3], #-0
     4c0:	0002ec07 	andeq	lr, r2, r7, lsl #24
     4c4:	2f6f0200 	svccs	0x006f0200
     4c8:	02000000 	andeq	r0, r0, #0
     4cc:	08001023 	stmdaeq	r0, {r0, r1, r5, ip}
     4d0:	0000a304 	andeq	sl, r0, r4, lsl #6
     4d4:	004a0900 	subeq	r0, sl, r0, lsl #18
     4d8:	10050000 	andne	r0, r5, r0
     4dc:	02000005 	andeq	r0, r0, #5
     4e0:	00004a71 	andeq	r4, r0, r1, ror sl
     4e4:	058d0600 	streq	r0, [sp, #1536]	; 0x600
     4e8:	020c0000 	andeq	r0, ip, #0
     4ec:	0000ea73 	andeq	lr, r0, r3, ror sl
     4f0:	03210700 	teqeq	r1, #0
     4f4:	75020000 	strvc	r0, [r2, #-0]
     4f8:	00000031 	andeq	r0, r0, r1, lsr r0
     4fc:	07002302 	streq	r2, [r0, -r2, lsl #6]
     500:	000004de 	ldrdeq	r0, [r0], -lr
     504:	009d7602 	addseq	r7, sp, r2, lsl #12
     508:	23020000 	movwcs	r0, #8192	; 0x2000
     50c:	03d00704 	bicseq	r0, r0, #1048576	; 0x100000
     510:	77020000 	strvc	r0, [r2, -r0]
     514:	0000009d 	muleq	r0, sp, r0
     518:	00082302 	andeq	r2, r8, r2, lsl #6
     51c:	00045f05 	andeq	r5, r4, r5, lsl #30
     520:	b3790200 	cmnlt	r9, #0
     524:	06000000 	streq	r0, [r0], -r0
     528:	0000059d 	muleq	r0, sp, r5
     52c:	2c7e0214 	lfmcs	f0, 2, [lr], #-80	; 0xffffffb0
     530:	07000001 	streq	r0, [r0, -r1]
     534:	0000047e 	andeq	r0, r0, lr, ror r4
     538:	012c8002 	teqeq	ip, r2
     53c:	23020000 	movwcs	r0, #8192	; 0x2000
     540:	03190700 	tsteq	r9, #0
     544:	81020000 	mrshi	r0, (UNDEF: 2)
     548:	00000131 	andeq	r0, r0, r1, lsr r1
     54c:	07042302 	streq	r2, [r4, -r2, lsl #6]
     550:	0000032c 	andeq	r0, r0, ip, lsr #6
     554:	013c8202 	teqeq	ip, r2, lsl #4
     558:	23020000 	movwcs	r0, #8192	; 0x2000
     55c:	3c090008 	stccc	0, cr0, [r9], {8}
     560:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     564:	00013704 	andeq	r3, r1, r4, lsl #14
     568:	00a80900 	adceq	r0, r8, r0, lsl #18
     56c:	ea090000 	b	240574 <WriteSemaphore+0x22acb8>
     570:	05000000 	streq	r0, [r0, #-0]
     574:	000006f2 	strdeq	r0, [r0], -r2
     578:	00f58302 	rscseq	r8, r5, r2, lsl #6
     57c:	01030000 	mrseq	r0, (UNDEF: 3)
     580:	00067406 	andeq	r7, r6, r6, lsl #8
     584:	07020300 	streq	r0, [r2, -r0, lsl #6]
     588:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
     58c:	0e070403 	cdpeq	4, 0, cr0, cr7, cr3, {0}
     590:	05000001 	streq	r0, [r0, #-1]
     594:	000004b2 			; <UNDEFINED> instruction: 0x000004b2
     598:	002f5304 	eoreq	r5, pc, r4, lsl #6
     59c:	01050000 	mrseq	r0, (UNDEF: 5)
     5a0:	04000006 	streq	r0, [r0], #-6
     5a4:	00017756 	andeq	r7, r1, r6, asr r7
     5a8:	7d040800 	stcvc	8, cr0, [r4, #-0]
     5ac:	0a000001 	beq	5b8 <_start-0x7a48>
     5b0:	00018e01 	andeq	r8, r1, r1, lsl #28
     5b4:	01610b00 	cmneq	r1, r0, lsl #22
     5b8:	3c0b0000 	stccc	0, cr0, [fp], {-0}
     5bc:	00000000 	andeq	r0, r0, r0
     5c0:	0003eb06 	andeq	lr, r3, r6, lsl #22
     5c4:	58043800 	stmdapl	r4, {fp, ip, sp}
     5c8:	000001ef 	andeq	r0, r0, pc, ror #3
     5cc:	0002f807 	andeq	pc, r2, r7, lsl #16
     5d0:	6c5a0400 	cfldrdvs	mvd0, [sl], {-0}
     5d4:	02000001 	andeq	r0, r0, #1
     5d8:	cd070023 	stcgt	0, cr0, [r7, #-140]	; 0xffffff74
     5dc:	04000005 	streq	r0, [r0], #-5
     5e0:	0000a85b 	andeq	sl, r0, fp, asr r8
     5e4:	04230200 	strteq	r0, [r3], #-512	; 0x200
     5e8:	0005de07 	andeq	sp, r5, r7, lsl #28
     5ec:	a85c0400 	ldmdage	ip, {sl}^
     5f0:	02000000 	andeq	r0, r0, #0
     5f4:	a7071823 	strge	r1, [r7, -r3, lsr #16]
     5f8:	04000004 	streq	r0, [r0], #-4
     5fc:	00003c5d 	andeq	r3, r0, sp, asr ip
     600:	2c230200 	sfmcs	f0, 4, [r3], #-0
     604:	00045707 	andeq	r5, r4, r7, lsl #14
     608:	3c5e0400 	cfldrdcc	mvd0, [lr], {-0}
     60c:	02000000 	andeq	r0, r0, #0
     610:	39073023 	stmdbcc	r7, {r0, r1, r5, ip, sp}
     614:	04000005 	streq	r0, [r0], #-5
     618:	0001535f 	andeq	r5, r1, pc, asr r3
     61c:	34230200 	strtcc	r0, [r3], #-512	; 0x200
     620:	03c10500 	biceq	r0, r1, #0
     624:	60040000 	andvs	r0, r4, r0
     628:	0000018e 	andeq	r0, r0, lr, lsl #3
     62c:	046d010c 	strbteq	r0, [sp], #-268	; 0x10c
     630:	8a010000 	bhi	40638 <WriteSemaphore+0x2ad7c>
     634:	00004301 	andeq	r4, r0, r1, lsl #6
     638:	0105f400 	tsteq	r5, r0, lsl #8
     63c:	01075c00 	tsteq	r7, r0, lsl #24
     640:	00016000 	andeq	r6, r1, r0
     644:	025f0100 	subseq	r0, pc, #0
     648:	db0d0000 	blle	340650 <WriteSemaphore+0x32ad94>
     64c:	01000003 	tsteq	r0, r3
     650:	00016c8a 	andeq	r6, r1, sl, lsl #25
     654:	6c910200 	lfmvs	f0, 4, [r1], {0}
     658:	0004a70d 	andeq	sl, r4, sp, lsl #14
     65c:	3c8a0100 	stfccs	f0, [sl], {0}
     660:	02000000 	andeq	r0, r0, #0
     664:	570d6891 			; <UNDEFINED> instruction: 0x570d6891
     668:	01000004 	tsteq	r0, r4
     66c:	00003c8a 	andeq	r3, r0, sl, lsl #25
     670:	64910200 	ldrvs	r0, [r1], #512	; 0x200
     674:	00086e0e 	andeq	r6, r8, lr, lsl #28
     678:	438c0100 	orrmi	r0, ip, #0
     67c:	02000000 	andeq	r0, r0, #0
     680:	2d0e7491 	cfstrscs	mvf7, [lr, #-580]	; 0xfffffdbc
     684:	01000005 	tsteq	r0, r5
     688:	00025f8d 	andeq	r5, r2, sp, lsl #31
     68c:	70910200 	addsvc	r0, r1, r0, lsl #4
     690:	ef040800 	svc	0x00040800
     694:	0f000001 	svceq	0x00000001
     698:	0002d101 	andeq	sp, r2, r1, lsl #2
     69c:	01c30100 	biceq	r0, r3, r0, lsl #2
     6a0:	0001075c 	andeq	r0, r1, ip, asr r7
     6a4:	0001083c 	andeq	r0, r1, ip, lsr r8
     6a8:	0000018c 	andeq	r0, r0, ip, lsl #3
     6ac:	0002aa01 	andeq	sl, r2, r1, lsl #20
     6b0:	05bf0d00 	ldreq	r0, [pc, #3328]!	; 13b8 <_start-0x6c48>
     6b4:	c3010000 	movwgt	r0, #4096	; 0x1000
     6b8:	00000031 	andeq	r0, r0, r1, lsr r0
     6bc:	0d6c9102 	stfeqp	f1, [ip, #-8]!
     6c0:	000004e5 	andeq	r0, r0, r5, ror #9
     6c4:	02aac301 	adceq	ip, sl, #67108864	; 0x4000000
     6c8:	91020000 	mrsls	r0, (UNDEF: 2)
     6cc:	05040e68 	streq	r0, [r4, #-3688]	; 0xe68
     6d0:	c5010000 	strgt	r0, [r1, #-0]
     6d4:	00000031 	andeq	r0, r0, r1, lsr r0
     6d8:	00749102 	rsbseq	r9, r4, r2, lsl #2
     6dc:	01410408 	cmpeq	r1, r8, lsl #8
     6e0:	8e100000 	cdphi	0, 1, cr0, cr0, cr0, {0}
     6e4:	01000004 	tsteq	r0, r4
     6e8:	083c01e9 	ldmdaeq	ip!, {r0, r3, r5, r6, r7, r8}
     6ec:	09240001 	stmdbeq	r4!, {r0}
     6f0:	01b80001 			; <UNDEFINED> instruction: 0x01b80001
     6f4:	e2010000 	and	r0, r1, #0
     6f8:	11000002 	tstne	r0, r2
     6fc:	0001084c 	andeq	r0, r1, ip, asr #16
     700:	00010900 	andeq	r0, r1, r0, lsl #18
     704:	0002ba0e 	andeq	fp, r2, lr, lsl #20
     708:	5ff00100 	svcpl	0x00f00100
     70c:	02000002 	andeq	r0, r0, #2
     710:	00007491 	muleq	r0, r1, r4
     714:	0005ed12 	andeq	lr, r5, r2, lsl sp
     718:	01000100 	mrseq	r0, (UNDEF: 16)
     71c:	01092401 	tsteq	r9, r1, lsl #8
     720:	010afc00 	tsteq	sl, r0, lsl #24
     724:	0001e400 	andeq	lr, r1, r0, lsl #8
     728:	03250100 	teqeq	r5, #0
     72c:	c9130000 	ldmdbgt	r3, {}	; <UNPREDICTABLE>
     730:	01000003 	tsteq	r0, r3
     734:	025f0102 	subseq	r0, pc, #-2147483648	; 0x80000000
     738:	91020000 	mrsls	r0, (UNDEF: 2)
     73c:	09881170 	stmibeq	r8, {r4, r5, r6, r8, ip}
     740:	09b00001 	ldmibeq	r0!, {r0}
     744:	ca130001 	bgt	4c0750 <WriteSemaphore+0x4aae94>
     748:	01000002 	tsteq	r0, r2
     74c:	02aa010d 	adceq	r0, sl, #1073741827	; 0x40000003
     750:	91020000 	mrsls	r0, (UNDEF: 2)
     754:	14000074 	strne	r0, [r0], #-116	; 0x74
     758:	00051a01 	andeq	r1, r5, r1, lsl #20
     75c:	013a0100 	teqeq	sl, r0, lsl #2
     760:	010afc01 	tsteq	sl, r1, lsl #24
     764:	010c2800 	tsteq	ip, r0, lsl #16
     768:	00021000 	andeq	r1, r2, r0
     76c:	035a0100 	cmpeq	sl, #0
     770:	64110000 	ldrvs	r0, [r1], #-0
     774:	dc00010b 	stfles	f0, [r0], {11}
     778:	1300010b 	movwne	r0, #267	; 0x10b
     77c:	0000036b 	andeq	r0, r0, fp, ror #6
     780:	5a014f01 	bpl	5438c <WriteSemaphore+0x3ead0>
     784:	02000003 	andeq	r0, r0, #3
     788:	00007491 	muleq	r0, r1, r4
     78c:	0002aa15 	andeq	sl, r2, r5, lsl sl
     790:	05a31200 	streq	r1, [r3, #512]!	; 0x200
     794:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
     798:	0c280101 	stfeqs	f0, [r8], #-4
     79c:	0ccc0001 	stcleq	0, cr0, [ip], {1}
     7a0:	023c0001 	eorseq	r0, ip, #1
     7a4:	89010000 	stmdbhi	r1, {}	; <UNPREDICTABLE>
     7a8:	13000003 	movwne	r0, #3
     7ac:	000004a7 	andeq	r0, r0, r7, lsr #9
     7b0:	3c015a01 	stccc	10, cr5, [r1], {1}
     7b4:	02000000 	andeq	r0, r0, #0
     7b8:	16007491 			; <UNDEFINED> instruction: 0x16007491
     7bc:	00040401 	andeq	r0, r4, r1, lsl #8
     7c0:	016c0100 	cmneq	ip, r0, lsl #2
     7c4:	00004301 	andeq	r4, r0, r1, lsl #6
     7c8:	010ccc00 	tsteq	ip, r0, lsl #24
     7cc:	010d5800 	tsteq	sp, r0, lsl #16
     7d0:	00026800 	andeq	r6, r2, r0, lsl #16
     7d4:	03d60100 	bicseq	r0, r6, #0
     7d8:	e5170000 	ldr	r0, [r7, #-0]
     7dc:	01000004 	tsteq	r0, r4
     7e0:	03d6016c 	bicseq	r0, r6, #27
     7e4:	91020000 	mrsls	r0, (UNDEF: 2)
     7e8:	02ba136c 	adcseq	r1, sl, #-1342177279	; 0xb0000001
     7ec:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
     7f0:	00025f01 	andeq	r5, r2, r1, lsl #30
     7f4:	70910200 	addsvc	r0, r1, r0, lsl #4
     7f8:	00086e13 	andeq	r6, r8, r3, lsl lr
     7fc:	016f0100 	cmneq	pc, r0, lsl #2
     800:	00000043 	andeq	r0, r0, r3, asr #32
     804:	00749102 	rsbseq	r9, r4, r2, lsl #2
     808:	03dc0408 	bicseq	r0, ip, #134217728	; 0x8000000
     80c:	41150000 	tstmi	r5, r0
     810:	18000001 	stmdane	r0, {r0}
     814:	00000141 	andeq	r0, r0, r1, asr #2
     818:	000003f1 	strdeq	r0, [r0], -r1
     81c:	00015a19 	andeq	r5, r1, r9, lsl sl
     820:	0e000100 	adfeqs	f0, f0, f0
     824:	00000441 	andeq	r0, r0, r1, asr #8
     828:	03e15101 	mvneq	r5, #1073741824	; 0x40000000
     82c:	03050000 	movweq	r0, #20480	; 0x5000
     830:	000144e4 	andeq	r4, r1, r4, ror #9
     834:	0003930e 	andeq	r9, r3, lr, lsl #6
     838:	41520100 	cmpmi	r2, r0, lsl #2
     83c:	05000001 	streq	r0, [r0, #-1]
     840:	01450c03 	cmpeq	r5, r3, lsl #24
     844:	03aa0e00 			; <UNDEFINED> instruction: 0x03aa0e00
     848:	53010000 	movwpl	r0, #4096	; 0x1000
     84c:	00000141 	andeq	r0, r0, r1, asr #2
     850:	45200305 	strmi	r0, [r0, #-773]!	; 0x305
     854:	410e0001 	tstmi	lr, r1
     858:	01000005 	tsteq	r0, r5
     85c:	0002aa54 	andeq	sl, r2, r4, asr sl
     860:	34030500 	strcc	r0, [r3], #-1280	; 0x500
     864:	0e000145 	adfeqsm	f0, f0, f5
     868:	00000422 	andeq	r0, r0, r2, lsr #8
     86c:	02aa5501 	adceq	r5, sl, #4194304	; 0x400000
     870:	03050000 	movweq	r0, #20480	; 0x5000
     874:	00014538 	andeq	r4, r1, r8, lsr r5
     878:	0004c30e 	andeq	ip, r4, lr, lsl #6
     87c:	41560100 	cmpmi	r6, r0, lsl #2
     880:	05000001 	streq	r0, [r0, #-1]
     884:	01453c03 	cmpeq	r5, r3, lsl #24
     888:	03770e00 	cmneq	r7, #0
     88c:	5a010000 	bpl	40894 <WriteSemaphore+0x2afd8>
     890:	0000003c 	andeq	r0, r0, ip, lsr r0
     894:	45540305 	ldrbmi	r0, [r4, #-773]	; 0x305
     898:	4c0e0001 	stcmi	0, cr0, [lr], {1}
     89c:	01000003 	tsteq	r0, r3
     8a0:	0000315b 	andeq	r3, r0, fp, asr r1
     8a4:	58030500 	stmdapl	r3, {r8, sl}
     8a8:	0e000145 	adfeqsm	f0, f0, f5
     8ac:	0000033d 	andeq	r0, r0, sp, lsr r3
     8b0:	00315b01 	eorseq	r5, r1, r1, lsl #22
     8b4:	03050000 	movweq	r0, #20480	; 0x5000
     8b8:	0001455c 	andeq	r4, r1, ip, asr r5
     8bc:	00030c0e 	andeq	r0, r3, lr, lsl #24
     8c0:	315b0100 	cmpcc	fp, r0, lsl #2
     8c4:	05000000 	streq	r0, [r0, #-0]
     8c8:	01456003 	cmpeq	r5, r3
     8cc:	04f11a00 	ldrbteq	r1, [r1], #2560	; 0xa00
     8d0:	59010000 	stmdbpl	r1, {}	; <UNPREDICTABLE>
     8d4:	0000025f 	andeq	r0, r0, pc, asr r2
     8d8:	50030501 	andpl	r0, r3, r1, lsl #10
     8dc:	00000145 	andeq	r0, r0, r5, asr #2
     8e0:	000002aa 	andeq	r0, r0, sl, lsr #5
     8e4:	03a60002 			; <UNDEFINED> instruction: 0x03a60002
     8e8:	01040000 	mrseq	r0, (UNDEF: 4)
     8ec:	00000137 	andeq	r0, r0, r7, lsr r1
     8f0:	0006c001 	andeq	ip, r6, r1
     8f4:	010d5800 	tsteq	sp, r0, lsl #16
     8f8:	010fe000 	mrseq	lr, CPSR
     8fc:	00039500 	andeq	r9, r3, r0, lsl #10
     900:	07040200 	streq	r0, [r4, -r0, lsl #4]
     904:	0000068a 	andeq	r0, r0, sl, lsl #13
     908:	74060102 	strvc	r0, [r6], #-258	; 0x102
     90c:	02000006 	andeq	r0, r0, #6
     910:	06720801 	ldrbteq	r0, [r2], -r1, lsl #16
     914:	02020000 	andeq	r0, r2, #0
     918:	00062e05 	andeq	r2, r6, r5, lsl #28
     91c:	07020200 	streq	r0, [r2, -r0, lsl #4]
     920:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
     924:	69050403 	stmdbvs	r5, {r0, r1, sl}
     928:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
     92c:	06560508 	ldrbeq	r0, [r6], -r8, lsl #10
     930:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
     934:	00068007 	andeq	r8, r6, r7
     938:	05040200 	streq	r0, [r4, #-512]	; 0x200
     93c:	0000065b 	andeq	r0, r0, fp, asr r6
     940:	0e070402 	cdpeq	4, 0, cr0, cr7, cr2, {0}
     944:	04000001 	streq	r0, [r0], #-1
     948:	07040204 	streq	r0, [r4, -r4, lsl #4]
     94c:	00000685 	andeq	r0, r0, r5, lsl #13
     950:	7b080102 	blvc	200d60 <WriteSemaphore+0x1eb4a4>
     954:	05000006 	streq	r0, [r0, #-6]
     958:	00000056 	andeq	r0, r0, r6, asr r0
     95c:	00691f03 	rsbeq	r1, r9, r3, lsl #30
     960:	60060000 	andvs	r0, r6, r0
     964:	14000003 	strne	r0, [r0], #-3
     968:	00d56902 	sbcseq	r6, r5, r2, lsl #18
     96c:	21070000 	mrscs	r0, (UNDEF: 7)
     970:	02000003 	andeq	r0, r0, #3
     974:	0000776b 	andeq	r7, r0, fp, ror #14
     978:	00230200 	eoreq	r0, r3, r0, lsl #4
     97c:	0004de07 	andeq	sp, r4, r7, lsl #28
     980:	d56c0200 	strble	r0, [ip, #-512]!	; 0x200
     984:	02000000 	andeq	r0, r0, #0
     988:	d0070423 	andle	r0, r7, r3, lsr #8
     98c:	02000003 	andeq	r0, r0, #3
     990:	0000d56d 	andeq	sp, r0, sp, ror #10
     994:	08230200 	stmdaeq	r3!, {r9}
     998:	00033507 	andeq	r3, r3, r7, lsl #10
     99c:	676e0200 	strbvs	r0, [lr, -r0, lsl #4]!
     9a0:	02000000 	andeq	r0, r0, #0
     9a4:	ec070c23 	stc	12, cr0, [r7], {35}	; 0x23
     9a8:	02000002 	andeq	r0, r0, #2
     9ac:	0000676f 	andeq	r6, r0, pc, ror #14
     9b0:	10230200 	eorne	r0, r3, r0, lsl #4
     9b4:	db040800 	blle	1029bc <WriteSemaphore+0xed100>
     9b8:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     9bc:	00000082 	andeq	r0, r0, r2, lsl #1
     9c0:	00051005 	andeq	r1, r5, r5
     9c4:	82710200 	rsbshi	r0, r1, #0
     9c8:	06000000 	streq	r0, [r0], -r0
     9cc:	0000058d 	andeq	r0, r0, sp, lsl #11
     9d0:	2273020c 	rsbscs	r0, r3, #-1073741824	; 0xc0000000
     9d4:	07000001 	streq	r0, [r0, -r1]
     9d8:	00000321 	andeq	r0, r0, r1, lsr #6
     9dc:	00777502 	rsbseq	r7, r7, r2, lsl #10
     9e0:	23020000 	movwcs	r0, #8192	; 0x2000
     9e4:	04de0700 	ldrbeq	r0, [lr], #1792	; 0x700
     9e8:	76020000 	strvc	r0, [r2], -r0
     9ec:	000000d5 	ldrdeq	r0, [r0], -r5
     9f0:	07042302 	streq	r2, [r4, -r2, lsl #6]
     9f4:	000003d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     9f8:	00d57702 	sbcseq	r7, r5, r2, lsl #14
     9fc:	23020000 	movwcs	r0, #8192	; 0x2000
     a00:	5f050008 	svcpl	0x00050008
     a04:	02000004 	andeq	r0, r0, #4
     a08:	0000eb79 	andeq	lr, r0, r9, ror fp
     a0c:	059d0600 	ldreq	r0, [sp, #1536]	; 0x600
     a10:	02140000 	andseq	r0, r4, #0
     a14:	0001647e 	andeq	r6, r1, lr, ror r4
     a18:	047e0700 	ldrbteq	r0, [lr], #-1792	; 0x700
     a1c:	80020000 	andhi	r0, r2, r0
     a20:	00000164 	andeq	r0, r0, r4, ror #2
     a24:	07002302 	streq	r2, [r0, -r2, lsl #6]
     a28:	00000319 	andeq	r0, r0, r9, lsl r3
     a2c:	01698102 	cmneq	r9, r2, lsl #2
     a30:	23020000 	movwcs	r0, #8192	; 0x2000
     a34:	032c0704 	teqeq	ip, #1048576	; 0x100000
     a38:	82020000 	andhi	r0, r2, #0
     a3c:	00000174 	andeq	r0, r0, r4, ror r1
     a40:	00082302 	andeq	r2, r8, r2, lsl #6
     a44:	00006909 	andeq	r6, r0, r9, lsl #18
     a48:	6f040800 	svcvs	0x00040800
     a4c:	09000001 	stmdbeq	r0, {r0}
     a50:	000000e0 	andeq	r0, r0, r0, ror #1
     a54:	00012209 	andeq	r2, r1, r9, lsl #4
     a58:	06f20500 	ldrbteq	r0, [r2], r0, lsl #10
     a5c:	83020000 	movwhi	r0, #8192	; 0x2000
     a60:	0000012d 	andeq	r0, r0, sp, lsr #2
     a64:	0612010a 	ldreq	r0, [r2], -sl, lsl #2
     a68:	4c010000 	stcmi	0, cr0, [r1], {-0}
     a6c:	010d5801 	tsteq	sp, r1, lsl #16
     a70:	010dbc00 	tsteq	sp, r0, lsl #24
     a74:	00029400 	andeq	r9, r2, r0, lsl #8
     a78:	01ad0100 			; <UNDEFINED> instruction: 0x01ad0100
     a7c:	f10b0000 			; <UNDEFINED> instruction: 0xf10b0000
     a80:	01000006 	tsteq	r0, r6
     a84:	0001ad4c 	andeq	sl, r1, ip, asr #26
     a88:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     a8c:	79040800 	stmdbvc	r4, {fp}
     a90:	0a000001 	beq	a9c <_start-0x7564>
     a94:	0006ff01 	andeq	pc, r6, r1, lsl #30
     a98:	01600100 	cmneq	r0, r0, lsl #2
     a9c:	00010dbc 			; <UNDEFINED> instruction: 0x00010dbc
     aa0:	00010de4 	andeq	r0, r1, r4, ror #27
     aa4:	000002c0 	andeq	r0, r0, r0, asr #5
     aa8:	0001dc01 	andeq	sp, r1, r1, lsl #24
     aac:	06f80b00 	ldrbteq	r0, [r8], r0, lsl #22
     ab0:	60010000 	andvs	r0, r1, r0
     ab4:	000001dc 	ldrdeq	r0, [r0], -ip
     ab8:	00749102 	rsbseq	r9, r4, r2, lsl #2
     abc:	00e00408 	rsceq	r0, r0, r8, lsl #8
     ac0:	010a0000 	mrseq	r0, (UNDEF: 10)
     ac4:	000006a2 	andeq	r0, r0, r2, lsr #13
     ac8:	e4016701 	str	r6, [r1], #-1793	; 0x701
     acc:	7800010d 	stmdavc	r0, {r0, r2, r3, r8}
     ad0:	ec00010e 	stfs	f0, [r0], {14}
     ad4:	01000002 	tsteq	r0, r2
     ad8:	00000227 	andeq	r0, r0, r7, lsr #4
     adc:	0006f10b 	andeq	pc, r6, fp, lsl #2
     ae0:	ad670100 	stfgee	f0, [r7, #-0]
     ae4:	02000001 	andeq	r0, r0, #1
     ae8:	640b6c91 	strvs	r6, [fp], #-3217	; 0xc91
     aec:	01000006 	tsteq	r0, r6
     af0:	0001dc67 	andeq	sp, r1, r7, ror #24
     af4:	68910200 	ldmvs	r1, {r9}
     af8:	0003190c 	andeq	r1, r3, ip, lsl #18
     afc:	69690100 	stmdbvs	r9!, {r8}^
     b00:	02000001 	andeq	r0, r0, #1
     b04:	0a007491 	beq	1dd50 <WriteSemaphore+0x8494>
     b08:	00062201 	andeq	r2, r6, r1, lsl #4
     b0c:	017e0100 	cmneq	lr, r0, lsl #2
     b10:	00010e78 	andeq	r0, r1, r8, ror lr
     b14:	00010f4c 	andeq	r0, r1, ip, asr #30
     b18:	00000318 	andeq	r0, r0, r8, lsl r3
     b1c:	00027a01 	andeq	r7, r2, r1, lsl #20
     b20:	06f10b00 	ldrbteq	r0, [r1], r0, lsl #22
     b24:	7e010000 	cdpvc	0, 0, cr0, cr1, cr0, {0}
     b28:	000001ad 	andeq	r0, r0, sp, lsr #3
     b2c:	0b6c9102 	bleq	1b24f3c <WriteSemaphore+0x1b0f680>
     b30:	00000664 	andeq	r0, r0, r4, ror #12
     b34:	01dc7e01 	bicseq	r7, ip, r1, lsl #28
     b38:	91020000 	mrsls	r0, (UNDEF: 2)
     b3c:	06970c68 	ldreq	r0, [r7], r8, ror #24
     b40:	80010000 	andhi	r0, r1, r0
     b44:	00000169 	andeq	r0, r0, r9, ror #2
     b48:	0c749102 	ldfeqp	f1, [r4], #-8
     b4c:	00000644 	andeq	r0, r0, r4, asr #12
     b50:	00778101 	rsbseq	r8, r7, r1, lsl #2
     b54:	91020000 	mrsls	r0, (UNDEF: 2)
     b58:	010d0070 	tsteq	sp, r0, ror r0
     b5c:	00000638 	andeq	r0, r0, r8, lsr r6
     b60:	4c01b701 	stcmi	7, cr11, [r1], {1}
     b64:	e000010f 	and	r0, r0, pc, lsl #2
     b68:	4400010f 	strmi	r0, [r0], #-271	; 0x10f
     b6c:	01000003 	tsteq	r0, r3
     b70:	0006b10b 	andeq	fp, r6, fp, lsl #2
     b74:	dcb70100 	ldfles	f0, [r7]
     b78:	02000001 	andeq	r0, r0, #1
     b7c:	f10c6c91 			; <UNDEFINED> instruction: 0xf10c6c91
     b80:	01000006 	tsteq	r0, r6
     b84:	0001adb9 			; <UNDEFINED> instruction: 0x0001adb9
     b88:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     b8c:	07930000 	ldreq	r0, [r3, r0]
     b90:	00020000 	andeq	r0, r2, r0
     b94:	00000460 	andeq	r0, r0, r0, ror #8
     b98:	01370104 	teqeq	r7, r4, lsl #2
     b9c:	84010000 	strhi	r0, [r1], #-0
     ba0:	e0000009 	and	r0, r0, r9
     ba4:	9c00010f 	stflss	f0, [r0], {15}
     ba8:	bc00011b 	stflts	f0, [r0], {27}
     bac:	02000004 	andeq	r0, r0, #4
     bb0:	0000074f 	andeq	r0, r0, pc, asr #14
     bb4:	002cd502 	eoreq	sp, ip, r2, lsl #10
     bb8:	04030000 	streq	r0, [r3], #-0
     bbc:	00068a07 	andeq	r8, r6, r7, lsl #20
     bc0:	06010300 	streq	r0, [r1], -r0, lsl #6
     bc4:	00000674 	andeq	r0, r0, r4, ror r6
     bc8:	72080103 	andvc	r0, r8, #-1073741824	; 0xc0000000
     bcc:	03000006 	movweq	r0, #6
     bd0:	062e0502 	strteq	r0, [lr], -r2, lsl #10
     bd4:	02030000 	andeq	r0, r3, #0
     bd8:	0000b007 	andeq	fp, r0, r7
     bdc:	05040400 	streq	r0, [r4, #-1024]	; 0x400
     be0:	00746e69 	rsbseq	r6, r4, r9, ror #28
     be4:	56050803 	strpl	r0, [r5], -r3, lsl #16
     be8:	03000006 	movweq	r0, #6
     bec:	06800708 	streq	r0, [r0], r8, lsl #14
     bf0:	04030000 	streq	r0, [r3], #-0
     bf4:	00065b05 	andeq	r5, r6, r5, lsl #22
     bf8:	07040300 	streq	r0, [r4, -r0, lsl #6]
     bfc:	0000010e 	andeq	r0, r0, lr, lsl #2
     c00:	04030405 	streq	r0, [r3], #-1029	; 0x405
     c04:	00068507 	andeq	r8, r6, r7, lsl #10
     c08:	08010300 	stmdaeq	r1, {r8, r9}
     c0c:	0000067b 	andeq	r0, r0, fp, ror r6
     c10:	00005602 	andeq	r5, r0, r2, lsl #12
     c14:	741f0300 	ldrvc	r0, [pc], #-768	; c1c <_start-0x73e4>
     c18:	06000000 	streq	r0, [r0], -r0
     c1c:	00000360 	andeq	r0, r0, r0, ror #6
     c20:	e0690414 	rsb	r0, r9, r4, lsl r4
     c24:	07000000 	streq	r0, [r0, -r0]
     c28:	00000321 	andeq	r0, r0, r1, lsr #6
     c2c:	00826b04 	addeq	r6, r2, r4, lsl #22
     c30:	23020000 	movwcs	r0, #8192	; 0x2000
     c34:	04de0700 	ldrbeq	r0, [lr], #1792	; 0x700
     c38:	6c040000 	stcvs	0, cr0, [r4], {-0}
     c3c:	000000e0 	andeq	r0, r0, r0, ror #1
     c40:	07042302 	streq	r2, [r4, -r2, lsl #6]
     c44:	000003d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     c48:	00e06d04 	rsceq	r6, r0, r4, lsl #26
     c4c:	23020000 	movwcs	r0, #8192	; 0x2000
     c50:	03350708 	teqeq	r5, #2097152	; 0x200000
     c54:	6e040000 	cdpvs	0, 0, cr0, cr4, cr0, {0}
     c58:	00000072 	andeq	r0, r0, r2, ror r0
     c5c:	070c2302 	streq	r2, [ip, -r2, lsl #6]
     c60:	000002ec 	andeq	r0, r0, ip, ror #5
     c64:	00726f04 	rsbseq	r6, r2, r4, lsl #30
     c68:	23020000 	movwcs	r0, #8192	; 0x2000
     c6c:	04080010 	streq	r0, [r8], #-16
     c70:	000000e6 	andeq	r0, r0, r6, ror #1
     c74:	00008d09 	andeq	r8, r0, r9, lsl #26
     c78:	05100200 	ldreq	r0, [r0, #-512]	; 0x200
     c7c:	71040000 	mrsvc	r0, (UNDEF: 4)
     c80:	0000008d 	andeq	r0, r0, sp, lsl #1
     c84:	00058d06 	andeq	r8, r5, r6, lsl #26
     c88:	73040c00 	movwvc	r0, #19456	; 0x4c00
     c8c:	0000012d 	andeq	r0, r0, sp, lsr #2
     c90:	00032107 	andeq	r2, r3, r7, lsl #2
     c94:	82750400 	rsbshi	r0, r5, #0
     c98:	02000000 	andeq	r0, r0, #0
     c9c:	de070023 	cdple	0, 0, cr0, cr7, cr3, {1}
     ca0:	04000004 	streq	r0, [r0], #-4
     ca4:	0000e076 	andeq	lr, r0, r6, ror r0
     ca8:	04230200 	strteq	r0, [r3], #-512	; 0x200
     cac:	0003d007 	andeq	sp, r3, r7
     cb0:	e0770400 	rsbs	r0, r7, r0, lsl #8
     cb4:	02000000 	andeq	r0, r0, #0
     cb8:	02000823 	andeq	r0, r0, #2293760	; 0x230000
     cbc:	0000045f 	andeq	r0, r0, pc, asr r4
     cc0:	00f67904 	rscseq	r7, r6, r4, lsl #18
     cc4:	9d060000 	stcls	0, cr0, [r6, #-0]
     cc8:	14000005 	strne	r0, [r0], #-5
     ccc:	016f7e04 	cmneq	pc, r4, lsl #28
     cd0:	7e070000 	cdpvc	0, 0, cr0, cr7, cr0, {0}
     cd4:	04000004 	streq	r0, [r0], #-4
     cd8:	00016f80 	andeq	r6, r1, r0, lsl #31
     cdc:	00230200 	eoreq	r0, r3, r0, lsl #4
     ce0:	00031907 	andeq	r1, r3, r7, lsl #18
     ce4:	74810400 	strvc	r0, [r1], #1024	; 0x400
     ce8:	02000001 	andeq	r0, r0, #1
     cec:	2c070423 	cfstrscs	mvf0, [r7], {35}	; 0x23
     cf0:	04000003 	streq	r0, [r0], #-3
     cf4:	00017f82 	andeq	r7, r1, r2, lsl #31
     cf8:	08230200 	stmdaeq	r3!, {r9}
     cfc:	00740900 	rsbseq	r0, r4, r0, lsl #18
     d00:	04080000 	streq	r0, [r8], #-0
     d04:	0000017a 	andeq	r0, r0, sl, ror r1
     d08:	0000eb09 	andeq	lr, r0, r9, lsl #22
     d0c:	012d0900 	teqeq	sp, r0, lsl #18
     d10:	f2020000 	vhadd.s8	d0, d2, d0
     d14:	04000006 	streq	r0, [r0], #-6
     d18:	00013883 	andeq	r3, r1, r3, lsl #17
     d1c:	07cd0600 	strbeq	r0, [sp, r0, lsl #12]
     d20:	05080000 	streq	r0, [r8, #-0]
     d24:	0001b868 	andeq	fp, r1, r8, ror #16
     d28:	080e0700 	stmdaeq	lr, {r8, r9, sl}
     d2c:	6a050000 	bvs	140d34 <WriteSemaphore+0x12b478>
     d30:	00000064 	andeq	r0, r0, r4, rrx
     d34:	07002302 	streq	r2, [r0, -r2, lsl #6]
     d38:	00000831 	andeq	r0, r0, r1, lsr r8
     d3c:	00826b05 	addeq	r6, r2, r5, lsl #22
     d40:	23020000 	movwcs	r0, #8192	; 0x2000
     d44:	60020004 	andvs	r0, r2, r4
     d48:	05000008 	streq	r0, [r0, #-8]
     d4c:	00018f6c 	andeq	r8, r1, ip, ror #30
     d50:	09070600 	stmdbeq	r7, {r9, sl}
     d54:	014c0000 	mrseq	r0, (UNDEF: 76)
     d58:	00026a79 	andeq	r6, r2, r9, ror sl
     d5c:	082a0700 	stmdaeq	sl!, {r8, r9, sl}
     d60:	7b010000 	blvc	40d68 <WriteSemaphore+0x2b4ac>
     d64:	0000026a 	andeq	r0, r0, sl, ror #4
     d68:	07002302 	streq	r2, [r0, -r2, lsl #6]
     d6c:	000009f7 	strdeq	r0, [r0], -r7
     d70:	026a7c01 	rsbeq	r7, sl, #256	; 0x100
     d74:	23020000 	movwcs	r0, #8192	; 0x2000
     d78:	0a360704 	beq	d82990 <WriteSemaphore+0xd6d0d4>
     d7c:	7e010000 	cdpvc	0, 0, cr0, cr1, cr0, {0}
     d80:	0000026a 	andeq	r0, r0, sl, ror #4
     d84:	07082302 	streq	r2, [r8, -r2, lsl #6]
     d88:	00000803 	andeq	r0, r0, r3, lsl #16
     d8c:	026a7f01 	rsbeq	r7, sl, #4
     d90:	23020000 	movwcs	r0, #8192	; 0x2000
     d94:	0a08070c 	beq	2029cc <WriteSemaphore+0x1ed110>
     d98:	81010000 	mrshi	r0, (UNDEF: 1)
     d9c:	00000184 	andeq	r0, r0, r4, lsl #3
     da0:	07102302 	ldreq	r2, [r0, -r2, lsl #6]
     da4:	000008af 	andeq	r0, r0, pc, lsr #17
     da8:	01848201 	orreq	r8, r4, r1, lsl #4
     dac:	23020000 	movwcs	r0, #8192	; 0x2000
     db0:	09720724 	ldmdbeq	r2!, {r2, r5, r8, r9, sl}^
     db4:	84010000 	strhi	r0, [r1], #-0
     db8:	0000016f 	andeq	r0, r0, pc, ror #2
     dbc:	07382302 	ldreq	r2, [r8, -r2, lsl #6]!
     dc0:	00000898 	muleq	r0, r8, r8
     dc4:	00748501 	rsbseq	r8, r4, r1, lsl #10
     dc8:	23020000 	movwcs	r0, #8192	; 0x2000
     dcc:	0a40073c 	beq	1002ac4 <WriteSemaphore+0xfed208>
     dd0:	86010000 	strhi	r0, [r1], -r0
     dd4:	00000074 	andeq	r0, r0, r4, ror r0
     dd8:	07402302 	strbeq	r2, [r0, -r2, lsl #6]
     ddc:	000009ef 	andeq	r0, r0, pc, ror #19
     de0:	02708801 	rsbseq	r8, r0, #65536	; 0x10000
     de4:	23020000 	movwcs	r0, #8192	; 0x2000
     de8:	09300744 	ldmdbeq	r0!, {r2, r6, r8, r9, sl}
     dec:	89010000 	stmdbhi	r1, {}	; <UNPREDICTABLE>
     df0:	00000270 	andeq	r0, r0, r0, ror r2
     df4:	00482302 	subeq	r2, r8, r2, lsl #6
     df8:	00330408 	eorseq	r0, r3, r8, lsl #8
     dfc:	64090000 	strvs	r0, [r9], #-0
     e00:	02000000 	andeq	r0, r0, #0
     e04:	000008f2 	strdeq	r0, [r0], -r2
     e08:	01c39001 	biceq	r9, r3, r1
     e0c:	76020000 	strvc	r0, [r2], -r0
     e10:	01000008 	tsteq	r0, r8
     e14:	00028b98 	muleq	r2, r8, fp
     e18:	75040800 	strvc	r0, [r4, #-2048]	; 0x800
     e1c:	0a000002 	beq	e2c <_start-0x71d4>
     e20:	0009bf01 	andeq	fp, r9, r1, lsl #30
     e24:	01170100 	tsteq	r7, r0, lsl #2
     e28:	00006401 	andeq	r6, r0, r1, lsl #8
     e2c:	010fe000 	mrseq	lr, CPSR
     e30:	0110f400 	tsteq	r0, r0, lsl #8
     e34:	00037000 	andeq	r7, r3, r0
     e38:	02cf0100 	sbceq	r0, pc, #0
     e3c:	2e0b0000 	cdpcs	0, 0, cr0, cr11, cr0, {0}
     e40:	0100000a 	tsteq	r0, sl
     e44:	02800117 	addeq	r0, r0, #-1073741819	; 0xc0000005
     e48:	91020000 	mrsls	r0, (UNDEF: 2)
     e4c:	07b00b74 			; <UNDEFINED> instruction: 0x07b00b74
     e50:	17010000 	strne	r0, [r1, -r0]
     e54:	00006401 	andeq	r6, r0, r1, lsl #8
     e58:	70910200 	addsvc	r0, r1, r0, lsl #4
     e5c:	38010a00 	stmdacc	r1, {r9, fp}
     e60:	01000009 	tsteq	r0, r9
     e64:	80010142 	andhi	r0, r1, r2, asr #2
     e68:	f4000002 	vst4.8	{d0-d3}, [r0], r2
     e6c:	bc000110 	stflts	f0, [r0], {16}
     e70:	9c000111 	stflss	f0, [r0], {17}
     e74:	01000003 	tsteq	r0, r3
     e78:	00000349 	andeq	r0, r0, r9, asr #6
     e7c:	0008a10b 	andeq	sl, r8, fp, lsl #2
     e80:	01420100 	mrseq	r0, (UNDEF: 82)
     e84:	00000074 	andeq	r0, r0, r4, ror r0
     e88:	0b649102 	bleq	1925298 <WriteSemaphore+0x190f9dc>
     e8c:	00000a40 	andeq	r0, r0, r0, asr #20
     e90:	74014201 	strvc	r4, [r1], #-513	; 0x201
     e94:	02000000 	andeq	r0, r0, #0
     e98:	130b6091 	movwne	r6, #45201	; 0xb091
     e9c:	01000007 	tsteq	r0, r7
     ea0:	003a0142 	eorseq	r0, sl, r2, asr #2
     ea4:	91020000 	mrsls	r0, (UNDEF: 2)
     ea8:	07af0c5f 	sbfxeq	r0, pc, #24, #16
     eac:	44010000 	strmi	r0, [r1], #-0
     eb0:	00028b01 	andeq	r8, r2, r1, lsl #22
     eb4:	70910200 	addsvc	r0, r1, r0, lsl #4
     eb8:	000a1c0c 	andeq	r1, sl, ip, lsl #24
     ebc:	01450100 	mrseq	r0, (UNDEF: 85)
     ec0:	00000021 	andeq	r0, r0, r1, lsr #32
     ec4:	0c6c9102 	stfeqp	f1, [ip], #-8
     ec8:	0000086e 	andeq	r0, r0, lr, ror #16
     ecc:	80014601 	andhi	r4, r1, r1, lsl #12
     ed0:	02000002 	andeq	r0, r0, #2
     ed4:	0a007491 	beq	1e120 <WriteSemaphore+0x8864>
     ed8:	00084e01 	andeq	r4, r8, r1, lsl #28
     edc:	02410100 	subeq	r0, r1, #0
     ee0:	00006401 	andeq	r6, r0, r1, lsl #8
     ee4:	0111bc00 	tsteq	r1, r0, lsl #24
     ee8:	01136800 	tsteq	r3, r0, lsl #16
     eec:	0003c800 	andeq	ip, r3, r0, lsl #16
     ef0:	03c30100 	biceq	r0, r3, #0
     ef4:	2e0b0000 	cdpcs	0, 0, cr0, cr11, cr0, {0}
     ef8:	0100000a 	tsteq	r0, sl
     efc:	02800241 	addeq	r0, r0, #268435460	; 0x10000004
     f00:	91020000 	mrsls	r0, (UNDEF: 2)
     f04:	08e40b64 	stmiaeq	r4!, {r2, r5, r6, r8, r9, fp}^
     f08:	41010000 	mrsmi	r0, (UNDEF: 1)
     f0c:	0003c302 	andeq	ip, r3, r2, lsl #6
     f10:	60910200 	addsvs	r0, r1, r0, lsl #4
     f14:	000fff0b 	andeq	pc, pc, fp, lsl #30
     f18:	02410100 	subeq	r0, r1, #0
     f1c:	00000082 	andeq	r0, r0, r2, lsl #1
     f20:	0b5c9102 	bleq	1725330 <WriteSemaphore+0x170fa74>
     f24:	000009d2 	ldrdeq	r0, [r0], -r2
     f28:	64024101 	strvs	r4, [r2], #-257	; 0x101
     f2c:	02000000 	andeq	r0, r0, #0
     f30:	f90c5891 			; <UNDEFINED> instruction: 0xf90c5891
     f34:	01000008 	tsteq	r0, r8
     f38:	00640243 	rsbeq	r0, r4, r3, asr #4
     f3c:	91020000 	mrsls	r0, (UNDEF: 2)
     f40:	0ae80c74 	beq	ffa04118 <_estack+0xf79f4118>
     f44:	44010000 	strmi	r0, [r1], #-0
     f48:	0001b802 	andeq	fp, r1, r2, lsl #16
     f4c:	6c910200 	lfmvs	f0, 4, [r1], {0}
     f50:	03c80d00 	biceq	r0, r8, #0
     f54:	04080000 	streq	r0, [r8], #-0
     f58:	000003ce 	andeq	r0, r0, lr, asr #7
     f5c:	1f010a0e 	svcne	0x00010a0e
     f60:	01000007 	tsteq	r0, r7
     f64:	64010386 	strvs	r0, [r1], #-902	; 0x386
     f68:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
     f6c:	44000113 	strmi	r0, [r0], #-275	; 0x113
     f70:	f4000114 	vst4.8	{d0,d2,d4,d6}, [r0 :64], r4
     f74:	01000003 	tsteq	r0, r3
     f78:	00000449 	andeq	r0, r0, r9, asr #8
     f7c:	000a2e0b 	andeq	r2, sl, fp, lsl #28
     f80:	03860100 	orreq	r0, r6, #0
     f84:	00000280 	andeq	r0, r0, r0, lsl #5
     f88:	0b6c9102 	bleq	1b25398 <WriteSemaphore+0x1b0fadc>
     f8c:	000008e4 	andeq	r0, r0, r4, ror #17
     f90:	c3038601 	movwgt	r8, #13825	; 0x3601
     f94:	02000003 	andeq	r0, r0, #3
     f98:	560b6891 			; <UNDEFINED> instruction: 0x560b6891
     f9c:	01000007 	tsteq	r0, r7
     fa0:	04490386 	strbeq	r0, [r9], #-902	; 0x386
     fa4:	91020000 	mrsls	r0, (UNDEF: 2)
     fa8:	09d20b64 	ldmibeq	r2, {r2, r5, r6, r8, r9, fp}^
     fac:	86010000 	strhi	r0, [r1], -r0
     fb0:	00006403 	andeq	r6, r0, r3, lsl #8
     fb4:	60910200 	addsvs	r0, r1, r0, lsl #4
     fb8:	00086e0c 	andeq	r6, r8, ip, lsl #28
     fbc:	03880100 	orreq	r0, r8, #0
     fc0:	00000064 	andeq	r0, r0, r4, rrx
     fc4:	0c749102 	ldfeqp	f1, [r4], #-8
     fc8:	0000094c 	andeq	r0, r0, ip, asr #18
     fcc:	74038901 	strvc	r8, [r3], #-2305	; 0x901
     fd0:	02000000 	andeq	r0, r0, #0
     fd4:	08007091 	stmdaeq	r0, {r0, r4, r7, ip, sp, lr}
     fd8:	00006404 	andeq	r6, r0, r4, lsl #8
     fdc:	d7010a00 	strle	r0, [r1, -r0, lsl #20]
     fe0:	01000007 	tsteq	r0, r7
     fe4:	640103c1 	strvs	r0, [r1], #-961	; 0x3c1
     fe8:	44000000 	strmi	r0, [r0], #-0
     fec:	50000114 	andpl	r0, r0, r4, lsl r1
     ff0:	20000116 	andcs	r0, r0, r6, lsl r1
     ff4:	01000004 	tsteq	r0, r4
     ff8:	000004d8 	ldrdeq	r0, [r0], -r8
     ffc:	000a2e0b 	andeq	r2, sl, fp, lsl #28
    1000:	03c10100 	biceq	r0, r1, #0
    1004:	00000280 	andeq	r0, r0, r0, lsl #5
    1008:	0b649102 	bleq	1925418 <WriteSemaphore+0x190fb5c>
    100c:	000009b6 			; <UNDEFINED> instruction: 0x000009b6
    1010:	d803c101 	stmdale	r3, {r0, r8, lr, pc}
    1014:	02000004 	andeq	r0, r0, #4
    1018:	ff0b6091 			; <UNDEFINED> instruction: 0xff0b6091
    101c:	0100000f 	tsteq	r0, pc
    1020:	008203c1 	addeq	r0, r2, r1, asr #7
    1024:	91020000 	mrsls	r0, (UNDEF: 2)
    1028:	08410b5c 	stmdaeq	r1, {r2, r3, r4, r6, r8, r9, fp}^
    102c:	c1010000 	mrsgt	r0, (UNDEF: 1)
    1030:	00006403 	andeq	r6, r0, r3, lsl #8
    1034:	58910200 	ldmpl	r1, {r9}
    1038:	0008f90c 	andeq	pc, r8, ip, lsl #18
    103c:	03c30100 	biceq	r0, r3, #0
    1040:	00000064 	andeq	r0, r0, r4, rrx
    1044:	0c749102 	ldfeqp	f1, [r4], #-8
    1048:	00000ae8 	andeq	r0, r0, r8, ror #21
    104c:	b803c401 	stmdalt	r3, {r0, sl, lr, pc}
    1050:	02000001 	andeq	r0, r0, #1
    1054:	ec0c6891 	stc	8, cr6, [ip], {145}	; 0x91
    1058:	01000007 	tsteq	r0, r7
    105c:	026a03c5 	rsbeq	r0, sl, #335544323	; 0x14000003
    1060:	91020000 	mrsls	r0, (UNDEF: 2)
    1064:	720d0070 	andvc	r0, sp, #112	; 0x70
    1068:	0a000000 	beq	1070 <_start-0x6f90>
    106c:	00088301 	andeq	r8, r8, r1, lsl #6
    1070:	04560100 	ldrbeq	r0, [r6], #-256	; 0x100
    1074:	00006401 	andeq	r6, r0, r1, lsl #8
    1078:	01165000 	tsteq	r6, r0
    107c:	01173000 	tsteq	r7, r0
    1080:	00044c00 	andeq	r4, r4, r0, lsl #24
    1084:	05480100 	strbeq	r0, [r8, #-256]	; 0x100
    1088:	2e0b0000 	cdpcs	0, 0, cr0, cr11, cr0, {0}
    108c:	0100000a 	tsteq	r0, sl
    1090:	02800456 	addeq	r0, r0, #1442840576	; 0x56000000
    1094:	91020000 	mrsls	r0, (UNDEF: 2)
    1098:	09b60b6c 	ldmibeq	r6!, {r2, r3, r5, r6, r8, r9, fp}
    109c:	56010000 	strpl	r0, [r1], -r0
    10a0:	0004d804 	andeq	sp, r4, r4, lsl #16
    10a4:	68910200 	ldmvs	r1, {r9}
    10a8:	0007560b 	andeq	r5, r7, fp, lsl #12
    10ac:	04560100 	ldrbeq	r0, [r6], #-256	; 0x100
    10b0:	00000449 	andeq	r0, r0, r9, asr #8
    10b4:	0c649102 	stfeqp	f1, [r4], #-8
    10b8:	0000086e 	andeq	r0, r0, lr, ror #16
    10bc:	64045801 	strvs	r5, [r4], #-2049	; 0x801
    10c0:	02000000 	andeq	r0, r0, #0
    10c4:	4c0c7491 	cfstrsmi	mvf7, [ip], {145}	; 0x91
    10c8:	01000009 	tsteq	r0, r9
    10cc:	00740459 	rsbseq	r0, r4, r9, asr r4
    10d0:	91020000 	mrsls	r0, (UNDEF: 2)
    10d4:	010a0070 	tsteq	sl, r0, ror r0
    10d8:	00000738 	andeq	r0, r0, r8, lsr r7
    10dc:	01048f01 	tsteq	r4, r1, lsl #30
    10e0:	00000074 	andeq	r0, r0, r4, ror r0
    10e4:	00011730 	andeq	r1, r1, r0, lsr r7
    10e8:	00011764 	andeq	r1, r1, r4, ror #14
    10ec:	00000478 	andeq	r0, r0, r8, ror r4
    10f0:	00058601 	andeq	r8, r5, r1, lsl #12
    10f4:	0a2e0b00 	beq	b83cfc <WriteSemaphore+0xb6e440>
    10f8:	8f010000 	svchi	0x00010000
    10fc:	00058604 	andeq	r8, r5, r4, lsl #12
    1100:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1104:	00086d0c 	andeq	r6, r8, ip, lsl #26
    1108:	04910100 	ldreq	r0, [r1], #256	; 0x100
    110c:	00000074 	andeq	r0, r0, r4, ror r0
    1110:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1114:	0002800d 	andeq	r8, r2, sp
    1118:	c6010f00 	strgt	r0, [r1], -r0, lsl #30
    111c:	01000008 	tsteq	r0, r8
    1120:	7401049d 	strvc	r0, [r1], #-1181	; 0x49d
    1124:	64000000 	strvs	r0, [r0], #-0
    1128:	94000117 	strls	r0, [r0], #-279	; 0x117
    112c:	a4000117 	strge	r0, [r0], #-279	; 0x117
    1130:	01000004 	tsteq	r0, r4
    1134:	000005c9 	andeq	r0, r0, r9, asr #11
    1138:	000a2e0b 	andeq	r2, sl, fp, lsl #28
    113c:	049d0100 	ldreq	r0, [sp], #256	; 0x100
    1140:	00000586 	andeq	r0, r0, r6, lsl #11
    1144:	0c6c9102 	stfeqp	f1, [ip], #-8
    1148:	0000086d 	andeq	r0, r0, sp, ror #16
    114c:	74049f01 	strvc	r9, [r4], #-3841	; 0xf01
    1150:	02000000 	andeq	r0, r0, #0
    1154:	10007491 	mulne	r0, r1, r4
    1158:	00081d01 	andeq	r1, r8, r1, lsl #26
    115c:	04a90100 	strteq	r0, [r9], #256	; 0x100
    1160:	01179401 	tsteq	r7, r1, lsl #8
    1164:	0117c400 	tsteq	r7, r0, lsl #8
    1168:	0004d000 	andeq	sp, r4, r0
    116c:	05f40100 	ldrbeq	r0, [r4, #256]!	; 0x100
    1170:	2e0b0000 	cdpcs	0, 0, cr0, cr11, cr0, {0}
    1174:	0100000a 	tsteq	r0, sl
    1178:	028004a9 	addeq	r0, r0, #-1459617792	; 0xa9000000
    117c:	91020000 	mrsls	r0, (UNDEF: 2)
    1180:	ba110074 	blt	441358 <WriteSemaphore+0x42ba9c>
    1184:	01000007 	tsteq	r0, r7
    1188:	c40104d2 	strgt	r0, [r1], #-1234	; 0x4d2
    118c:	f4000117 	vst4.8	{d0,d2,d4,d6}, [r0 :64], r7
    1190:	fc000118 	stc2	1, cr0, [r0], {24}
    1194:	01000004 	tsteq	r0, r4
    1198:	0000063c 	andeq	r0, r0, ip, lsr r6
    119c:	000a2e0b 	andeq	r2, sl, fp, lsl #28
    11a0:	04d20100 	ldrbeq	r0, [r2], #256	; 0x100
    11a4:	0000028b 	andeq	r0, r0, fp, lsl #5
    11a8:	0b749102 	bleq	1d255b8 <WriteSemaphore+0x1d0fcfc>
    11ac:	000008e4 	andeq	r0, r0, r4, ror #17
    11b0:	c804d201 	stmdagt	r4, {r0, r9, ip, lr, pc}
    11b4:	02000003 	andeq	r0, r0, #3
    11b8:	fe0b7091 	mcr2	0, 0, r7, cr11, cr1, {4}
    11bc:	01000009 	tsteq	r0, r9
    11c0:	006404d2 	ldrdeq	r0, [r4], #-66	; 0xffffffbe	; <UNPREDICTABLE>
    11c4:	91020000 	mrsls	r0, (UNDEF: 2)
    11c8:	9a11006c 	bls	441380 <WriteSemaphore+0x42bac4>
    11cc:	01000007 	tsteq	r0, r7
    11d0:	f40104f8 	vst3.<illegal width 64>	{d0-d2}, [r1 :256], r8
    11d4:	84000118 	strhi	r0, [r0], #-280	; 0x118
    11d8:	28000119 	stmdacs	r0, {r0, r3, r4, r8}
    11dc:	01000005 	tsteq	r0, r5
    11e0:	00000675 	andeq	r0, r0, r5, ror r6
    11e4:	000a2e0b 	andeq	r2, sl, fp, lsl #28
    11e8:	04f80100 	ldrbteq	r0, [r8], #256	; 0x100
    11ec:	00000675 	andeq	r0, r0, r5, ror r6
    11f0:	0b749102 	bleq	1d25600 <WriteSemaphore+0x1d0fd44>
    11f4:	000009b6 			; <UNDEFINED> instruction: 0x000009b6
    11f8:	c804f801 	stmdagt	r4, {r0, fp, ip, sp, lr, pc}
    11fc:	02000003 	andeq	r0, r0, #3
    1200:	0d007091 	stceq	0, cr7, [r0, #-580]	; 0xfffffdbc
    1204:	0000028b 	andeq	r0, r0, fp, lsl #5
    1208:	0009e011 	andeq	lr, r9, r1, lsl r0
    120c:	05060100 	streq	r0, [r6, #-256]	; 0x100
    1210:	01198401 	tsteq	r9, r1, lsl #8
    1214:	011a8400 	tsteq	sl, r0, lsl #8
    1218:	00055400 	andeq	r5, r5, r0, lsl #8
    121c:	06a40100 	strteq	r0, [r4], r0, lsl #2
    1220:	2e0b0000 	cdpcs	0, 0, cr0, cr11, cr0, {0}
    1224:	0100000a 	tsteq	r0, sl
    1228:	02800506 	addeq	r0, r0, #25165824	; 0x1800000
    122c:	91020000 	mrsls	r0, (UNDEF: 2)
    1230:	8a120074 	bhi	481408 <WriteSemaphore+0x46bb4c>
    1234:	01000007 	tsteq	r0, r7
    1238:	64010546 	strvs	r0, [r1], #-1350	; 0x546
    123c:	84000000 	strhi	r0, [r0], #-0
    1240:	c800011a 	stmdagt	r0, {r1, r3, r4, r8}
    1244:	8000011a 	andhi	r0, r0, sl, lsl r1
    1248:	01000005 	tsteq	r0, r5
    124c:	000006e1 	andeq	r0, r0, r1, ror #13
    1250:	000a2e0b 	andeq	r2, sl, fp, lsl #28
    1254:	05460100 	strbeq	r0, [r6, #-256]	; 0x100
    1258:	00000586 	andeq	r0, r0, r6, lsl #11
    125c:	0c6c9102 	stfeqp	f1, [ip], #-8
    1260:	0000086e 	andeq	r0, r0, lr, ror #16
    1264:	64054801 	strvs	r4, [r5], #-2049	; 0x801
    1268:	02000000 	andeq	r0, r0, #0
    126c:	0f007491 	svceq	0x00007491
    1270:	00077001 	andeq	r7, r7, r1
    1274:	05520100 	ldrbeq	r0, [r2, #-256]	; 0x100
    1278:	00006401 	andeq	r6, r0, r1, lsl #8
    127c:	011ac800 	tsteq	sl, r0, lsl #16
    1280:	011b0800 	tsteq	fp, r0, lsl #16
    1284:	0005ac00 	andeq	sl, r5, r0, lsl #24
    1288:	071f0100 	ldreq	r0, [pc, -r0, lsl #2]
    128c:	2e0b0000 	cdpcs	0, 0, cr0, cr11, cr0, {0}
    1290:	0100000a 	tsteq	r0, sl
    1294:	05860552 	streq	r0, [r6, #1362]	; 0x552
    1298:	91020000 	mrsls	r0, (UNDEF: 2)
    129c:	086e0c6c 	stmdaeq	lr!, {r2, r3, r5, r6, sl, fp}^
    12a0:	54010000 	strpl	r0, [r1], #-0
    12a4:	00006405 	andeq	r6, r0, r5, lsl #8
    12a8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    12ac:	09631200 	stmdbeq	r3!, {r9, ip}^
    12b0:	5d010000 	stcpl	0, cr0, [r1, #-0]
    12b4:	00640105 	rsbeq	r0, r4, r5, lsl #2
    12b8:	1b080000 	blne	2012c0 <WriteSemaphore+0x1eba04>
    12bc:	1b540001 	blne	15012c8 <WriteSemaphore+0x14eba0c>
    12c0:	05d80001 	ldrbeq	r0, [r8, #1]
    12c4:	5c010000 	stcpl	0, cr0, [r1], {-0}
    12c8:	0b000007 	bleq	12ec <_start-0x6d14>
    12cc:	00000a2e 	andeq	r0, r0, lr, lsr #20
    12d0:	86055d01 	strhi	r5, [r5], -r1, lsl #26
    12d4:	02000005 	andeq	r0, r0, #5
    12d8:	6e0c6c91 	mcrvs	12, 0, r6, cr12, cr1, {4}
    12dc:	01000008 	tsteq	r0, r8
    12e0:	0064055f 	rsbeq	r0, r4, pc, asr r5
    12e4:	91020000 	mrsls	r0, (UNDEF: 2)
    12e8:	01130074 	tsteq	r3, r4, ror r0
    12ec:	00000917 	andeq	r0, r0, r7, lsl r9
    12f0:	01056901 	tsteq	r5, r1, lsl #18
    12f4:	00000064 	andeq	r0, r0, r4, rrx
    12f8:	00011b54 	andeq	r1, r1, r4, asr fp
    12fc:	00011b9c 	muleq	r1, ip, fp
    1300:	00000604 	andeq	r0, r0, r4, lsl #12
    1304:	0a2e0b01 	beq	b83f10 <WriteSemaphore+0xb6e654>
    1308:	69010000 	stmdbvs	r1, {}	; <UNPREDICTABLE>
    130c:	00058605 	andeq	r8, r5, r5, lsl #12
    1310:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1314:	00086e0c 	andeq	r6, r8, ip, lsl #28
    1318:	056b0100 	strbeq	r0, [fp, #-256]!	; 0x100
    131c:	00000064 	andeq	r0, r0, r4, rrx
    1320:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1324:	000df100 	andeq	pc, sp, r0, lsl #2
    1328:	92000200 	andls	r0, r0, #0
    132c:	04000005 	streq	r0, [r0], #-5
    1330:	00013701 	andeq	r3, r1, r1, lsl #14
    1334:	0c680100 	stfeqe	f0, [r8], #-0
    1338:	0cb50000 	ldceq	0, cr0, [r5]
    133c:	1b9c0000 	blne	fe701344 <_estack+0xf66f1344>
    1340:	347c0001 	ldrbtcc	r0, [ip], #-1
    1344:	07430001 	strbeq	r0, [r3, -r1]
    1348:	4f020000 	svcmi	0x00020000
    134c:	02000007 	andeq	r0, r0, #7
    1350:	000030d5 	ldrdeq	r3, [r0], -r5
    1354:	07040300 	streq	r0, [r4, -r0, lsl #6]
    1358:	0000068a 	andeq	r0, r0, sl, lsl #13
    135c:	01030404 	tsteq	r3, r4, lsl #8
    1360:	00067406 	andeq	r7, r6, r6, lsl #8
    1364:	08010300 	stmdaeq	r1, {r8, r9}
    1368:	00000672 	andeq	r0, r0, r2, ror r6
    136c:	2e050203 	cdpcs	2, 0, cr0, cr5, cr3, {0}
    1370:	03000006 	movweq	r0, #6
    1374:	00b00702 	adcseq	r0, r0, r2, lsl #14
    1378:	04050000 	streq	r0, [r5], #-0
    137c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    1380:	05080300 	streq	r0, [r8, #-768]	; 0x300
    1384:	00000656 	andeq	r0, r0, r6, asr r6
    1388:	80070803 	andhi	r0, r7, r3, lsl #16
    138c:	03000006 	movweq	r0, #6
    1390:	065b0504 	ldrbeq	r0, [fp], -r4, lsl #10
    1394:	04030000 	streq	r0, [r3], #-0
    1398:	00010e07 	andeq	r0, r1, r7, lsl #28
    139c:	07040300 	streq	r0, [r4, -r0, lsl #6]
    13a0:	00000685 	andeq	r0, r0, r5, lsl #13
    13a4:	7b080103 	blvc	2017b8 <WriteSemaphore+0x1ebefc>
    13a8:	02000006 	andeq	r0, r0, #6
    13ac:	000000c3 	andeq	r0, r0, r3, asr #1
    13b0:	00914703 	addseq	r4, r1, r3, lsl #14
    13b4:	04060000 	streq	r0, [r6], #-0
    13b8:	00000097 	muleq	r0, r7, r0
    13bc:	00a30107 	adceq	r0, r3, r7, lsl #2
    13c0:	37080000 	strcc	r0, [r8, -r0]
    13c4:	00000000 	andeq	r0, r0, r0
    13c8:	00005602 	andeq	r5, r0, r2, lsl #12
    13cc:	781f0400 	ldmdavc	pc, {sl}	; <UNPREDICTABLE>
    13d0:	02000000 	andeq	r0, r0, #0
    13d4:	00000c42 	andeq	r0, r0, r2, asr #24
    13d8:	00b95705 	adcseq	r5, r9, r5, lsl #14
    13dc:	04060000 	streq	r0, [r6], #-0
    13e0:	000000bf 	strheq	r0, [r0], -pc	; <UNPREDICTABLE>
    13e4:	006a0109 	rsbeq	r0, sl, r9, lsl #2
    13e8:	00cf0000 	sbceq	r0, pc, r0
    13ec:	37080000 	strcc	r0, [r8, -r0]
    13f0:	00000000 	andeq	r0, r0, r0
    13f4:	0003600a 	andeq	r6, r3, sl
    13f8:	69061400 	stmdbvs	r6, {sl, ip}
    13fc:	00000122 	andeq	r0, r0, r2, lsr #2
    1400:	0003210b 	andeq	r2, r3, fp, lsl #2
    1404:	a36b0600 	cmnge	fp, #0
    1408:	02000000 	andeq	r0, r0, #0
    140c:	de0b0023 	cdple	0, 0, cr0, cr11, cr3, {1}
    1410:	06000004 	streq	r0, [r0], -r4
    1414:	0001226c 	andeq	r2, r1, ip, ror #4
    1418:	04230200 	strteq	r0, [r3], #-512	; 0x200
    141c:	0003d00b 	andeq	sp, r3, fp
    1420:	226d0600 	rsbcs	r0, sp, #0
    1424:	02000001 	andeq	r0, r0, #1
    1428:	350b0823 	strcc	r0, [fp, #-2083]	; 0x823
    142c:	06000003 	streq	r0, [r0], -r3
    1430:	0000376e 	andeq	r3, r0, lr, ror #14
    1434:	0c230200 	sfmeq	f0, 4, [r3], #-0
    1438:	0002ec0b 	andeq	lr, r2, fp, lsl #24
    143c:	376f0600 	strbcc	r0, [pc, -r0, lsl #12]!
    1440:	02000000 	andeq	r0, r0, #0
    1444:	06001023 	streq	r1, [r0], -r3, lsr #32
    1448:	00012804 	andeq	r2, r1, r4, lsl #16
    144c:	00cf0c00 	sbceq	r0, pc, r0, lsl #24
    1450:	10020000 	andne	r0, r2, r0
    1454:	06000005 	streq	r0, [r0], -r5
    1458:	0000cf71 	andeq	ip, r0, r1, ror pc
    145c:	058d0a00 	streq	r0, [sp, #2560]	; 0xa00
    1460:	060c0000 	streq	r0, [ip], -r0
    1464:	00016f73 	andeq	r6, r1, r3, ror pc
    1468:	03210b00 	teqeq	r1, #0
    146c:	75060000 	strvc	r0, [r6, #-0]
    1470:	000000a3 	andeq	r0, r0, r3, lsr #1
    1474:	0b002302 	bleq	a084 <__module_entries_end+0x1fe0>
    1478:	000004de 	ldrdeq	r0, [r0], -lr
    147c:	01227606 	teqeq	r2, r6, lsl #12
    1480:	23020000 	movwcs	r0, #8192	; 0x2000
    1484:	03d00b04 	bicseq	r0, r0, #4096	; 0x1000
    1488:	77060000 	strvc	r0, [r6, -r0]
    148c:	00000122 	andeq	r0, r0, r2, lsr #2
    1490:	00082302 	andeq	r2, r8, r2, lsl #6
    1494:	00045f02 	andeq	r5, r4, r2, lsl #30
    1498:	38790600 	ldmdacc	r9!, {r9, sl}^
    149c:	0a000001 	beq	14a8 <_start-0x6b58>
    14a0:	0000059d 	muleq	r0, sp, r5
    14a4:	b17e0614 	cmnlt	lr, r4, lsl r6
    14a8:	0b000001 	bleq	14b4 <_start-0x6b4c>
    14ac:	0000047e 	andeq	r0, r0, lr, ror r4
    14b0:	01b18006 			; <UNDEFINED> instruction: 0x01b18006
    14b4:	23020000 	movwcs	r0, #8192	; 0x2000
    14b8:	03190b00 	tsteq	r9, #0
    14bc:	81060000 	mrshi	r0, (UNDEF: 6)
    14c0:	000001b6 			; <UNDEFINED> instruction: 0x000001b6
    14c4:	0b042302 	bleq	10a0d4 <WriteSemaphore+0xf4818>
    14c8:	0000032c 	andeq	r0, r0, ip, lsr #6
    14cc:	01c18206 	biceq	r8, r1, r6, lsl #4
    14d0:	23020000 	movwcs	r0, #8192	; 0x2000
    14d4:	780c0008 	stmdavc	ip, {r3}
    14d8:	06000000 	streq	r0, [r0], -r0
    14dc:	0001bc04 	andeq	fp, r1, r4, lsl #24
    14e0:	012d0c00 	teqeq	sp, r0, lsl #24
    14e4:	6f0c0000 	svcvs	0x000c0000
    14e8:	02000001 	andeq	r0, r0, #1
    14ec:	000006f2 	strdeq	r0, [r0], -r2
    14f0:	017a8306 	cmneq	sl, r6, lsl #6
    14f4:	18020000 	stmdane	r2, {}	; <UNPREDICTABLE>
    14f8:	0700000b 	streq	r0, [r0, -fp]
    14fc:	00003763 	andeq	r3, r0, r3, ror #14
    1500:	07cd0a00 	strbeq	r0, [sp, r0, lsl #20]
    1504:	07080000 	streq	r0, [r8, -r0]
    1508:	00020568 	andeq	r0, r2, r8, ror #10
    150c:	080e0b00 	stmdaeq	lr, {r8, r9, fp}
    1510:	6a070000 	bvs	1c1518 <WriteSemaphore+0x1abc5c>
    1514:	0000006a 	andeq	r0, r0, sl, rrx
    1518:	0b002302 	bleq	a128 <__module_entries_end+0x2084>
    151c:	00000831 	andeq	r0, r0, r1, lsr r8
    1520:	00a36b07 	adceq	r6, r3, r7, lsl #22
    1524:	23020000 	movwcs	r0, #8192	; 0x2000
    1528:	60020004 	andvs	r0, r2, r4
    152c:	07000008 	streq	r0, [r0, -r8]
    1530:	0001dc6c 	andeq	sp, r1, ip, ror #24
    1534:	0ca60a00 	vstmiaeq	r6!, {s0-s-1}
    1538:	070c0000 	streq	r0, [ip, -r0]
    153c:	00024771 	andeq	r4, r2, r1, ror r7
    1540:	106e0b00 	rsbne	r0, lr, r0, lsl #22
    1544:	73070000 	movwvc	r0, #28672	; 0x7000
    1548:	00000037 	andeq	r0, r0, r7, lsr r0
    154c:	0b002302 	bleq	a15c <__module_entries_end+0x20b8>
    1550:	00000de0 	andeq	r0, r0, r0, ror #27
    1554:	00787407 	rsbseq	r7, r8, r7, lsl #8
    1558:	23020000 	movwcs	r0, #8192	; 0x2000
    155c:	0eb40b04 	vmoveq.f64	d0, #68	; 0x44
    1560:	75070000 	strvc	r0, [r7, #-0]
    1564:	00000078 	andeq	r0, r0, r8, ror r0
    1568:	00082302 	andeq	r2, r8, r2, lsl #6
    156c:	000ec102 	andeq	ip, lr, r2, lsl #2
    1570:	10760700 	rsbsne	r0, r6, r0, lsl #14
    1574:	0d000002 	stceq	0, cr0, [r0, #-8]
    1578:	00000257 	andeq	r0, r0, r7, asr r2
    157c:	025d0406 	subseq	r0, sp, #100663296	; 0x6000000
    1580:	390d0000 	stmdbcc	sp, {}	; <UNPREDICTABLE>
    1584:	06000000 	streq	r0, [r0], -r0
    1588:	00007804 	andeq	r7, r0, r4, lsl #16
    158c:	0b410a00 	bleq	1043d94 <WriteSemaphore+0x102e4d8>
    1590:	01480000 	mrseq	r0, (UNDEF: 72)
    1594:	0002d766 	andeq	sp, r2, r6, ror #14
    1598:	012a0b00 	teqeq	sl, r0, lsl #22
    159c:	68010000 	stmdavs	r1, {}	; <UNPREDICTABLE>
    15a0:	000002d7 	ldrdeq	r0, [r0], -r7
    15a4:	0b002302 	bleq	a1b4 <__module_entries_end+0x2110>
    15a8:	000005cd 	andeq	r0, r0, sp, asr #11
    15ac:	012d6e01 	teqeq	sp, r1, lsl #28
    15b0:	23020000 	movwcs	r0, #8192	; 0x2000
    15b4:	05de0b04 	ldrbeq	r0, [lr, #2820]	; 0xb04
    15b8:	6f010000 	svcvs	0x00010000
    15bc:	0000012d 	andeq	r0, r0, sp, lsr #2
    15c0:	0b182302 	bleq	60a1d0 <WriteSemaphore+0x5f4914>
    15c4:	000004a7 	andeq	r0, r0, r7, lsr #9
    15c8:	00787001 	rsbseq	r7, r8, r1
    15cc:	23020000 	movwcs	r0, #8192	; 0x2000
    15d0:	0d230b2c 	vstmdbeq	r3!, {d0-d21}
    15d4:	71010000 	mrsvc	r0, (UNDEF: 1)
    15d8:	00000262 	andeq	r0, r0, r2, ror #4
    15dc:	0b302302 	bleq	c0a1ec <WriteSemaphore+0xbf4930>
    15e0:	00000fd8 	ldrdeq	r0, [r0], -r8
    15e4:	02dd7201 	sbcseq	r7, sp, #268435456	; 0x10000000
    15e8:	23020000 	movwcs	r0, #8192	; 0x2000
    15ec:	0aba0b34 	beq	fee842c4 <_estack+0xf6e742c4>
    15f0:	86010000 	strhi	r0, [r1], -r0
    15f4:	000000ae 	andeq	r0, r0, lr, lsr #1
    15f8:	00442302 	subeq	r2, r4, r2, lsl #6
    15fc:	01b10406 			; <UNDEFINED> instruction: 0x01b10406
    1600:	390e0000 	stmdbcc	lr, {}	; <UNPREDICTABLE>
    1604:	ed000000 	stc	0, cr0, [r0, #-0]
    1608:	0f000002 	svceq	0x00000002
    160c:	00000071 	andeq	r0, r0, r1, ror r0
    1610:	3b02000f 	blcc	81654 <WriteSemaphore+0x6bd98>
    1614:	0100000c 	tsteq	r0, ip
    1618:	00026893 	muleq	r2, r3, r8
    161c:	c4011000 	strgt	r1, [r1], #-0
    1620:	0100000a 	tsteq	r0, sl
    1624:	6a01019b 	bvs	41c98 <WriteSemaphore+0x2c3dc>
    1628:	9c000000 	stcls	0, cr0, [r0], {-0}
    162c:	e400011b 	str	r0, [r0], #-283	; 0x11b
    1630:	3000011d 	andcc	r0, r0, sp, lsl r1
    1634:	01000006 	tsteq	r0, r6
    1638:	000003c7 	andeq	r0, r0, r7, asr #7
    163c:	000d9a11 	andeq	r9, sp, r1, lsl sl
    1640:	019b0100 	orrseq	r0, fp, r0, lsl #2
    1644:	00000086 	andeq	r0, r0, r6, lsl #1
    1648:	11649102 	cmnne	r4, r2, lsl #2
    164c:	00001030 	andeq	r1, r0, r0, lsr r0
    1650:	52019b01 	andpl	r9, r1, #1024	; 0x400
    1654:	02000002 	andeq	r0, r0, #2
    1658:	8e116091 	mrchi	0, 0, r6, cr1, cr1, {4}
    165c:	0100000b 	tsteq	r0, fp
    1660:	004e019b 	umaaleq	r0, lr, fp, r1
    1664:	91020000 	mrsls	r0, (UNDEF: 2)
    1668:	0117115e 	tsteq	r7, lr, asr r1
    166c:	9b010000 	blls	41674 <WriteSemaphore+0x2bdb8>
    1670:	00003701 	andeq	r3, r0, r1, lsl #14
    1674:	58910200 	ldmpl	r1, {r9}
    1678:	0004a711 	andeq	sl, r4, r1, lsl r7
    167c:	019b0100 	orrseq	r0, fp, r0, lsl #2
    1680:	00000078 	andeq	r0, r0, r8, ror r0
    1684:	11009102 	tstne	r0, r2, lsl #2
    1688:	00000c0d 	andeq	r0, r0, sp, lsl #24
    168c:	c7019b01 	strgt	r9, [r1, -r1, lsl #22]
    1690:	02000003 	andeq	r0, r0, #3
    1694:	9b110491 	blls	4428e0 <WriteSemaphore+0x42d024>
    1698:	0100000b 	tsteq	r0, fp
    169c:	0262019b 	rsbeq	r0, r2, #-1073741786	; 0xc0000026
    16a0:	91020000 	mrsls	r0, (UNDEF: 2)
    16a4:	0d661108 	stfeqe	f1, [r6, #-32]!	; 0xffffffe0
    16a8:	9b010000 	blls	416b0 <WriteSemaphore+0x2bdf4>
    16ac:	0003cd01 	andeq	ip, r3, r1, lsl #26
    16b0:	0c910200 	lfmeq	f0, 4, [r1], {0}
    16b4:	00086e12 	andeq	r6, r8, r2, lsl lr
    16b8:	019d0100 	orrseq	r0, sp, r0, lsl #2
    16bc:	0000006a 	andeq	r0, r0, sl, rrx
    16c0:	12749102 	rsbsne	r9, r4, #-2147483648	; 0x80000000
    16c4:	00000b55 	andeq	r0, r0, r5, asr fp
    16c8:	dd019e01 	stcle	14, cr9, [r1, #-4]
    16cc:	02000003 	andeq	r0, r0, #3
    16d0:	d8137091 	ldmdale	r3, {r0, r4, r7, ip, sp, lr}
    16d4:	7800011b 	stmdavc	r0, {r0, r1, r3, r4, r8}
    16d8:	1200011d 	andne	r0, r0, #1073741831	; 0x40000007
    16dc:	0000012a 	andeq	r0, r0, sl, lsr #2
    16e0:	6201a901 	andvs	sl, r1, #16384	; 0x4000
    16e4:	02000002 	andeq	r0, r0, #2
    16e8:	00006c91 	muleq	r0, r1, ip
    16ec:	01d10406 	bicseq	r0, r1, r6, lsl #8
    16f0:	d20d0000 	andle	r0, sp, #0
    16f4:	06000003 	streq	r0, [r0], -r3
    16f8:	0003d804 	andeq	sp, r3, r4, lsl #16
    16fc:	02470d00 	subeq	r0, r7, #0
    1700:	04060000 	streq	r0, [r6], #-0
    1704:	000002ed 	andeq	r0, r0, sp, ror #5
    1708:	0f070114 	svceq	0x00070114
    170c:	40010000 	andmi	r0, r1, r0
    1710:	1de40102 	stfnee	f0, [r4, #8]!
    1714:	1ee00001 	cdpne	0, 14, cr0, cr0, cr1, {0}
    1718:	065c0001 	ldrbeq	r0, [ip], -r1
    171c:	1d010000 	stcne	0, cr0, [r1, #-0]
    1720:	11000004 	tstne	r0, r4
    1724:	00000d57 	andeq	r0, r0, r7, asr sp
    1728:	d1024001 	tstle	r2, r1
    172c:	02000001 	andeq	r0, r0, #1
    1730:	53126c91 	tstpl	r2, #37120	; 0x9100
    1734:	0100000c 	tsteq	r0, ip
    1738:	03dd0242 	bicseq	r0, sp, #536870916	; 0x20000004
    173c:	91020000 	mrsls	r0, (UNDEF: 2)
    1740:	01140074 	tsteq	r4, r4, ror r0
    1744:	00000e0d 	andeq	r0, r0, sp, lsl #28
    1748:	01028201 	tsteq	r2, r1, lsl #4
    174c:	00011ee0 	andeq	r1, r1, r0, ror #29
    1750:	00011fec 	andeq	r1, r1, ip, ror #31
    1754:	00000688 	andeq	r0, r0, r8, lsl #13
    1758:	00048401 	andeq	r8, r4, r1, lsl #8
    175c:	0dcd1100 	stfeqe	f1, [sp]
    1760:	82010000 	andhi	r0, r1, #0
    1764:	00048402 	andeq	r8, r4, r2, lsl #8
    1768:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    176c:	000fc911 	andeq	ip, pc, r1, lsl r9	; <UNPREDICTABLE>
    1770:	02820100 	addeq	r0, r2, #0
    1774:	000000a3 	andeq	r0, r0, r3, lsr #1
    1778:	12609102 	rsbne	r9, r0, #-2147483648	; 0x80000000
    177c:	00000504 	andeq	r0, r0, r4, lsl #10
    1780:	a3028401 	movwge	r8, #9217	; 0x2401
    1784:	02000000 	andeq	r0, r0, #0
    1788:	d7127091 			; <UNDEFINED> instruction: 0xd7127091
    178c:	0100000a 	tsteq	r0, sl
    1790:	006a0285 	rsbeq	r0, sl, r5, lsl #5
    1794:	91020000 	mrsls	r0, (UNDEF: 2)
    1798:	0e87126c 	cdpeq	2, 8, cr1, cr7, cr12, {3}
    179c:	85010000 	strhi	r0, [r1, #-0]
    17a0:	00006a02 	andeq	r6, r0, r2, lsl #20
    17a4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    17a8:	04890d00 	streq	r0, [r9], #3328	; 0xd00
    17ac:	04060000 	streq	r0, [r6], #-0
    17b0:	000000a3 	andeq	r0, r0, r3, lsr #1
    17b4:	0b0d0114 	bleq	341c0c <WriteSemaphore+0x32c350>
    17b8:	c3010000 	movwgt	r0, #4096	; 0x1000
    17bc:	1fec0102 	svcne	0x00ec0102
    17c0:	206c0001 	rsbcs	r0, ip, r1
    17c4:	06b40001 	ldrteq	r0, [r4], r1
    17c8:	d8010000 	stmdale	r1, {}	; <UNPREDICTABLE>
    17cc:	11000004 	tstne	r0, r4
    17d0:	000005bf 			; <UNDEFINED> instruction: 0x000005bf
    17d4:	a302c301 	movwge	ip, #8961	; 0x2301
    17d8:	02000000 	andeq	r0, r0, #0
    17dc:	04126c91 	ldreq	r6, [r2], #-3217	; 0xc91
    17e0:	01000005 	tsteq	r0, r5
    17e4:	00a302c5 	adceq	r0, r3, r5, asr #5
    17e8:	91020000 	mrsls	r0, (UNDEF: 2)
    17ec:	0ad71270 	beq	ff5c61b4 <_estack+0xf75b61b4>
    17f0:	c6010000 	strgt	r0, [r1], -r0
    17f4:	00006a02 	andeq	r6, r0, r2, lsl #20
    17f8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    17fc:	37011000 	strcc	r1, [r1, -r0]
    1800:	01000010 	tsteq	r0, r0, lsl r0
    1804:	780102f1 	stmdavc	r1, {r0, r4, r5, r6, r7, r9}
    1808:	6c000000 	stcvs	0, cr0, [r0], {-0}
    180c:	c4000120 	strgt	r0, [r0], #-288	; 0x120
    1810:	e0000120 	and	r0, r0, r0, lsr #2
    1814:	01000006 	tsteq	r0, r6
    1818:	00000525 	andeq	r0, r0, r5, lsr #10
    181c:	000be511 	andeq	lr, fp, r1, lsl r5
    1820:	02f10100 	rscseq	r0, r1, #0
    1824:	000001d1 	ldrdeq	r0, [r0], -r1
    1828:	126c9102 	rsbne	r9, ip, #-2147483648	; 0x80000000
    182c:	00000c53 	andeq	r0, r0, r3, asr ip
    1830:	dd02f301 	stcle	3, cr15, [r2, #-4]
    1834:	02000003 	andeq	r0, r0, #3
    1838:	6d127491 	cfldrsvs	mvf7, [r2, #-580]	; 0xfffffdbc
    183c:	01000008 	tsteq	r0, r8
    1840:	007802f4 	ldrshteq	r0, [r8], #-36	; 0xffffffdc
    1844:	91020000 	mrsls	r0, (UNDEF: 2)
    1848:	01140070 	tsteq	r4, r0, ror r0
    184c:	00000baa 	andeq	r0, r0, sl, lsr #23
    1850:	01030701 	tsteq	r3, r1, lsl #14
    1854:	000120c4 	andeq	r2, r1, r4, asr #1
    1858:	00012268 	andeq	r2, r1, r8, ror #4
    185c:	0000070c 	andeq	r0, r0, ip, lsl #14
    1860:	00058c01 	andeq	r8, r5, r1, lsl #24
    1864:	0be51100 	bleq	ff945c6c <_estack+0xf7935c6c>
    1868:	07010000 	streq	r0, [r1, -r0]
    186c:	0001d103 	andeq	sp, r1, r3, lsl #2
    1870:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    1874:	000df011 	andeq	pc, sp, r1, lsl r0	; <UNPREDICTABLE>
    1878:	03070100 	movweq	r0, #28928	; 0x7100
    187c:	00000078 	andeq	r0, r0, r8, ror r0
    1880:	12609102 	rsbne	r9, r0, #-2147483648	; 0x80000000
    1884:	00000c53 	andeq	r0, r0, r3, asr ip
    1888:	dd030901 	stcle	9, cr0, [r3, #-4]
    188c:	02000003 	andeq	r0, r0, #3
    1890:	0c127091 	ldceq	0, cr7, [r2], {145}	; 0x91
    1894:	01000010 	tsteq	r0, r0, lsl r0
    1898:	0078030a 	rsbseq	r0, r8, sl, lsl #6
    189c:	91020000 	mrsls	r0, (UNDEF: 2)
    18a0:	0c59126c 	lfmeq	f1, 2, [r9], {108}	; 0x6c
    18a4:	0b010000 	bleq	418ac <WriteSemaphore+0x2bff0>
    18a8:	00006a03 	andeq	r6, r0, r3, lsl #20
    18ac:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    18b0:	65011400 	strvs	r1, [r1, #-1024]	; 0x400
    18b4:	0100000a 	tsteq	r0, sl
    18b8:	68010373 	stmdavs	r1, {r0, r1, r4, r5, r6, r8, r9}
    18bc:	68000122 	stmdavs	r0, {r1, r5, r8}
    18c0:	38000123 	stmdacc	r0, {r0, r1, r5, r8}
    18c4:	01000007 	tsteq	r0, r7
    18c8:	000005c6 	andeq	r0, r0, r6, asr #11
    18cc:	00105e11 	andseq	r5, r0, r1, lsl lr
    18d0:	03730100 	cmneq	r3, #0
    18d4:	000001d1 	ldrdeq	r0, [r0], -r1
    18d8:	126c9102 	rsbne	r9, ip, #-2147483648	; 0x80000000
    18dc:	00000c53 	andeq	r0, r0, r3, asr ip
    18e0:	dd037501 	cfstr32le	mvfx7, [r3, #-4]
    18e4:	02000003 	andeq	r0, r0, #3
    18e8:	15007491 	strne	r7, [r0, #-1169]	; 0x491
    18ec:	000c1b01 	andeq	r1, ip, r1, lsl #22
    18f0:	03b30100 			; <UNDEFINED> instruction: 0x03b30100
    18f4:	00006a01 	andeq	r6, r0, r1, lsl #20
    18f8:	01236800 	teqeq	r3, r0, lsl #16
    18fc:	0123e400 	teqeq	r3, r0, lsl #8
    1900:	00076400 	andeq	r6, r7, r0, lsl #8
    1904:	06130100 	ldreq	r0, [r3], -r0, lsl #2
    1908:	e6110000 	ldr	r0, [r1], -r0
    190c:	0100000b 	tsteq	r0, fp
    1910:	01d103b3 	ldrheq	r0, [r1, #51]	; 0x33
    1914:	91020000 	mrsls	r0, (UNDEF: 2)
    1918:	086e126c 	stmdaeq	lr!, {r2, r3, r5, r6, r9, ip}^
    191c:	b5010000 	strlt	r0, [r1, #-0]
    1920:	00006a03 	andeq	r6, r0, r3, lsl #20
    1924:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1928:	000c5312 	andeq	r5, ip, r2, lsl r3
    192c:	03b60100 			; <UNDEFINED> instruction: 0x03b60100
    1930:	00000613 	andeq	r0, r0, r3, lsl r6
    1934:	00709102 	rsbseq	r9, r0, r2, lsl #2
    1938:	0006180d 	andeq	r1, r6, sp, lsl #16
    193c:	1e040600 	cfmadd32ne	mvax0, mvfx0, mvfx4, mvfx0
    1940:	0d000006 	stceq	0, cr0, [r0, #-24]	; 0xffffffe8
    1944:	000002ed 	andeq	r0, r0, sp, ror #5
    1948:	0c9a0114 	ldfeqs	f0, [sl], {20}
    194c:	d5010000 	strle	r0, [r1, #-0]
    1950:	23e40103 	mvncs	r0, #-1073741824	; 0xc0000000
    1954:	24d80001 	ldrbcs	r0, [r8], #1
    1958:	07900001 	ldreq	r0, [r0, r1]
    195c:	5d010000 	stcpl	0, cr0, [r1, #-0]
    1960:	11000006 	tstne	r0, r6
    1964:	00000afe 	strdeq	r0, [r0], -lr
    1968:	d103d501 	tstle	r3, r1, lsl #10
    196c:	02000001 	andeq	r0, r0, #1
    1970:	53126c91 	tstpl	r2, #37120	; 0x9100
    1974:	0100000c 	tsteq	r0, ip
    1978:	03dd03d7 	bicseq	r0, sp, #1543503875	; 0x5c000003
    197c:	91020000 	mrsls	r0, (UNDEF: 2)
    1980:	01100074 	tsteq	r0, r4, ror r0
    1984:	00000e74 	andeq	r0, r0, r4, ror lr
    1988:	01040201 	tsteq	r4, r1, lsl #4
    198c:	0000006a 	andeq	r0, r0, sl, rrx
    1990:	000124d8 	ldrdeq	r2, [r1], -r8
    1994:	000125f4 	strdeq	r2, [r1], -r4
    1998:	000007bc 			; <UNDEFINED> instruction: 0x000007bc
    199c:	0006b901 	andeq	fp, r6, r1, lsl #18
    19a0:	0afe1100 	beq	fff85da8 <_estack+0xf7f75da8>
    19a4:	02010000 	andeq	r0, r1, #0
    19a8:	0001d104 	andeq	sp, r1, r4, lsl #2
    19ac:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    19b0:	000c5912 	andeq	r5, ip, r2, lsl r9
    19b4:	04040100 	streq	r0, [r4], #-256	; 0x100
    19b8:	0000006a 	andeq	r0, r0, sl, rrx
    19bc:	12749102 	rsbsne	r9, r4, #-2147483648	; 0x80000000
    19c0:	00000c53 	andeq	r0, r0, r3, asr ip
    19c4:	dd040501 	cfstr32le	mvfx0, [r4, #-4]
    19c8:	02000003 	andeq	r0, r0, #3
    19cc:	4c127091 	ldcmi	0, cr7, [r2], {145}	; 0x91
    19d0:	01000009 	tsteq	r0, r9
    19d4:	00780406 	rsbseq	r0, r8, r6, lsl #8
    19d8:	91020000 	mrsls	r0, (UNDEF: 2)
    19dc:	0114006c 	tsteq	r4, ip, rrx
    19e0:	00000bbb 			; <UNDEFINED> instruction: 0x00000bbb
    19e4:	01043001 	tsteq	r4, r1
    19e8:	000125f4 	strdeq	r2, [r1], -r4
    19ec:	0001268c 	andeq	r2, r1, ip, lsl #13
    19f0:	000007e8 	andeq	r0, r0, r8, ror #15
    19f4:	0006e401 	andeq	lr, r6, r1, lsl #8
    19f8:	086e1200 	stmdaeq	lr!, {r9, ip}^
    19fc:	32010000 	andcc	r0, r1, #0
    1a00:	00006a04 	andeq	r6, r0, r4, lsl #20
    1a04:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1a08:	42011600 	andmi	r1, r1, #0
    1a0c:	0100000e 	tsteq	r0, lr
    1a10:	8c010471 	cfstrshi	mvf0, [r1], {113}	; 0x71
    1a14:	c0000126 	andgt	r0, r0, r6, lsr #2
    1a18:	14000126 	strne	r0, [r0], #-294	; 0x126
    1a1c:	01000008 	tsteq	r0, r8
    1a20:	0fab0117 	svceq	0x00ab0117
    1a24:	7c010000 	stcvc	0, cr0, [r1], {-0}
    1a28:	26c00104 	strbcs	r0, [r0], r4, lsl #2
    1a2c:	26ec0001 	strbtcs	r0, [ip], r1
    1a30:	08400001 	stmdaeq	r0, {r0}^
    1a34:	10010000 	andne	r0, r1, r0
    1a38:	000e5401 	andeq	r5, lr, r1, lsl #8
    1a3c:	04840100 	streq	r0, [r4], #256	; 0x100
    1a40:	00006a01 	andeq	r6, r0, r1, lsl #20
    1a44:	0126ec00 	teqeq	r6, r0, lsl #24
    1a48:	01289000 	teqeq	r8, r0
    1a4c:	00086c00 	andeq	r6, r8, r0, lsl #24
    1a50:	07680100 	strbeq	r0, [r8, -r0, lsl #2]!
    1a54:	53120000 	tstpl	r2, #0
    1a58:	0100000c 	tsteq	r0, ip
    1a5c:	03dd0486 	bicseq	r0, sp, #-2046820352	; 0x86000000
    1a60:	54010000 	strpl	r0, [r1], #-0
    1a64:	000ad712 	andeq	sp, sl, r2, lsl r7
    1a68:	04870100 	streq	r0, [r7], #256	; 0x100
    1a6c:	0000006a 	andeq	r0, r0, sl, rrx
    1a70:	136c9102 	cmnne	ip, #-2147483648	; 0x80000000
    1a74:	00012738 	andeq	r2, r1, r8, lsr r7
    1a78:	0001285c 	andeq	r2, r1, ip, asr r8
    1a7c:	000c5912 	andeq	r5, ip, r2, lsl r9
    1a80:	049a0100 	ldreq	r0, [sl], #256	; 0x100
    1a84:	0000006a 	andeq	r0, r0, sl, rrx
    1a88:	00689102 	rsbeq	r9, r8, r2, lsl #2
    1a8c:	13011000 	movwne	r1, #4096	; 0x1000
    1a90:	0100000f 	tsteq	r0, pc
    1a94:	a30104db 	movwge	r0, #5339	; 0x14db
    1a98:	90000000 	andls	r0, r0, r0
    1a9c:	c4000128 	strgt	r0, [r0], #-296	; 0x128
    1aa0:	98000128 	stmdals	r0, {r3, r5, r8}
    1aa4:	01000008 	tsteq	r0, r8
    1aa8:	00000797 	muleq	r0, r7, r7
    1aac:	000fa412 	andeq	sl, pc, r2, lsl r4	; <UNPREDICTABLE>
    1ab0:	04dd0100 	ldrbeq	r0, [sp], #256	; 0x100
    1ab4:	000000a3 	andeq	r0, r0, r3, lsr #1
    1ab8:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1abc:	0b5e0115 	bleq	1781f18 <WriteSemaphore+0x176c65c>
    1ac0:	ea010000 	b	41ac8 <WriteSemaphore+0x2c20c>
    1ac4:	00a30104 	adceq	r0, r3, r4, lsl #2
    1ac8:	28c40000 	stmiacs	r4, {}^	; <UNPREDICTABLE>
    1acc:	28fc0001 	ldmcs	ip!, {r0}^
    1ad0:	08c40001 	stmiaeq	r4, {r0}^
    1ad4:	d5010000 	strle	r0, [r1, #-0]
    1ad8:	12000007 	andne	r0, r0, #7
    1adc:	0000086e 	andeq	r0, r0, lr, ror #16
    1ae0:	a304ec01 	movwge	lr, #19457	; 0x4c01
    1ae4:	02000000 	andeq	r0, r0, #0
    1ae8:	4c127091 	ldcmi	0, cr7, [r2], {145}	; 0x91
    1aec:	01000009 	tsteq	r0, r9
    1af0:	007804ed 	rsbseq	r0, r8, sp, ror #9
    1af4:	91020000 	mrsls	r0, (UNDEF: 2)
    1af8:	01180074 	tsteq	r8, r4, ror r0
    1afc:	00000f59 	andeq	r0, r0, r9, asr pc
    1b00:	0104f701 	tsteq	r4, r1, lsl #14
    1b04:	00000078 	andeq	r0, r0, r8, ror r0
    1b08:	000128fc 	strdeq	r2, [r1], -ip
    1b0c:	00012920 	andeq	r2, r1, r0, lsr #18
    1b10:	000008f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1b14:	1d011401 	cfstrsne	mvf1, [r1, #-4]
    1b18:	0100000e 	tsteq	r0, lr
    1b1c:	200105a9 	andcs	r0, r1, r9, lsr #11
    1b20:	34000129 	strcc	r0, [r0], #-297	; 0x129
    1b24:	1c00012b 	stfnes	f0, [r0], {43}	; 0x2b
    1b28:	01000009 	tsteq	r0, r9
    1b2c:	00000851 	andeq	r0, r0, r1, asr r8
    1b30:	000c5312 	andeq	r5, ip, r2, lsl r3
    1b34:	05ab0100 	streq	r0, [fp, #256]!	; 0x100
    1b38:	000003dd 	ldrdeq	r0, [r0], -sp
    1b3c:	19709102 	ldmdbne	r0!, {r1, r8, ip, pc}^
    1b40:	00012960 	andeq	r2, r1, r0, ror #18
    1b44:	000129e4 	andeq	r2, r1, r4, ror #19
    1b48:	00000837 	andeq	r0, r0, r7, lsr r8
    1b4c:	0002ca12 	andeq	ip, r2, r2, lsl sl
    1b50:	05b50100 	ldreq	r0, [r5, #256]!	; 0x100
    1b54:	00000851 	andeq	r0, r0, r1, asr r8
    1b58:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1b5c:	0129e413 	teqeq	r9, r3, lsl r4
    1b60:	012af400 	msreq	CPSR_fx, r0, lsl #8
    1b64:	03211200 	teqeq	r1, #0
    1b68:	d6010000 	strle	r0, [r1], -r0
    1b6c:	0000a305 	andeq	sl, r0, r5, lsl #6
    1b70:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1b74:	04060000 	streq	r0, [r6], #-0
    1b78:	000001c6 	andeq	r0, r0, r6, asr #3
    1b7c:	0ccf0114 	stfeqe	f0, [pc], {20}
    1b80:	f6010000 			; <UNDEFINED> instruction: 0xf6010000
    1b84:	2b340105 	blcs	d01fa0 <WriteSemaphore+0xcec6e4>
    1b88:	2b8c0001 	blcs	fe301b94 <_estack+0xf62f1b94>
    1b8c:	09480001 	stmdbeq	r8, {r0}^
    1b90:	a0010000 	andge	r0, r1, r0
    1b94:	11000008 	tstne	r0, r8
    1b98:	00000be6 	andeq	r0, r0, r6, ror #23
    1b9c:	d105f601 	tstle	r5, r1, lsl #12
    1ba0:	02000001 	andeq	r0, r0, #1
    1ba4:	98116c91 	ldmdals	r1, {r0, r4, r7, sl, fp, sp, lr}
    1ba8:	0100000a 	tsteq	r0, sl
    1bac:	00ae05f6 	strdeq	r0, [lr], r6	; <UNPREDICTABLE>
    1bb0:	91020000 	mrsls	r0, (UNDEF: 2)
    1bb4:	0c541268 	lfmeq	f1, 2, [r4], {104}	; 0x68
    1bb8:	f8010000 			; <UNDEFINED> instruction: 0xf8010000
    1bbc:	0003dd05 	andeq	sp, r3, r5, lsl #26
    1bc0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1bc4:	e3011000 	movw	r1, #4096	; 0x1000
    1bc8:	0100000f 	tsteq	r0, pc
    1bcc:	ae010610 	mcrge	6, 0, r0, cr1, cr0, {0}
    1bd0:	8c000000 	stchi	0, cr0, [r0], {-0}
    1bd4:	e800012b 	stmda	r0, {r0, r1, r3, r5, r8}
    1bd8:	7400012b 	strvc	r0, [r0], #-299	; 0x12b
    1bdc:	01000009 	tsteq	r0, r9
    1be0:	000008ed 	andeq	r0, r0, sp, ror #17
    1be4:	000be611 	andeq	lr, fp, r1, lsl r6
    1be8:	06100100 	ldreq	r0, [r0], -r0, lsl #2
    1bec:	000001d1 	ldrdeq	r0, [r0], -r1
    1bf0:	126c9102 	rsbne	r9, ip, #-2147483648	; 0x80000000
    1bf4:	00000c54 	andeq	r0, r0, r4, asr ip
    1bf8:	dd061201 	sfmle	f1, 4, [r6, #-4]
    1bfc:	02000003 	andeq	r0, r0, #3
    1c00:	6e127491 	cfcmpsvs	r7, mvf2, mvf1
    1c04:	01000008 	tsteq	r0, r8
    1c08:	00ae0613 	adceq	r0, lr, r3, lsl r6
    1c0c:	91020000 	mrsls	r0, (UNDEF: 2)
    1c10:	01100070 	tsteq	r0, r0, ror r0
    1c14:	00000b24 	andeq	r0, r0, r4, lsr #22
    1c18:	01062d01 	tsteq	r6, r1, lsl #26
    1c1c:	0000006a 	andeq	r0, r0, sl, rrx
    1c20:	00012be8 	andeq	r2, r1, r8, ror #23
    1c24:	00012c64 	andeq	r2, r1, r4, ror #24
    1c28:	000009a0 	andeq	r0, r0, r0, lsr #19
    1c2c:	00094901 	andeq	r4, r9, r1, lsl #18
    1c30:	0be61100 	bleq	ff986038 <_estack+0xf7976038>
    1c34:	2d010000 	stccs	0, cr0, [r1, #-0]
    1c38:	0001d106 	andeq	sp, r1, r6, lsl #2
    1c3c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1c40:	000bec11 	andeq	lr, fp, r1, lsl ip
    1c44:	062d0100 	strteq	r0, [sp], -r0, lsl #2
    1c48:	00000037 	andeq	r0, r0, r7, lsr r0
    1c4c:	12689102 	rsbne	r9, r8, #-2147483648	; 0x80000000
    1c50:	00000c54 	andeq	r0, r0, r4, asr ip
    1c54:	dd062f01 	stcle	15, cr2, [r6, #-4]
    1c58:	02000003 	andeq	r0, r0, #3
    1c5c:	6e127491 	cfcmpsvs	r7, mvf2, mvf1
    1c60:	01000008 	tsteq	r0, r8
    1c64:	006a0630 	rsbeq	r0, sl, r0, lsr r6
    1c68:	91020000 	mrsls	r0, (UNDEF: 2)
    1c6c:	011a0070 	tsteq	sl, r0, ror r0
    1c70:	00000d10 	andeq	r0, r0, r0, lsl sp
    1c74:	01064b01 	tsteq	r6, r1, lsl #22
    1c78:	00012c64 	andeq	r2, r1, r4, ror #24
    1c7c:	00012d70 	andeq	r2, r1, r0, ror sp
    1c80:	000009cc 	andeq	r0, r0, ip, asr #19
    1c84:	00097e01 	andeq	r7, r9, r1, lsl #28
    1c88:	2cd81300 	ldclcs	3, cr1, [r8], {0}
    1c8c:	2d500001 	ldclcs	0, cr0, [r0, #-4]
    1c90:	6b120001 	blvs	481c9c <WriteSemaphore+0x46c3e0>
    1c94:	01000003 	tsteq	r0, r3
    1c98:	097e067c 	ldmdbeq	lr!, {r2, r3, r4, r5, r6, r9, sl}^
    1c9c:	91020000 	mrsls	r0, (UNDEF: 2)
    1ca0:	0d000074 	stceq	0, cr0, [r0, #-464]	; 0xfffffe30
    1ca4:	00000851 	andeq	r0, r0, r1, asr r8
    1ca8:	0bcf0114 	bleq	ff3c2100 <_estack+0xf73b2100>
    1cac:	87010000 	strhi	r0, [r1, -r0]
    1cb0:	2d700106 	ldfcse	f0, [r0, #-24]!	; 0xffffffe8
    1cb4:	2e080001 	cdpcs	0, 0, cr0, cr8, cr1, {0}
    1cb8:	09f80001 	ldmibeq	r8!, {r0}^
    1cbc:	cc010000 	stcgt	0, cr0, [r1], {-0}
    1cc0:	11000009 	tstne	r0, r9
    1cc4:	000004e5 	andeq	r0, r0, r5, ror #9
    1cc8:	cc068701 	stcgt	7, cr8, [r6], {1}
    1ccc:	02000009 	andeq	r0, r0, #9
    1cd0:	ff116c91 			; <UNDEFINED> instruction: 0xff116c91
    1cd4:	0100000f 	tsteq	r0, pc
    1cd8:	00a30687 	adceq	r0, r3, r7, lsl #13
    1cdc:	91020000 	mrsls	r0, (UNDEF: 2)
    1ce0:	05041268 	streq	r1, [r4, #-616]	; 0x268
    1ce4:	89010000 	stmdbhi	r1, {}	; <UNPREDICTABLE>
    1ce8:	0000a306 	andeq	sl, r0, r6, lsl #6
    1cec:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1cf0:	09d10d00 	ldmibeq	r1, {r8, sl, fp}^
    1cf4:	04060000 	streq	r0, [r6], #-0
    1cf8:	000009d7 	ldrdeq	r0, [r0], -r7
    1cfc:	0001c60d 	andeq	ip, r1, sp, lsl #12
    1d00:	ee011000 	cdp	0, 0, cr1, cr1, cr0, {0}
    1d04:	0100000e 	tsteq	r0, lr
    1d08:	6a0106d9 	bvs	43874 <WriteSemaphore+0x2dfb8>
    1d0c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1d10:	2000012e 	andcs	r0, r0, lr, lsr #2
    1d14:	2400012f 	strcs	r0, [r0], #-303	; 0x12f
    1d18:	0100000a 	tsteq	r0, sl
    1d1c:	00000a29 	andeq	r0, r0, r9, lsr #20
    1d20:	0004e511 	andeq	lr, r4, r1, lsl r5
    1d24:	06d90100 	ldrbeq	r0, [r9], r0, lsl #2
    1d28:	000009cc 	andeq	r0, r0, ip, asr #19
    1d2c:	126c9102 	rsbne	r9, ip, #-2147483648	; 0x80000000
    1d30:	00000dfe 	strdeq	r0, [r0], -lr
    1d34:	dd06db01 	vstrle	d13, [r6, #-4]
    1d38:	02000003 	andeq	r0, r0, #3
    1d3c:	6e127091 	mrcvs	0, 0, r7, cr2, cr1, {4}
    1d40:	01000008 	tsteq	r0, r8
    1d44:	006a06dc 	ldrdeq	r0, [sl], #-108	; 0xffffff94	; <UNPREDICTABLE>
    1d48:	91020000 	mrsls	r0, (UNDEF: 2)
    1d4c:	011a0074 	tsteq	sl, r4, ror r0
    1d50:	00001049 	andeq	r1, r0, r9, asr #32
    1d54:	01070c01 	tsteq	r7, r1, lsl #24
    1d58:	00012f20 	andeq	r2, r1, r0, lsr #30
    1d5c:	00012f64 	andeq	r2, r1, r4, ror #30
    1d60:	00000a50 	andeq	r0, r0, r0, asr sl
    1d64:	000a5401 	andeq	r5, sl, r1, lsl #8
    1d68:	0ae71100 	beq	ff9c6170 <_estack+0xf79b6170>
    1d6c:	0c010000 	stceq	0, cr0, [r1], {-0}
    1d70:	000a5407 	andeq	r5, sl, r7, lsl #8
    1d74:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1d78:	0a590d00 	beq	1645180 <WriteSemaphore+0x162f8c4>
    1d7c:	04060000 	streq	r0, [r6], #-0
    1d80:	00000205 	andeq	r0, r0, r5, lsl #4
    1d84:	0f250110 	svceq	0x00250110
    1d88:	14010000 	strne	r0, [r1], #-0
    1d8c:	006a0107 	rsbeq	r0, sl, r7, lsl #2
    1d90:	2f640000 	svccs	0x00640000
    1d94:	30580001 	subscc	r0, r8, r1
    1d98:	0a7c0001 	beq	1f01da4 <WriteSemaphore+0x1eec4e8>
    1d9c:	ac010000 	stcge	0, cr0, [r1], {-0}
    1da0:	1100000a 	tstne	r0, sl
    1da4:	00000ae7 	andeq	r0, r0, r7, ror #21
    1da8:	54071401 	strpl	r1, [r7], #-1025	; 0x401
    1dac:	0200000a 	andeq	r0, r0, #10
    1db0:	fe116c91 	mrc2	12, 0, r6, cr1, cr1, {4}
    1db4:	0100000f 	tsteq	r0, pc
    1db8:	04840714 	streq	r0, [r4], #1812	; 0x714
    1dbc:	91020000 	mrsls	r0, (UNDEF: 2)
    1dc0:	086e1268 	stmdaeq	lr!, {r3, r5, r6, r9, ip}^
    1dc4:	16010000 	strne	r0, [r1], -r0
    1dc8:	00006a07 	andeq	r6, r0, r7, lsl #20
    1dcc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1dd0:	63011700 	movwvs	r1, #5888	; 0x1700
    1dd4:	0100000e 	tsteq	r0, lr
    1dd8:	58010742 	stmdapl	r1, {r1, r6, r8, r9, sl}
    1ddc:	7c000130 	stfvcs	f0, [r0], {48}	; 0x30
    1de0:	a8000130 	stmdage	r0, {r4, r5, r8}
    1de4:	0100000a 	tsteq	r0, sl
    1de8:	000d041b 	andeq	r0, sp, fp, lsl r4
    1dec:	07760100 	ldrbeq	r0, [r6, -r0, lsl #2]!
    1df0:	01307c01 	teqeq	r0, r1, lsl #24
    1df4:	0130b400 	teqeq	r0, r0, lsl #8
    1df8:	000ad400 	andeq	sp, sl, r0, lsl #8
    1dfc:	0aed0100 	beq	ffb42204 <_estack+0xf7b32204>
    1e00:	17110000 	ldrne	r0, [r1, -r0]
    1e04:	01000001 	tsteq	r0, r1
    1e08:	00370776 	eorseq	r0, r7, r6, ror r7
    1e0c:	91020000 	mrsls	r0, (UNDEF: 2)
    1e10:	4b1b0074 	blmi	6c1fe8 <WriteSemaphore+0x6ac72c>
    1e14:	0100000a 	tsteq	r0, sl
    1e18:	b40107b7 	strlt	r0, [r1], #-1975	; 0x7b7
    1e1c:	70000130 	andvc	r0, r0, r0, lsr r1
    1e20:	00000131 	andeq	r0, r0, r1, lsr r1
    1e24:	0100000b 	tsteq	r0, fp
    1e28:	00000b53 	andeq	r0, r0, r3, asr fp
    1e2c:	000c5311 	andeq	r5, ip, r1, lsl r3
    1e30:	07b70100 	ldreq	r0, [r7, r0, lsl #2]!
    1e34:	000003dd 	ldrdeq	r0, [r0], -sp
    1e38:	11749102 	cmnne	r4, r2, lsl #2
    1e3c:	00001030 	andeq	r1, r0, r0, lsr r0
    1e40:	5207b701 	andpl	fp, r7, #262144	; 0x40000
    1e44:	02000002 	andeq	r0, r0, #2
    1e48:	a7117091 			; <UNDEFINED> instruction: 0xa7117091
    1e4c:	01000004 	tsteq	r0, r4
    1e50:	007807b7 	ldrhteq	r0, [r8], #-119	; 0xffffff89
    1e54:	91020000 	mrsls	r0, (UNDEF: 2)
    1e58:	0d66116c 	stfeqe	f1, [r6, #-432]!	; 0xfffffe50
    1e5c:	b7010000 	strlt	r0, [r1, -r0]
    1e60:	0003cd07 	andeq	ip, r3, r7, lsl #26
    1e64:	68910200 	ldmvs	r1, {r9}
    1e68:	000b8e11 	andeq	r8, fp, r1, lsl lr
    1e6c:	07b70100 	ldreq	r0, [r7, r0, lsl #2]!
    1e70:	0000004e 	andeq	r0, r0, lr, asr #32
    1e74:	00009102 	andeq	r9, r0, r2, lsl #2
    1e78:	00107c1b 	andseq	r7, r0, fp, lsl ip
    1e7c:	080d0100 	stmdaeq	sp, {r8}
    1e80:	01317001 	teqeq	r1, r1
    1e84:	01322c00 	teqeq	r2, r0, lsl #24
    1e88:	000b2c00 	andeq	r2, fp, r0, lsl #24
    1e8c:	0b7d0100 	bleq	1f42294 <WriteSemaphore+0x1f2c9d8>
    1e90:	a7120000 	ldrge	r0, [r2, -r0]
    1e94:	01000004 	tsteq	r0, r4
    1e98:	0078080f 	rsbseq	r0, r8, pc, lsl #16
    1e9c:	91020000 	mrsls	r0, (UNDEF: 2)
    1ea0:	941b0074 	ldrls	r0, [fp], #-116	; 0x74
    1ea4:	0100000e 	tsteq	r0, lr
    1ea8:	2c01082d 	stccs	8, cr0, [r1], {45}	; 0x2d
    1eac:	e4000132 	str	r0, [r0], #-306	; 0x132
    1eb0:	58000132 	stmdapl	r0, {r1, r4, r5, r8}
    1eb4:	0100000b 	tsteq	r0, fp
    1eb8:	00000bca 	andeq	r0, r0, sl, asr #23
    1ebc:	01323813 	teqeq	r2, r3, lsl r8
    1ec0:	0132d000 	teqeq	r2, r0
    1ec4:	0af11200 	beq	ffc466cc <_estack+0xf7c366cc>
    1ec8:	31010000 	mrscc	r0, (UNDEF: 1)
    1ecc:	00006a08 	andeq	r6, r0, r8, lsl #20
    1ed0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1ed4:	01327813 	teqeq	r2, r3, lsl r8
    1ed8:	0132d000 	teqeq	r2, r0
    1edc:	0c531200 	lfmeq	f1, 2, [r3], {-0}
    1ee0:	3d010000 	stccc	0, cr0, [r1, #-0]
    1ee4:	0003dd08 	andeq	sp, r3, r8, lsl #26
    1ee8:	70910200 	addsvc	r0, r1, r0, lsl #4
    1eec:	1b000000 	blne	1ef4 <_start-0x610c>
    1ef0:	00000ecf 	andeq	r0, r0, pc, asr #29
    1ef4:	01085001 	tsteq	r8, r1
    1ef8:	000132e4 	andeq	r3, r1, r4, ror #5
    1efc:	00013398 	muleq	r1, r8, r3
    1f00:	00000b84 	andeq	r0, r0, r4, lsl #23
    1f04:	000bf401 	andeq	pc, fp, r1, lsl #8
    1f08:	05041100 	streq	r1, [r4, #-256]	; 0x100
    1f0c:	50010000 	andpl	r0, r1, r0
    1f10:	0000a308 	andeq	sl, r0, r8, lsl #6
    1f14:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1f18:	0b771c00 	bleq	1dc8f20 <WriteSemaphore+0x1db3664>
    1f1c:	6a010000 	bvs	41f24 <WriteSemaphore+0x2c668>
    1f20:	03dd0108 	bicseq	r0, sp, #2
    1f24:	33980000 	orrscc	r0, r8, #0
    1f28:	344c0001 	strbcc	r0, [ip], #-1
    1f2c:	0bb00001 	bleq	fec01f38 <_estack+0xf6bf1f38>
    1f30:	40010000 	andmi	r0, r1, r0
    1f34:	1100000c 	tstne	r0, ip
    1f38:	00000b8e 	andeq	r0, r0, lr, lsl #23
    1f3c:	4e086a01 	vmlami.f32	s12, s16, s2
    1f40:	02000000 	andeq	r0, r0, #0
    1f44:	9b116e91 	blls	45d990 <WriteSemaphore+0x4480d4>
    1f48:	0100000b 	tsteq	r0, fp
    1f4c:	0262086a 	rsbeq	r0, r2, #6946816	; 0x6a0000
    1f50:	91020000 	mrsls	r0, (UNDEF: 2)
    1f54:	0b551268 	bleq	15468fc <WriteSemaphore+0x1531040>
    1f58:	6c010000 	stcvs	0, cr0, [r1], {-0}
    1f5c:	0003dd08 	andeq	sp, r3, r8, lsl #26
    1f60:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1f64:	0cea1b00 	vstmiaeq	sl!, {d17-d16}
    1f68:	29010000 	stmdbcs	r1, {}	; <UNPREDICTABLE>
    1f6c:	344c0109 	strbcc	r0, [ip], #-265	; 0x109
    1f70:	347c0001 	ldrbtcc	r0, [ip], #-1
    1f74:	0bdc0001 	bleq	ff701f80 <_estack+0xf76f1f80>
    1f78:	6a010000 	bvs	41f80 <WriteSemaphore+0x2c6c4>
    1f7c:	1100000c 	tstne	r0, ip
    1f80:	00000c53 	andeq	r0, r0, r3, asr ip
    1f84:	dd092901 	stcle	9, cr2, [r9, #-4]
    1f88:	02000003 	andeq	r0, r0, #3
    1f8c:	0e007491 	mcreq	4, 0, r7, cr0, cr1, {4}
    1f90:	000001c6 	andeq	r0, r0, r6, asr #3
    1f94:	00000c7a 	andeq	r0, r0, sl, ror ip
    1f98:	0000710f 	andeq	r7, r0, pc, lsl #2
    1f9c:	1d000400 	cfstrsne	mvf0, [r0, #-0]
    1fa0:	00000f47 	andeq	r0, r0, r7, asr #30
    1fa4:	0c6aa301 	stcleq	3, cr10, [sl], #-4
    1fa8:	03050000 	movweq	r0, #20480	; 0x5000
    1fac:	00014568 	andeq	r4, r1, r8, ror #10
    1fb0:	000f701d 	andeq	r7, pc, sp, lsl r0	; <UNPREDICTABLE>
    1fb4:	c6a40100 	strtgt	r0, [r4], r0, lsl #2
    1fb8:	05000001 	streq	r0, [r0, #-1]
    1fbc:	0145cc03 	cmpeq	r5, r3, lsl #24
    1fc0:	0f821d00 	svceq	0x00821d00
    1fc4:	a5010000 	strge	r0, [r1, #-0]
    1fc8:	000001c6 	andeq	r0, r0, r6, asr #3
    1fcc:	45e00305 	strbmi	r0, [r0, #773]!	; 0x305
    1fd0:	1e1d0001 	cdpne	0, 1, cr0, cr13, cr1, {0}
    1fd4:	01000010 	tsteq	r0, r0, lsl r0
    1fd8:	000cbea6 	andeq	fp, ip, r6, lsr #29
    1fdc:	f4030500 	vst3.8	{d0,d2,d4}, [r3], r0
    1fe0:	0c000145 	stfeqs	f0, [r0], {69}	; 0x45
    1fe4:	00000851 	andeq	r0, r0, r1, asr r8
    1fe8:	000d3d1d 	andeq	r3, sp, sp, lsl sp
    1fec:	bea70100 	fdvlts	f0, f7, f0
    1ff0:	0500000c 	streq	r0, [r0, #-12]
    1ff4:	0145f803 	cmpeq	r5, r3, lsl #16
    1ff8:	0d6f1d00 	stcleq	13, cr1, [pc, #-0]	; 2000 <_start-0x6000>
    1ffc:	a8010000 	stmdage	r1, {}	; <UNPREDICTABLE>
    2000:	000001c6 	andeq	r0, r0, r6, asr #3
    2004:	45fc0305 	ldrbmi	r0, [ip, #773]!	; 0x305
    2008:	811d0001 	tsthi	sp, r1
    200c:	0100000d 	tsteq	r0, sp
    2010:	0001c6ac 	andeq	ip, r1, ip, lsr #13
    2014:	10030500 	andne	r0, r3, r0, lsl #10
    2018:	1d000146 	stfnes	f0, [r0, #-280]	; 0xfffffee8
    201c:	00000a89 	andeq	r0, r0, r9, lsl #21
    2020:	01b1ad01 			; <UNDEFINED> instruction: 0x01b1ad01
    2024:	03050000 	movweq	r0, #20480	; 0x5000
    2028:	00014624 	andeq	r4, r1, r4, lsr #12
    202c:	000aa71d 	andeq	sl, sl, sp, lsl r7
    2030:	c6b30100 	ldrtgt	r0, [r3], r0, lsl #2
    2034:	05000001 	streq	r0, [r0, #-1]
    2038:	01462803 	cmpeq	r6, r3, lsl #16
    203c:	0a721d00 	beq	1c89444 <WriteSemaphore+0x1c73b88>
    2040:	be010000 	cdplt	0, 0, cr0, cr1, cr0, {0}
    2044:	000001b1 			; <UNDEFINED> instruction: 0x000001b1
    2048:	463c0305 	ldrtmi	r0, [ip], -r5, lsl #6
    204c:	301d0001 	andscc	r0, sp, r1
    2050:	0100000c 	tsteq	r0, ip
    2054:	000d3abf 			; <UNDEFINED> instruction: 0x000d3abf
    2058:	40030500 	andmi	r0, r3, r0, lsl #10
    205c:	0c000146 	stfeqs	f0, [r0], {70}	; 0x46
    2060:	000000a3 	andeq	r0, r0, r3, lsr #1
    2064:	000d2b1d 	andeq	r2, sp, sp, lsl fp
    2068:	78c00100 	stmiavc	r0, {r8}^
    206c:	05000000 	streq	r0, [r0, #-0]
    2070:	01464403 	cmpeq	r6, r3, lsl #8
    2074:	0dba1d00 	ldceq	13, cr1, [sl]
    2078:	c1010000 	mrsgt	r0, (UNDEF: 1)
    207c:	000001b1 			; <UNDEFINED> instruction: 0x000001b1
    2080:	46480305 	strbmi	r0, [r8], -r5, lsl #6
    2084:	301d0001 	andscc	r0, sp, r1
    2088:	0100000e 	tsteq	r0, lr
    208c:	000d72c2 	andeq	r7, sp, r2, asr #5
    2090:	4c030500 	cfstr32mi	mvfx0, [r3], {-0}
    2094:	0c000146 	stfeqs	f0, [r0], {70}	; 0x46
    2098:	0000006a 	andeq	r0, r0, sl, rrx
    209c:	000bf81d 	andeq	pc, fp, sp, lsl r8	; <UNPREDICTABLE>
    20a0:	b1c30100 	biclt	r0, r3, r0, lsl #2
    20a4:	05000001 	streq	r0, [r0, #-1]
    20a8:	01465003 	cmpeq	r6, r3
    20ac:	0fbb1d00 	svceq	0x00bb1d00
    20b0:	c4010000 	strgt	r0, [r1], #-0
    20b4:	000001b1 			; <UNDEFINED> instruction: 0x000001b1
    20b8:	46540305 	ldrbmi	r0, [r4], -r5, lsl #6
    20bc:	f71d0001 			; <UNDEFINED> instruction: 0xf71d0001
    20c0:	0100000c 	tsteq	r0, ip
    20c4:	000d72c5 	andeq	r7, sp, r5, asr #5
    20c8:	58030500 	stmdapl	r3, {r8, sl}
    20cc:	1d000146 	stfnes	f0, [r0, #-280]	; 0xfffffee8
    20d0:	00000f94 	muleq	r0, r4, pc	; <UNPREDICTABLE>
    20d4:	0d72c601 	ldcleq	6, cr12, [r2, #-4]!
    20d8:	03050000 	movweq	r0, #20480	; 0x5000
    20dc:	0001465c 	andeq	r4, r1, ip, asr r6
    20e0:	000f3a1d 	andeq	r3, pc, sp, lsl sl	; <UNPREDICTABLE>
    20e4:	78c70100 	stmiavc	r7, {r8}^
    20e8:	05000000 	streq	r0, [r0, #-0]
    20ec:	01466003 	cmpeq	r6, r3
    20f0:	0da51d00 	stceq	13, cr1, [r5]
    20f4:	c8010000 	stmdagt	r1, {}	; <UNPREDICTABLE>
    20f8:	000000a3 	andeq	r0, r0, r3, lsr #1
    20fc:	44d40305 	ldrbmi	r0, [r4], #773	; 0x305
    2100:	721e0001 	andsvc	r0, lr, #1
    2104:	01000002 	tsteq	r0, r2
    2108:	000def9f 	muleq	sp, pc, pc	; <UNPREDICTABLE>
    210c:	03050100 	movweq	r0, #20736	; 0x5100
    2110:	00014564 	andeq	r4, r1, r4, ror #10
    2114:	0003dd0c 	andeq	sp, r3, ip, lsl #26
    2118:	02e40000 	rsceq	r0, r4, #0
    211c:	00020000 	andeq	r0, r2, r0
    2120:	0000076c 	andeq	r0, r0, ip, ror #14
    2124:	01370104 	teqeq	r7, r4, lsl #2
    2128:	93010000 	movwls	r0, #4096	; 0x1000
    212c:	7c000010 	stcvc	0, cr0, [r0], {16}
    2130:	50000134 	andpl	r0, r0, r4, lsr r1
    2134:	ca000139 	bgt	2620 <_start-0x59e0>
    2138:	0200000b 	andeq	r0, r0, #11
    213c:	0000074f 	andeq	r0, r0, pc, asr #14
    2140:	002cd502 	eoreq	sp, ip, r2, lsl #10
    2144:	04030000 	streq	r0, [r3], #-0
    2148:	00068a07 	andeq	r8, r6, r7, lsl #20
    214c:	06010300 	streq	r0, [r1], -r0, lsl #6
    2150:	00000674 	andeq	r0, r0, r4, ror r6
    2154:	72080103 	andvc	r0, r8, #-1073741824	; 0xc0000000
    2158:	03000006 	movweq	r0, #6
    215c:	062e0502 	strteq	r0, [lr], -r2, lsl #10
    2160:	02030000 	andeq	r0, r3, #0
    2164:	0000b007 	andeq	fp, r0, r7
    2168:	05040400 	streq	r0, [r4, #-1024]	; 0x400
    216c:	00746e69 	rsbseq	r6, r4, r9, ror #28
    2170:	56050803 	strpl	r0, [r5], -r3, lsl #16
    2174:	03000006 	movweq	r0, #6
    2178:	06800708 	streq	r0, [r0], r8, lsl #14
    217c:	04030000 	streq	r0, [r3], #-0
    2180:	00065b05 	andeq	r5, r6, r5, lsl #22
    2184:	07040300 	streq	r0, [r4, -r0, lsl #6]
    2188:	0000010e 	andeq	r0, r0, lr, lsl #2
    218c:	04030405 	streq	r0, [r3], #-1029	; 0x405
    2190:	00068507 	andeq	r8, r6, r7, lsl #10
    2194:	3a040600 	bcc	10399c <WriteSemaphore+0xee0e0>
    2198:	03000000 	movweq	r0, #0
    219c:	067b0801 	ldrbteq	r0, [fp], -r1, lsl #16
    21a0:	55070000 	strpl	r0, [r7, #-0]
    21a4:	00000011 	andeq	r0, r0, r1, lsl r0
    21a8:	ac5c0110 	ldfgee	f0, [ip], {16}
    21ac:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    21b0:	00001167 	andeq	r1, r0, r7, ror #2
    21b4:	00ac5f01 	adceq	r5, ip, r1, lsl #30
    21b8:	60080000 	andvs	r0, r8, r0
    21bc:	01000011 	tsteq	r0, r1, lsl r0
    21c0:	0000b863 	andeq	fp, r0, r3, ror #16
    21c4:	b1090000 	mrslt	r0, (UNDEF: 9)
    21c8:	03000000 	movweq	r0, #0
    21cc:	11210408 	teqne	r1, r8, lsl #8
    21d0:	3a0a0000 	bcc	2821d8 <WriteSemaphore+0x26c91c>
    21d4:	c9000000 	stmdbgt	r0, {}	; <UNPREDICTABLE>
    21d8:	0b000000 	bleq	21e0 <_start-0x5e20>
    21dc:	0000006b 	andeq	r0, r0, fp, rrx
    21e0:	0c000fff 	stceq	15, cr0, [r0], {255}	; 0xff
    21e4:	00001108 	andeq	r1, r0, r8, lsl #2
    21e8:	f2680108 	vrhadd.s32	d16, d8, d8
    21ec:	0d000000 	stceq	0, cr0, [r0, #-0]
    21f0:	00001228 	andeq	r1, r0, r8, lsr #4
    21f4:	00f26a01 	rscseq	r6, r2, r1, lsl #20
    21f8:	23020000 	movwcs	r0, #8192	; 0x2000
    21fc:	116e0d00 	cmnne	lr, r0, lsl #26
    2200:	6b010000 	blvs	42208 <WriteSemaphore+0x2c94c>
    2204:	00000021 	andeq	r0, r0, r1, lsr #32
    2208:	00042302 	andeq	r2, r4, r2, lsl #6
    220c:	00c90406 	sbceq	r0, r9, r6, lsl #8
    2210:	da020000 	ble	82218 <WriteSemaphore+0x6c95c>
    2214:	01000011 	tsteq	r0, r1, lsl r0
    2218:	0000c96c 	andeq	ip, r0, ip, ror #18
    221c:	37010e00 	strcc	r0, [r1, -r0, lsl #28]
    2220:	01000011 	tsteq	r0, r1, lsl r0
    2224:	00720192 			; <UNDEFINED> instruction: 0x00720192
    2228:	347c0000 	ldrbtcc	r0, [ip], #-0
    222c:	36580001 	ldrbcc	r0, [r8], -r1
    2230:	0c080001 	stceq	0, cr0, [r8], {1}
    2234:	68010000 	stmdavs	r1, {}	; <UNPREDICTABLE>
    2238:	0f000001 	svceq	0x00000001
    223c:	000011ef 	andeq	r1, r0, pc, ror #3
    2240:	00219201 	eoreq	r9, r1, r1, lsl #4
    2244:	91020000 	mrsls	r0, (UNDEF: 2)
    2248:	11281064 	teqne	r8, r4, rrx
    224c:	94010000 	strls	r0, [r1], #-0
    2250:	00000168 	andeq	r0, r0, r8, ror #2
    2254:	10749102 	rsbsne	r9, r4, r2, lsl #2
    2258:	00001185 	andeq	r1, r0, r5, lsl #3
    225c:	01689401 	cmneq	r8, r1, lsl #8
    2260:	91020000 	mrsls	r0, (UNDEF: 2)
    2264:	12191070 	andsne	r1, r9, #112	; 0x70
    2268:	94010000 	strls	r0, [r1], #-0
    226c:	00000168 	andeq	r0, r0, r8, ror #2
    2270:	10689102 	rsbne	r9, r8, r2, lsl #2
    2274:	000011a4 	andeq	r1, r0, r4, lsr #3
    2278:	00729501 	rsbseq	r9, r2, r1, lsl #10
    227c:	91020000 	mrsls	r0, (UNDEF: 2)
    2280:	0406006c 	streq	r0, [r6], #-108	; 0x6c
    2284:	000000f8 	strdeq	r0, [r0], -r8
    2288:	11fb0111 	mvnsne	r0, r1, lsl r1
    228c:	ee010000 	cdp	0, 0, cr0, cr1, cr0, {0}
    2290:	01365801 	teqeq	r6, r1, lsl #16
    2294:	0136d800 	teqeq	r6, r0, lsl #16
    2298:	000c3400 	andeq	r3, ip, r0, lsl #8
    229c:	01b20100 			; <UNDEFINED> instruction: 0x01b20100
    22a0:	70120000 	andsvc	r0, r2, r0
    22a4:	ee010076 	mcr	0, 0, r0, cr1, cr6, {3}
    22a8:	00000072 	andeq	r0, r0, r2, ror r0
    22ac:	136c9102 	cmnne	ip, #-2147483648	; 0x80000000
    22b0:	00637570 	rsbeq	r7, r3, r0, ror r5
    22b4:	007bf001 	rsbseq	pc, fp, r1
    22b8:	91020000 	mrsls	r0, (UNDEF: 2)
    22bc:	11301074 	teqne	r0, r4, ror r0
    22c0:	f1010000 	setend	le
    22c4:	00000168 	andeq	r0, r0, r8, ror #2
    22c8:	00709102 	rsbseq	r9, r0, r2, lsl #2
    22cc:	10f30114 	rscsne	r0, r3, r4, lsl r1
    22d0:	07010000 	streq	r0, [r1, -r0]
    22d4:	00210101 	eoreq	r0, r1, r1, lsl #2
    22d8:	36d80000 	ldrbcc	r0, [r8], r0
    22dc:	36fc0001 	ldrbtcc	r0, [ip], r1
    22e0:	0c600001 	stcleq	0, cr0, [r0], #-4
    22e4:	15010000 	strne	r0, [r1, #-0]
    22e8:	0011ad01 	andseq	sl, r1, r1, lsl #26
    22ec:	010d0100 	mrseq	r0, (UNDEF: 29)
    22f0:	0136fc01 	teqeq	r6, r1, lsl #24
    22f4:	01371000 	teqeq	r7, r0
    22f8:	000c8c00 	andeq	r8, ip, r0, lsl #24
    22fc:	15160100 	ldrne	r0, [r6, #-256]	; 0x100
    2300:	01000011 	tsteq	r0, r1, lsl r0
    2304:	10010113 	andne	r0, r1, r3, lsl r1
    2308:	00000137 	andeq	r0, r0, r7, lsr r1
    230c:	b8000138 	stmdalt	r0, {r3, r4, r5, r8}
    2310:	0100000c 	tsteq	r0, ip
    2314:	0000021d 	andeq	r0, r0, sp, lsl r2
    2318:	00114417 	andseq	r4, r1, r7, lsl r4
    231c:	01150100 	tsteq	r5, r0, lsl #2
    2320:	00000168 	andeq	r0, r0, r8, ror #2
    2324:	17709102 	ldrbne	r9, [r0, -r2, lsl #2]!
    2328:	00001238 	andeq	r1, r0, r8, lsr r2
    232c:	7b011601 	blvc	47b38 <WriteSemaphore+0x3227c>
    2330:	02000000 	andeq	r0, r0, #0
    2334:	16007491 			; <UNDEFINED> instruction: 0x16007491
    2338:	000010d8 	ldrdeq	r1, [r0], -r8
    233c:	01013401 	tsteq	r1, r1, lsl #8
    2340:	00013800 	andeq	r3, r1, r0, lsl #16
    2344:	00013950 	andeq	r3, r1, r0, asr r9
    2348:	00000ce4 	andeq	r0, r0, r4, ror #25
    234c:	00026501 	andeq	r6, r2, r1, lsl #10
    2350:	12431800 	subne	r1, r3, #0
    2354:	34010000 	strcc	r0, [r1], #-0
    2358:	00016801 	andeq	r6, r1, r1, lsl #16
    235c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    2360:	00069717 	andeq	r9, r6, r7, lsl r7
    2364:	01360100 	teqeq	r6, r0, lsl #2
    2368:	00000168 	andeq	r0, r0, r8, ror #2
    236c:	19749102 	ldmdbne	r4!, {r1, r8, ip, pc}^
    2370:	00637570 	rsbeq	r7, r3, r0, ror r5
    2374:	7b013701 	blvc	4ff80 <WriteSemaphore+0x3a6c4>
    2378:	02000000 	andeq	r0, r0, #0
    237c:	10007091 	mulne	r0, r1, r0
    2380:	00001179 	andeq	r1, r0, r9, ror r1
    2384:	00886401 	addeq	r6, r8, r1, lsl #8
    2388:	03050000 	movweq	r0, #20480	; 0x5000
    238c:	00014668 	andeq	r4, r1, r8, ror #12
    2390:	0011c310 	andseq	ip, r1, r0, lsl r3
    2394:	87820100 	strhi	r0, [r2, r0, lsl #2]
    2398:	05000002 	streq	r0, [r0, #-2]
    239c:	0141cc03 	cmpeq	r1, r3, lsl #24
    23a0:	00481a00 	subeq	r1, r8, r0, lsl #20
    23a4:	95100000 	ldrls	r0, [r0, #-0]
    23a8:	01000011 	tsteq	r0, r1, lsl r0
    23ac:	00029d85 	andeq	r9, r2, r5, lsl #27
    23b0:	d0030500 	andle	r0, r3, r0, lsl #10
    23b4:	1a000141 	bne	28c0 <_start-0x5740>
    23b8:	00000021 	andeq	r0, r0, r1, lsr #32
    23bc:	0011d310 	andseq	sp, r1, r0, lsl r3
    23c0:	f8880100 			; <UNDEFINED> instruction: 0xf8880100
    23c4:	05000000 	streq	r0, [r0, #-0]
    23c8:	01566803 	cmpeq	r6, r3, lsl #16
    23cc:	117f1000 	cmnne	pc, r0
    23d0:	88010000 	stmdahi	r1, {}	; <UNPREDICTABLE>
    23d4:	00000168 	andeq	r0, r0, r8, ror #2
    23d8:	56700305 	ldrbtpl	r0, [r0], -r5, lsl #6
    23dc:	05100001 	ldreq	r0, [r0, #-1]
    23e0:	01000012 	tsteq	r0, r2, lsl r0
    23e4:	0000218c 	andeq	r2, r0, ip, lsl #3
    23e8:	d8030500 	stmdale	r3, {r8, sl}
    23ec:	1b000144 	blne	2904 <_start-0x56fc>
    23f0:	000011e5 	andeq	r1, r0, r5, ror #3
    23f4:	00219101 	eoreq	r9, r1, r1, lsl #2
    23f8:	05010000 	streq	r0, [r1, #-0]
    23fc:	01567403 	cmpeq	r6, r3, lsl #8
    2400:	03530000 	cmpeq	r3, #0
    2404:	00020000 	andeq	r0, r2, r0
    2408:	00000905 	andeq	r0, r0, r5, lsl #18
    240c:	01370104 	teqeq	r7, r4, lsl #2
    2410:	dc010000 	stcle	0, cr0, [r1], {-0}
    2414:	68000012 	stmdavs	r0, {r1, r4}
    2418:	c0000139 	andgt	r0, r0, r9, lsr r1
    241c:	ee00013c 	mcr	1, 0, r0, cr0, cr12, {1}
    2420:	0200000c 	andeq	r0, r0, #12
    2424:	00001368 	andeq	r1, r0, r8, ror #6
    2428:	002c0b02 	eoreq	r0, ip, r2, lsl #22
    242c:	04030000 	streq	r0, [r3], #-0
    2430:	00000032 	andeq	r0, r0, r2, lsr r0
    2434:	00430104 	subeq	r0, r3, r4, lsl #2
    2438:	43050000 	movwmi	r0, #20480	; 0x5000
    243c:	05000000 	streq	r0, [r0, #-0]
    2440:	0000004a 	andeq	r0, r0, sl, asr #32
    2444:	05040600 	streq	r0, [r4, #-1536]	; 0x600
    2448:	00746e69 	rsbseq	r6, r4, r9, ror #28
    244c:	08080407 	stmdaeq	r8, {r0, r1, r2, sl}
    2450:	00710d02 	rsbseq	r0, r1, r2, lsl #26
    2454:	d1090000 	mrsle	r0, (UNDEF: 9)
    2458:	02000012 	andeq	r0, r0, #18
    245c:	0000210e 	andeq	r2, r0, lr, lsl #2
    2460:	00230200 	eoreq	r0, r3, r0, lsl #4
    2464:	00007a09 	andeq	r7, r0, r9, lsl #20
    2468:	4a0f0200 	bmi	3c2c70 <WriteSemaphore+0x3ad3b4>
    246c:	02000000 	andeq	r0, r0, #0
    2470:	02000423 	andeq	r0, r0, #587202560	; 0x23000000
    2474:	0000137d 	andeq	r1, r0, sp, ror r3
    2478:	004c1002 	subeq	r1, ip, r2
    247c:	28080000 	stmdacs	r8, {}	; <UNPREDICTABLE>
    2480:	01110c01 	tsteq	r1, r1, lsl #24
    2484:	9e090000 	cdpls	0, 0, cr0, cr9, cr0, {0}
    2488:	01000013 	tsteq	r0, r3, lsl r0
    248c:	0001110d 	andeq	r1, r1, sp, lsl #2
    2490:	00230200 	eoreq	r0, r3, r0, lsl #4
    2494:	00125309 	andseq	r5, r2, r9, lsl #6
    2498:	110e0100 	mrsne	r0, (UNDEF: 30)
    249c:	02000001 	andeq	r0, r0, #1
    24a0:	5c090423 	cfstrspl	mvf0, [r9], {35}	; 0x23
    24a4:	01000012 	tsteq	r0, r2, lsl r0
    24a8:	0001110f 	andeq	r1, r1, pc, lsl #2
    24ac:	08230200 	stmdaeq	r3!, {r9}
    24b0:	00129309 	andseq	r9, r2, r9, lsl #6
    24b4:	11100100 	tstne	r0, r0, lsl #2
    24b8:	02000001 	andeq	r0, r0, #1
    24bc:	a7090c23 	strge	r0, [r9, -r3, lsr #24]
    24c0:	01000013 	tsteq	r0, r3, lsl r0
    24c4:	00011111 	andeq	r1, r1, r1, lsl r1
    24c8:	10230200 	eorne	r0, r3, r0, lsl #4
    24cc:	00133409 	andseq	r3, r3, r9, lsl #8
    24d0:	11120100 	tstne	r2, r0, lsl #2
    24d4:	02000001 	andeq	r0, r0, #1
    24d8:	bf091423 	svclt	0x00091423
    24dc:	01000012 	tsteq	r0, r2, lsl r0
    24e0:	00011113 	andeq	r1, r1, r3, lsl r1
    24e4:	18230200 	stmdane	r3!, {r9}
    24e8:	00133c09 	andseq	r3, r3, r9, lsl #24
    24ec:	11140100 	tstne	r4, r0, lsl #2
    24f0:	02000001 	andeq	r0, r0, #1
    24f4:	45091c23 	strmi	r1, [r9, #-3107]	; 0xc23
    24f8:	01000013 	tsteq	r0, r3, lsl r0
    24fc:	00011115 	andeq	r1, r1, r5, lsl r1
    2500:	20230200 	eorcs	r0, r3, r0, lsl #4
    2504:	00126509 	andseq	r6, r2, r9, lsl #10
    2508:	11160100 	tstne	r6, r0, lsl #2
    250c:	02000001 	andeq	r0, r0, #1
    2510:	0a002423 	beq	b5a4 <__module_entries_end+0x3500>
    2514:	06850704 	streq	r0, [r5], r4, lsl #14
    2518:	72020000 	andvc	r0, r2, #0
    251c:	01000012 	tsteq	r0, r2, lsl r0
    2520:	00007c17 	andeq	r7, r0, r7, lsl ip
    2524:	138e0b00 	orrne	r0, lr, #0
    2528:	1e010000 	cdpne	0, 0, cr0, cr1, cr0, {0}
    252c:	00013968 	andeq	r3, r1, r8, ror #18
    2530:	00013988 	andeq	r3, r1, r8, lsl #19
    2534:	00000d10 	andeq	r0, r0, r0, lsl sp
    2538:	12b40b01 	adcsne	r0, r4, #1024	; 0x400
    253c:	24010000 	strcs	r0, [r1], #-0
    2540:	00013988 	andeq	r3, r1, r8, lsl #19
    2544:	000139a8 	andeq	r3, r1, r8, lsr #19
    2548:	00000d3c 	andeq	r0, r0, ip, lsr sp
    254c:	29010c01 	stmdbcs	r1, {r0, sl, fp}
    2550:	01000013 	tsteq	r0, r3, lsl r0
    2554:	0139a836 	teqeq	r9, r6, lsr r8
    2558:	013ab800 	teqeq	sl, r0, lsl #16
    255c:	000d6800 	andeq	r6, sp, r0, lsl #16
    2560:	01ca0100 	biceq	r0, sl, r0, lsl #2
    2564:	9b0d0000 	blls	34256c <WriteSemaphore+0x32ccb0>
    2568:	01000012 	tsteq	r0, r2, lsl r0
    256c:	0001113f 	andeq	r1, r1, pc, lsr r1
    2570:	0d540100 	ldfeqe	f0, [r4, #-0]
    2574:	000012aa 	andeq	r1, r0, sl, lsr #5
    2578:	01114001 	tsteq	r1, r1
    257c:	55010000 	strpl	r0, [r1, #-0]
    2580:	706d740e 	rsbvc	r7, sp, lr, lsl #8
    2584:	11410100 	mrsne	r0, (UNDEF: 81)
    2588:	01000001 	tsteq	r0, r1
    258c:	12840f56 	addne	r0, r4, #344	; 0x158
    2590:	60010000 	andvs	r0, r1, r0
    2594:	00013a2c 	andeq	r3, r1, ip, lsr #20
    2598:	007a6c0e 	rsbseq	r6, sl, lr, lsl #24
    259c:	01116501 	tsteq	r1, r1, lsl #10
    25a0:	91020000 	mrsls	r0, (UNDEF: 2)
    25a4:	3a34105c 	bcc	d0671c <WriteSemaphore+0xcf0e60>
    25a8:	3a480001 	bcc	12025b4 <WriteSemaphore+0x11eccf8>
    25ac:	210d0001 	tstcs	sp, r1
    25b0:	01000013 	tsteq	r0, r3, lsl r0
    25b4:	00011165 	andeq	r1, r1, r5, ror #2
    25b8:	60910200 	addsvs	r0, r1, r0, lsl #4
    25bc:	0013980d 	andseq	r9, r3, sp, lsl #16
    25c0:	11650100 	cmnne	r5, r0, lsl #2
    25c4:	02000001 	andeq	r0, r0, #1
    25c8:	00006491 	muleq	r0, r1, r4
    25cc:	00135c11 	andseq	r5, r3, r1, lsl ip
    25d0:	01720100 	cmneq	r2, r0, lsl #2
    25d4:	00013ab8 			; <UNDEFINED> instruction: 0x00013ab8
    25d8:	00013ad8 	ldrdeq	r3, [r1], -r8
    25dc:	00000d94 	muleq	r0, r4, sp
    25e0:	00020001 	andeq	r0, r2, r1
    25e4:	00001200 	andeq	r1, r0, r0, lsl #4
    25e8:	72010000 	andvc	r0, r1, #0
    25ec:	00000043 	andeq	r0, r0, r3, asr #32
    25f0:	12749102 	rsbsne	r9, r4, #-2147483648	; 0x80000000
    25f4:	0000007a 	andeq	r0, r0, sl, ror r0
    25f8:	004a7201 	subeq	r7, sl, r1, lsl #4
    25fc:	91020000 	mrsls	r0, (UNDEF: 2)
    2600:	01130070 	tsteq	r3, r0, ror r0
    2604:	00000180 	andeq	r0, r0, r0, lsl #3
    2608:	00437a01 	subeq	r7, r3, r1, lsl #20
    260c:	3ad80000 	bcc	ff602614 <_estack+0xf75f2614>
    2610:	3b540001 	blcc	150261c <WriteSemaphore+0x14ecd60>
    2614:	0dc00001 	stcleq	0, cr0, [r0, #4]
    2618:	2a010000 	bcs	42620 <WriteSemaphore+0x2cd64>
    261c:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    2620:	7b010069 	blvc	427cc <WriteSemaphore+0x2cf10>
    2624:	00000043 	andeq	r0, r0, r3, asr #32
    2628:	00749102 	rsbseq	r9, r4, r2, lsl #2
    262c:	00cf0114 	sbceq	r0, pc, r4, lsl r1	; <UNPREDICTABLE>
    2630:	85010000 	strhi	r0, [r1, #-0]
    2634:	00004301 	andeq	r4, r0, r1, lsl #6
    2638:	013b5400 	teqeq	fp, r0, lsl #8
    263c:	013bb800 	teqeq	fp, r0, lsl #16
    2640:	000dec00 	andeq	lr, sp, r0, lsl #24
    2644:	02730100 	rsbseq	r0, r3, #0
    2648:	00120000 	andseq	r0, r2, r0
    264c:	01000000 	mrseq	r0, (UNDEF: 0)
    2650:	00004385 	andeq	r4, r0, r5, lsl #7
    2654:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2658:	0012d112 	andseq	sp, r2, r2, lsl r1
    265c:	21850100 	orrcs	r0, r5, r0, lsl #2
    2660:	02000000 	andeq	r0, r0, #0
    2664:	7a127091 	bvc	49e8b0 <WriteSemaphore+0x488ff4>
    2668:	01000000 	mrseq	r0, (UNDEF: 0)
    266c:	00004a85 	andeq	r4, r0, r5, lsl #21
    2670:	6c910200 	lfmvs	f0, 4, [r1], {0}
    2674:	92011500 	andls	r1, r1, #0
    2678:	01000000 	mrseq	r0, (UNDEF: 0)
    267c:	00430190 	umaaleq	r0, r3, r0, r1
    2680:	3bb80000 	blcc	fee02688 <_estack+0xf6df2688>
    2684:	3c340001 	ldccc	0, cr0, [r4], #-4
    2688:	0e180001 	cdpeq	0, 1, cr0, cr8, cr1, {0}
    268c:	ae010000 	cdpge	0, 0, cr0, cr1, cr0, {0}
    2690:	12000002 	andne	r0, r0, #2
    2694:	00000000 	andeq	r0, r0, r0
    2698:	00439001 	subeq	r9, r3, r1
    269c:	91020000 	mrsls	r0, (UNDEF: 2)
    26a0:	12cb0d6c 	sbcne	r0, fp, #6912	; 0x1b00
    26a4:	92010000 	andls	r0, r1, #0
    26a8:	00000111 	andeq	r0, r0, r1, lsl r1
    26ac:	00749102 	rsbseq	r9, r4, r2, lsl #2
    26b0:	00810115 	addeq	r0, r1, r5, lsl r1
    26b4:	a1010000 	mrsge	r0, (UNDEF: 1)
    26b8:	00004301 	andeq	r4, r0, r1, lsl #6
    26bc:	013c3400 	teqeq	ip, r0, lsl #8
    26c0:	013c9000 	teqeq	ip, r0
    26c4:	000e4400 	andeq	r4, lr, r0, lsl #8
    26c8:	02db0100 	sbcseq	r0, fp, #0
    26cc:	00120000 	andseq	r0, r2, r0
    26d0:	01000000 	mrseq	r0, (UNDEF: 0)
    26d4:	000043a1 	andeq	r4, r0, r1, lsr #7
    26d8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    26dc:	10011600 	andne	r1, r1, r0, lsl #12
    26e0:	01000013 	tsteq	r0, r3, lsl r0
    26e4:	000043ab 	andeq	r4, r0, fp, lsr #7
    26e8:	013c9000 	teqeq	ip, r0
    26ec:	013ca800 	teqeq	ip, r0, lsl #16
    26f0:	000e7000 	andeq	r7, lr, r0
    26f4:	01160100 	tsteq	r6, r0, lsl #2
    26f8:	000000f3 	strdeq	r0, [r0], -r3
    26fc:	0043b001 	subeq	fp, r3, r1
    2700:	3ca80000 	stccc	0, cr0, [r8]
    2704:	3cc00001 	stclcc	0, cr0, [r0], {1}
    2708:	0e9c0001 	cdpeq	0, 9, cr0, cr12, cr1, {0}
    270c:	17010000 	strne	r0, [r1, -r0]
    2710:	00000071 	andeq	r0, r0, r1, ror r0
    2714:	0000031d 	andeq	r0, r0, sp, lsl r3
    2718:	00031d18 	andeq	r1, r3, r8, lsl sp
    271c:	0a004700 	beq	14324 <memset+0x14>
    2720:	010e0704 	tsteq	lr, r4, lsl #14
    2724:	4e0d0000 	cdpmi	0, 0, cr0, cr13, cr0, {0}
    2728:	01000013 	tsteq	r0, r3, lsl r0
    272c:	00030d09 	andeq	r0, r3, r9, lsl #26
    2730:	78030500 	stmdavc	r3, {r8, sl}
    2734:	0d000156 	stfeqs	f0, [r0, #-344]	; 0xfffffea8
    2738:	00000124 	andeq	r0, r0, r4, lsr #2
    273c:	03461901 	movteq	r1, #26881	; 0x6901
    2740:	03050000 	movweq	r0, #20480	; 0x5000
    2744:	000141d4 	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
    2748:	00034b19 	andeq	r4, r3, r9, lsl fp
    274c:	51040300 	mrspl	r0, LR_abt
    2750:	1a000003 	bne	2764 <_start-0x589c>
    2754:	00000118 	andeq	r0, r0, r8, lsl r1
    2758:	0001c200 	andeq	ip, r1, r0, lsl #4
    275c:	87000200 	strhi	r0, [r0, -r0, lsl #4]
    2760:	0400000a 	streq	r0, [r0], #-10
    2764:	00013701 	andeq	r3, r1, r1, lsl #14
    2768:	140e0100 	strne	r0, [lr], #-256	; 0x100
    276c:	3cc00000 	stclcc	0, cr0, [r0], {0}
    2770:	3e3c0001 	cdpcc	0, 3, cr0, cr12, cr1, {0}
    2774:	0dd30001 	ldcleq	0, cr0, [r3, #4]
    2778:	4c020000 	stcmi	0, cr0, [r2], {-0}
    277c:	00b60601 	adcseq	r0, r6, r1, lsl #12
    2780:	e2030000 	and	r0, r3, #0
    2784:	01000013 	tsteq	r0, r3, lsl r0
    2788:	0000b607 	andeq	fp, r0, r7, lsl #12
    278c:	00230200 	eoreq	r0, r3, r0, lsl #4
    2790:	00146903 	andseq	r6, r4, r3, lsl #18
    2794:	cd080100 	stfgts	f0, [r8, #-0]
    2798:	02000000 	andeq	r0, r0, #0
    279c:	f4031823 	vst2.8	{d1-d2}, [r3 :128], r3
    27a0:	01000013 	tsteq	r0, r3, lsl r0
    27a4:	0000d409 	andeq	sp, r0, r9, lsl #8
    27a8:	1c230200 	sfmne	f0, 4, [r3], #-0
    27ac:	00147403 	andseq	r7, r4, r3, lsl #8
    27b0:	cd0a0100 	stfgts	f0, [sl, #-0]
    27b4:	02000000 	andeq	r0, r0, #0
    27b8:	08032423 	stmdaeq	r3, {r0, r1, r5, sl, sp}
    27bc:	01000014 	tsteq	r0, r4, lsl r0
    27c0:	0000d40b 	andeq	sp, r0, fp, lsl #8
    27c4:	28230200 	stmdacs	r3!, {r9}
    27c8:	0013af03 	andseq	sl, r3, r3, lsl #30
    27cc:	cd0c0100 	stfgts	f0, [ip, #-0]
    27d0:	02000000 	andeq	r0, r0, #0
    27d4:	ee033023 	cdp	0, 0, cr3, cr3, cr3, {1}
    27d8:	01000013 	tsteq	r0, r3, lsl r0
    27dc:	0000d40d 	andeq	sp, r0, sp, lsl #8
    27e0:	34230200 	strtcc	r0, [r3], #-512	; 0x200
    27e4:	0013ba03 	andseq	fp, r3, r3, lsl #20
    27e8:	cd0e0100 	stfgts	f0, [lr, #-0]
    27ec:	02000000 	andeq	r0, r0, #0
    27f0:	53033c23 	movwpl	r3, #15395	; 0x3c23
    27f4:	01000014 	tsteq	r0, r4, lsl r0
    27f8:	0000d40f 	andeq	sp, r0, pc, lsl #8
    27fc:	40230200 	eormi	r0, r3, r0, lsl #4
    2800:	0013c503 	andseq	ip, r3, r3, lsl #10
    2804:	cd100100 	ldfgts	f0, [r0, #-0]
    2808:	02000000 	andeq	r0, r0, #0
    280c:	04004823 	streq	r4, [r0], #-2083	; 0x823
    2810:	000000cd 	andeq	r0, r0, sp, asr #1
    2814:	000000c6 	andeq	r0, r0, r6, asr #1
    2818:	0000c605 	andeq	ip, r0, r5, lsl #12
    281c:	06000500 	streq	r0, [r0], -r0, lsl #10
    2820:	010e0704 	tsteq	lr, r4, lsl #14
    2824:	04060000 	streq	r0, [r6], #-0
    2828:	00068507 	andeq	r8, r6, r7, lsl #10
    282c:	00cd0400 	sbceq	r0, sp, r0, lsl #8
    2830:	00e40000 	rsceq	r0, r4, r0
    2834:	c6050000 	strgt	r0, [r5], -r0
    2838:	01000000 	mrseq	r0, (UNDEF: 0)
    283c:	13d00700 	bicsne	r0, r0, #0
    2840:	12010000 	andne	r0, r1, #0
    2844:	00000021 	andeq	r0, r0, r1, lsr #32
    2848:	14590108 	ldrbne	r0, [r9], #-264	; 0x108
    284c:	17010000 	strne	r0, [r1, -r0]
    2850:	013cc001 	teqeq	ip, r1
    2854:	013d9c00 	teqeq	sp, r0, lsl #24
    2858:	000ec800 	andeq	ip, lr, r0, lsl #16
    285c:	01500100 	cmpeq	r0, r0, lsl #2
    2860:	44090000 	strmi	r0, [r9], #-0
    2864:	01000014 	tsteq	r0, r4, lsl r0
    2868:	00015017 	andeq	r5, r1, r7, lsl r0
    286c:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    2870:	00144b09 	andseq	r4, r4, r9, lsl #22
    2874:	50170100 	andspl	r0, r7, r0, lsl #2
    2878:	02000001 	andeq	r0, r0, #1
    287c:	010a6091 	swpeq	r6, r1, [sl]
    2880:	01000014 	tsteq	r0, r4, lsl r0
    2884:	00015719 	andeq	r5, r1, r9, lsl r7
    2888:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    288c:	6c61760b 	stclvs	6, cr7, [r1], #-44	; 0xffffffd4
    2890:	cd1b0100 	ldfgts	f0, [fp, #-0]
    2894:	02000000 	andeq	r0, r0, #0
    2898:	e90a7091 	stmdb	sl, {r0, r4, r7, ip, sp, lr}
    289c:	01000013 	tsteq	r0, r3, lsl r0
    28a0:	0001571d 	andeq	r5, r1, sp, lsl r7
    28a4:	6c910200 	lfmvs	f0, 4, [r1], {0}
    28a8:	07040600 	streq	r0, [r4, -r0, lsl #12]
    28ac:	0000068a 	andeq	r0, r0, sl, lsl #13
    28b0:	6905040c 	stmdbvs	r5, {r2, r3, sl}
    28b4:	0800746e 	stmdaeq	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    28b8:	00143c01 	andseq	r3, r4, r1, lsl #24
    28bc:	01230100 	teqeq	r3, r0, lsl #2
    28c0:	00013d9c 	muleq	r1, ip, sp
    28c4:	00013e3c 	andeq	r3, r1, ip, lsr lr
    28c8:	00000ef4 	strdeq	r0, [r0], -r4
    28cc:	0001a301 	andeq	sl, r1, r1, lsl #6
    28d0:	14440900 	strbne	r0, [r4], #-2304	; 0x900
    28d4:	23010000 	movwcs	r0, #4096	; 0x1000
    28d8:	00000150 	andeq	r0, r0, r0, asr r1
    28dc:	096c9102 	stmdbeq	ip!, {r1, r8, ip, pc}^
    28e0:	000013fa 	strdeq	r1, [r0], -sl
    28e4:	01502301 	cmpeq	r0, r1, lsl #6
    28e8:	91020000 	mrsls	r0, (UNDEF: 2)
    28ec:	14010a68 	strne	r0, [r1], #-2664	; 0xa68
    28f0:	24010000 	strcs	r0, [r1], #-0
    28f4:	00000157 	andeq	r0, r0, r7, asr r1
    28f8:	00749102 	rsbseq	r9, r4, r2, lsl #2
    28fc:	0001240d 	andeq	r2, r1, sp, lsl #8
    2900:	b5140100 	ldrlt	r0, [r4, #-256]	; 0x100
    2904:	01000001 	tsteq	r0, r1
    2908:	41d80305 	bicsmi	r0, r8, r5, lsl #6
    290c:	ba0e0001 	blt	382918 <WriteSemaphore+0x36d05c>
    2910:	0f000001 	svceq	0x00000001
    2914:	0001c004 	andeq	ip, r1, r4
    2918:	00e41000 	rsceq	r1, r4, r0
    291c:	f3000000 	vhadd.u8	d0, d0, d0
    2920:	02000000 	andeq	r0, r0, #0
    2924:	000b5900 	andeq	r5, fp, r0, lsl #18
    2928:	37010400 	strcc	r0, [r1, -r0, lsl #8]
    292c:	01000001 	tsteq	r0, r1
    2930:	0000147f 	andeq	r1, r0, pc, ror r4
    2934:	00013e3c 	andeq	r3, r1, ip, lsr lr
    2938:	00013ff4 	strdeq	r3, [r1], -r4
    293c:	00000e42 	andeq	r0, r0, r2, asr #28
    2940:	69050402 	stmdbvs	r5, {r1, sl}
    2944:	0300746e 	movweq	r7, #1134	; 0x46e
    2948:	068a0704 	streq	r0, [sl], r4, lsl #14
    294c:	04040000 	streq	r0, [r4], #-0
    2950:	00005605 	andeq	r5, r0, r5, lsl #12
    2954:	3c1f0200 	lfmcc	f0, 4, [pc], {-0}
    2958:	03000000 	movweq	r0, #0
    295c:	06850704 	streq	r0, [r5], r4, lsl #14
    2960:	04030000 	streq	r0, [r3], #-0
    2964:	00065b05 	andeq	r5, r6, r5, lsl #22
    2968:	08760500 	ldmdaeq	r6!, {r8, sl}^
    296c:	57030000 	strpl	r0, [r3, -r0]
    2970:	0000002f 	andeq	r0, r0, pc, lsr #32
    2974:	0014bb05 	andseq	fp, r4, r5, lsl #22
    2978:	4a4c0400 	bmi	1303980 <WriteSemaphore+0x12ee0c4>
    297c:	06000000 	streq	r0, [r0], -r0
    2980:	0014d601 	andseq	sp, r4, r1, lsl #12
    2984:	01070100 	mrseq	r0, (UNDEF: 23)
    2988:	00000021 	andeq	r0, r0, r1, lsr #32
    298c:	00013e3c 	andeq	r3, r1, ip, lsr lr
    2990:	00013ee8 	andeq	r3, r1, r8, ror #29
    2994:	00000f20 	andeq	r0, r0, r0, lsr #30
    2998:	cc010701 	stcgt	7, cr0, [r1], {1}
    299c:	01000014 	tsteq	r0, r4, lsl r0
    29a0:	0021011b 	eoreq	r0, r1, fp, lsl r1
    29a4:	3ee80000 	cdpcc	0, 14, cr0, cr8, cr0, {0}
    29a8:	3f780001 	svccc	0x00780001
    29ac:	0f4c0001 	svceq	0x004c0001
    29b0:	a6010000 	strge	r0, [r1], -r0
    29b4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    29b8:	01006863 	tsteq	r0, r3, ror #16
    29bc:	0000211b 	andeq	r2, r0, fp, lsl r1
    29c0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    29c4:	e5010700 	str	r0, [r1, #-1792]	; 0x700
    29c8:	01000014 	tsteq	r0, r4, lsl r0
    29cc:	0021012a 	eoreq	r0, r1, sl, lsr #2
    29d0:	3f780000 	svccc	0x00780000
    29d4:	3ff40001 	svccc	0x00f40001
    29d8:	0f780001 	svceq	0x00780001
    29dc:	d2010000 	andle	r0, r1, #0
    29e0:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    29e4:	000014e0 	andeq	r1, r0, r0, ror #9
    29e8:	00212c01 	eoreq	r2, r1, r1, lsl #24
    29ec:	54010000 	strpl	r0, [r1], #-0
    29f0:	14ad0a00 	strtne	r0, [sp], #2560	; 0xa00
    29f4:	04010000 	streq	r0, [r1], #-0
    29f8:	00000055 	andeq	r0, r0, r5, asr r0
    29fc:	b8030501 	stmdalt	r3, {r0, r8, sl}
    2a00:	0a000158 	beq	2f68 <_start-0x5098>
    2a04:	000014ee 	andeq	r1, r0, lr, ror #9
    2a08:	00550501 	subseq	r0, r5, r1, lsl #10
    2a0c:	05010000 	streq	r0, [r1, #-0]
    2a10:	0158bc03 	cmpeq	r8, r3, lsl #24
    2a14:	00bd0000 	adcseq	r0, sp, r0
    2a18:	00020000 	andeq	r0, r2, r0
    2a1c:	00000bfa 	strdeq	r0, [r0], -sl
    2a20:	01370104 	teqeq	r7, r4, lsl #2
    2a24:	05010000 	streq	r0, [r1, #-0]
    2a28:	f4000015 	vst4.8	{d0-d3}, [r0 :64], r5
    2a2c:	9800013f 	stmdals	r0, {r0, r1, r2, r3, r4, r5, r8}
    2a30:	6a000140 	bvs	2f38 <_start-0x50c8>
    2a34:	0200000f 	andeq	r0, r0, #15
    2a38:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    2a3c:	04030074 	streq	r0, [r3], #-116	; 0x74
    2a40:	00068a07 	andeq	r8, r6, r7, lsl #20
    2a44:	07040300 	streq	r0, [r4, -r0, lsl #6]
    2a48:	00000685 	andeq	r0, r0, r5, lsl #13
    2a4c:	5b050403 	blpl	143a60 <WriteSemaphore+0x12e1a4>
    2a50:	04000006 	streq	r0, [r0], #-6
    2a54:	0014fd01 	andseq	pc, r4, r1, lsl #26
    2a58:	010a0100 	mrseq	r0, (UNDEF: 26)
    2a5c:	00000021 	andeq	r0, r0, r1, lsr #32
    2a60:	00013ff4 	strdeq	r3, [r1], -r4
    2a64:	0001401c 	andeq	r4, r1, ip, lsl r0
    2a68:	00000fa4 	andeq	r0, r0, r4, lsr #31
    2a6c:	00006901 	andeq	r6, r0, r1, lsl #18
    2a70:	68630500 	stmdavs	r3!, {r8, sl}^
    2a74:	210a0100 	mrscs	r0, (UNDEF: 26)
    2a78:	02000000 	andeq	r0, r0, #0
    2a7c:	06007491 			; <UNDEFINED> instruction: 0x06007491
    2a80:	00153101 	andseq	r3, r5, r1, lsl #2
    2a84:	010f0100 	mrseq	r0, (UNDEF: 31)
    2a88:	00000021 	andeq	r0, r0, r1, lsr #32
    2a8c:	0001401c 	andeq	r4, r1, ip, lsl r0
    2a90:	00014034 	andeq	r4, r1, r4, lsr r0
    2a94:	00000fd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    2a98:	2c010401 	cfstrscs	mvf0, [r1], {1}
    2a9c:	01000015 	tsteq	r0, r5, lsl r0
    2aa0:	00210114 	eoreq	r0, r1, r4, lsl r1
    2aa4:	40340000 	eorsmi	r0, r4, r0
    2aa8:	40980001 	addsmi	r0, r8, r1
    2aac:	0ffc0001 	svceq	0x00fc0001
    2ab0:	ae010000 	cdpge	0, 0, cr0, cr1, cr0, {0}
    2ab4:	05000000 	streq	r0, [r0, #-0]
    2ab8:	14010073 	strne	r0, [r1], #-115	; 0x73
    2abc:	000000ae 	andeq	r0, r0, lr, lsr #1
    2ac0:	00749102 	rsbseq	r9, r4, r2, lsl #2
    2ac4:	00b40407 	adcseq	r0, r4, r7, lsl #8
    2ac8:	b9080000 	stmdblt	r8, {}	; <UNPREDICTABLE>
    2acc:	03000000 	movweq	r0, #0
    2ad0:	067b0801 	ldrbteq	r0, [fp], -r1, lsl #16
    2ad4:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
    2ad8:	02000000 	andeq	r0, r0, #0
    2adc:	000c7700 	andeq	r7, ip, r0, lsl #14
    2ae0:	37010400 	strcc	r0, [r1, -r0, lsl #8]
    2ae4:	01000001 	tsteq	r0, r1
    2ae8:	00001539 	andeq	r1, r0, r9, lsr r5
    2aec:	00014098 	muleq	r1, r8, r0
    2af0:	000141c0 	andeq	r4, r1, r0, asr #3
    2af4:	00000fd7 	ldrdeq	r0, [r0], -r7
    2af8:	69050402 	stmdbvs	r5, {r1, sl}
    2afc:	0300746e 	movweq	r7, #1134	; 0x46e
    2b00:	068a0704 	streq	r0, [sl], r4, lsl #14
    2b04:	04040000 	streq	r0, [r4], #-0
    2b08:	85070403 	strhi	r0, [r7, #-1027]	; 0x403
    2b0c:	03000006 	movweq	r0, #6
    2b10:	065b0504 	ldrbeq	r0, [fp], -r4, lsl #10
    2b14:	01030000 	mrseq	r0, (UNDEF: 3)
    2b18:	00067406 	andeq	r7, r6, r6, lsl #8
    2b1c:	07020300 	streq	r0, [r2, -r0, lsl #6]
    2b20:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    2b24:	0e070403 	cdpeq	4, 0, cr0, cr7, cr3, {0}
    2b28:	05000001 	streq	r0, [r0, #-1]
    2b2c:	00155f01 	andseq	r5, r5, r1, lsl #30
    2b30:	01090100 	mrseq	r0, (UNDEF: 25)
    2b34:	00014098 	muleq	r1, r8, r0
    2b38:	000140c4 	andeq	r4, r1, r4, asr #1
    2b3c:	00001028 	andeq	r1, r0, r8, lsr #32
    2b40:	00008901 	andeq	r8, r0, r1, lsl #18
    2b44:	007a0600 	rsbseq	r0, sl, r0, lsl #12
    2b48:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    2b4c:	0000002f 	andeq	r0, r0, pc, lsr #32
    2b50:	076c9102 	strbeq	r9, [ip, -r2, lsl #2]!
    2b54:	0a010063 	beq	42ce8 <WriteSemaphore+0x2d42c>
    2b58:	00000089 	andeq	r0, r0, r9, lsl #1
    2b5c:	00779102 	rsbseq	r9, r7, r2, lsl #2
    2b60:	7b080103 	blvc	202f74 <WriteSemaphore+0x1ed6b8>
    2b64:	05000006 	streq	r0, [r0, #-6]
    2b68:	00156e01 	andseq	r6, r5, r1, lsl #28
    2b6c:	01120100 	tsteq	r2, r0, lsl #2
    2b70:	000140c4 	andeq	r4, r1, r4, asr #1
    2b74:	00014104 	andeq	r4, r1, r4, lsl #2
    2b78:	00001054 	andeq	r1, r0, r4, asr r0
    2b7c:	0000c501 	andeq	ip, r0, r1, lsl #10
    2b80:	007a0600 	rsbseq	r0, sl, r0, lsl #12
    2b84:	12010000 	andne	r0, r1, #0
    2b88:	0000002f 	andeq	r0, r0, pc, lsr #32
    2b8c:	076c9102 	strbeq	r9, [ip, -r2, lsl #2]!
    2b90:	14010069 	strne	r0, [r1], #-105	; 0x69
    2b94:	00000021 	andeq	r0, r0, r1, lsr #32
    2b98:	00749102 	rsbseq	r9, r4, r2, lsl #2
    2b9c:	15690108 	strbne	r0, [r9, #-264]!	; 0x108
    2ba0:	1d010000 	stcne	0, cr0, [r1, #-0]
    2ba4:	01410401 	cmpeq	r1, r1, lsl #8
    2ba8:	0141c000 	mrseq	ip, (UNDEF: 65)
    2bac:	00108000 	andseq	r8, r0, r0
    2bb0:	01090100 	mrseq	r0, (UNDEF: 25)
    2bb4:	000014d6 	ldrdeq	r1, [r0], -r6
    2bb8:	00212301 	eoreq	r2, r1, r1, lsl #6
    2bbc:	0a010000 	beq	42bc4 <WriteSemaphore+0x2d308>
    2bc0:	Address 0x00002bc0 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0x101
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
   c:	00061001 	andeq	r1, r6, r1
  10:	00240200 	eoreq	r0, r4, r0, lsl #4
  14:	0b3e0b0b 	bleq	f82c48 <WriteSemaphore+0xf6d38c>
  18:	00000803 	andeq	r0, r0, r3, lsl #16
  1c:	0b002403 	bleq	9030 <__module_entries_end+0xf8c>
  20:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  24:	0400000e 	streq	r0, [r0], #-14
  28:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
  2c:	0b3b0b3a 	bleq	ec2d1c <WriteSemaphore+0xead460>
  30:	00001349 	andeq	r1, r0, r9, asr #6
  34:	0b000f05 	bleq	3c50 <_start-0x43b0>
  38:	0013490b 	andseq	r4, r3, fp, lsl #18
  3c:	01150600 	tsteq	r5, r0, lsl #12
  40:	13010c27 	movwne	r0, #7207	; 0x1c27
  44:	05070000 	streq	r0, [r7, #-0]
  48:	00134900 	andseq	r4, r3, r0, lsl #18
  4c:	000f0800 	andeq	r0, pc, r0, lsl #16
  50:	00000b0b 	andeq	r0, r0, fp, lsl #22
  54:	03011309 	movweq	r1, #4873	; 0x1309
  58:	3a0b0b0e 	bcc	2c2c98 <WriteSemaphore+0x2ad3dc>
  5c:	010b3b0b 	tsteq	fp, fp, lsl #22
  60:	0a000013 	beq	b4 <_start-0x7f4c>
  64:	0803000d 	stmdaeq	r3, {r0, r2, r3}
  68:	0b3b0b3a 	bleq	ec2d58 <WriteSemaphore+0xead49c>
  6c:	0a381349 	beq	e04d98 <WriteSemaphore+0xdef4dc>
  70:	2e0b0000 	cdpcs	0, 0, cr0, cr11, cr0, {0}
  74:	030c3f01 	movweq	r3, #52993	; 0xcf01
  78:	3b0b3a0e 	blcc	2ce8b8 <WriteSemaphore+0x2b8ffc>
  7c:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
  80:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
  84:	97064001 	strls	r4, [r6, -r1]
  88:	13010c42 	movwne	r0, #7234	; 0x1c42
  8c:	050c0000 	streq	r0, [ip, #-0]
  90:	3a0e0300 	bcc	380c98 <WriteSemaphore+0x36b3dc>
  94:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  98:	000a0213 	andeq	r0, sl, r3, lsl r2
  9c:	00340d00 	eorseq	r0, r4, r0, lsl #26
  a0:	0b3a0e03 	bleq	e838b4 <WriteSemaphore+0xe6dff8>
  a4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  a8:	00000a02 	andeq	r0, r0, r2, lsl #20
  ac:	3f002e0e 	svccc	0x00002e0e
  b0:	3a0e030c 	bcc	380ce8 <WriteSemaphore+0x36b42c>
  b4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
  b8:	1113490c 	tstne	r3, ip, lsl #18
  bc:	40011201 	andmi	r1, r1, r1, lsl #4
  c0:	0c429606 	mcrreq	6, 0, r9, r2, cr6
  c4:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
  c8:	030c3f00 	movweq	r3, #52992	; 0xcf00
  cc:	3b0b3a0e 	blcc	2ce90c <WriteSemaphore+0x2b9050>
  d0:	110c270b 	tstne	ip, fp, lsl #14
  d4:	40011201 	andmi	r1, r1, r1, lsl #4
  d8:	0c429706 	mcrreq	7, 0, r9, r2, cr6
  dc:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
  e0:	030c3f01 	movweq	r3, #52993	; 0xcf01
  e4:	3b0b3a0e 	blcc	2ce924 <WriteSemaphore+0x2b9068>
  e8:	110c270b 	tstne	ip, fp, lsl #14
  ec:	40011201 	andmi	r1, r1, r1, lsl #4
  f0:	0c429606 	mcrreq	6, 0, r9, r2, cr6
  f4:	00001301 	andeq	r1, r0, r1, lsl #6
  f8:	03012e11 	movweq	r2, #7697	; 0x1e11
  fc:	3b0b3a0e 	blcc	2ce93c <WriteSemaphore+0x2b9080>
 100:	110c270b 	tstne	ip, fp, lsl #14
 104:	40011201 	andmi	r1, r1, r1, lsl #4
 108:	0c429606 	mcrreq	6, 0, r9, r2, cr6
 10c:	00001301 	andeq	r1, r0, r1, lsl #6
 110:	3f012e12 	svccc	0x00012e12
 114:	3a0e030c 	bcc	380d4c <WriteSemaphore+0x36b490>
 118:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 11c:	010c3c13 	tsteq	ip, r3, lsl ip
 120:	13000013 	movwne	r0, #19
 124:	00000018 	andeq	r0, r0, r8, lsl r0
 128:	3f012e14 	svccc	0x00012e14
 12c:	3a0e030c 	bcc	380d64 <WriteSemaphore+0x36b4a8>
 130:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 134:	000c3c13 	andeq	r3, ip, r3, lsl ip
 138:	00261500 	eoreq	r1, r6, r0, lsl #10
 13c:	00001349 	andeq	r1, r0, r9, asr #6
 140:	49003516 	stmdbmi	r0, {r1, r2, r4, r8, sl, ip, sp}
 144:	00000013 	andeq	r0, r0, r3, lsl r0
 148:	25011101 	strcs	r1, [r1, #-257]	; 0x101
 14c:	030b130e 	movweq	r1, #45838	; 0xb30e
 150:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 154:	00061001 	andeq	r1, r6, r1
 158:	00240200 	eoreq	r0, r4, r0, lsl #4
 15c:	0b3e0b0b 	bleq	f82d90 <WriteSemaphore+0xf6d4d4>
 160:	00000803 	andeq	r0, r0, r3, lsl #16
 164:	0b002403 	bleq	9178 <__module_entries_end+0x10d4>
 168:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 16c:	0400000e 	streq	r0, [r0], #-14
 170:	0c3f012e 	ldfeqs	f0, [pc], #-184	; c0 <_start-0x7f40>
 174:	0b3a0e03 	bleq	e83988 <WriteSemaphore+0xe6e0cc>
 178:	0c270b3b 	stceq	11, cr0, [r7], #-236	; 0xffffff14
 17c:	01120111 	tsteq	r2, r1, lsl r1
 180:	42970640 	addsmi	r0, r7, #67108864	; 0x4000000
 184:	0013010c 	andseq	r0, r3, ip, lsl #2
 188:	010b0500 	tsteq	fp, r0, lsl #10
 18c:	01120111 	tsteq	r2, r1, lsl r1
 190:	34060000 	strcc	r0, [r6], #-0
 194:	3a0e0300 	bcc	380d9c <WriteSemaphore+0x36b4e0>
 198:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 19c:	3c0c3f13 	stccc	15, cr3, [ip], {19}
 1a0:	0700000c 	streq	r0, [r0, -ip]
 1a4:	13490035 	movtne	r0, #36917	; 0x9035
 1a8:	0f080000 	svceq	0x00080000
 1ac:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 1b0:	09000013 	stmdbeq	r0, {r0, r1, r4}
 1b4:	00000035 	andeq	r0, r0, r5, lsr r0
 1b8:	3f012e0a 	svccc	0x00012e0a
 1bc:	3a0e030c 	bcc	380df4 <WriteSemaphore+0x36b538>
 1c0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 1c4:	1201110c 	andne	r1, r1, #3
 1c8:	970a4001 	strls	r4, [sl, -r1]
 1cc:	13010c42 	movwne	r0, #7234	; 0x1c42
 1d0:	0b0b0000 	bleq	2c01d8 <WriteSemaphore+0x2aa91c>
 1d4:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 1d8:	00130101 	andseq	r0, r3, r1, lsl #2
 1dc:	012e0c00 	teqeq	lr, r0, lsl #24
 1e0:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
 1e4:	0b3b0b3a 	bleq	ec2ed4 <WriteSemaphore+0xead618>
 1e8:	01110c27 	tsteq	r1, r7, lsr #24
 1ec:	0a400112 	beq	100063c <WriteSemaphore+0xfead80>
 1f0:	010c4296 			; <UNDEFINED> instruction: 0x010c4296
 1f4:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
 1f8:	0c3f002e 	ldceq	0, cr0, [pc], #-184	; 148 <_start-0x7eb8>
 1fc:	0b3a0e03 	bleq	e83a10 <WriteSemaphore+0xe6e154>
 200:	0c270b3b 	stceq	11, cr0, [r7], #-236	; 0xffffff14
 204:	01120111 	tsteq	r2, r1, lsl r1
 208:	42970640 	addsmi	r0, r7, #67108864	; 0x4000000
 20c:	0e00000c 	cdpeq	0, 0, cr0, cr0, cr12, {0}
 210:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 214:	0b3b0b3a 	bleq	ec2f04 <WriteSemaphore+0xead648>
 218:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; fc <_start-0x7f04>
 21c:	00000a02 	andeq	r0, r0, r2, lsl #20
 220:	01110100 	tsteq	r1, r0, lsl #2
 224:	0b130e25 	bleq	4c3ac0 <WriteSemaphore+0x4ae204>
 228:	01110e03 	tsteq	r1, r3, lsl #28
 22c:	06100112 			; <UNDEFINED> instruction: 0x06100112
 230:	24020000 	strcs	r0, [r2], #-0
 234:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 238:	0008030b 	andeq	r0, r8, fp, lsl #6
 23c:	00240300 	eoreq	r0, r4, r0, lsl #6
 240:	0b3e0b0b 	bleq	f82e74 <WriteSemaphore+0xf6d5b8>
 244:	00000e03 	andeq	r0, r0, r3, lsl #28
 248:	0b000f04 	bleq	3e60 <_start-0x41a0>
 24c:	0500000b 	streq	r0, [r0, #-11]
 250:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 254:	0b3b0b3a 	bleq	ec2f44 <WriteSemaphore+0xead688>
 258:	00001349 	andeq	r1, r0, r9, asr #6
 25c:	03011306 	movweq	r1, #4870	; 0x1306
 260:	3a0b0b0e 	bcc	2c2ea0 <WriteSemaphore+0x2ad5e4>
 264:	010b3b0b 	tsteq	fp, fp, lsl #22
 268:	07000013 	smladeq	r0, r3, r0, r0
 26c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 270:	0b3b0b3a 	bleq	ec2f60 <WriteSemaphore+0xead6a4>
 274:	0a381349 	beq	e04fa0 <WriteSemaphore+0xdef6e4>
 278:	0f080000 	svceq	0x00080000
 27c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 280:	09000013 	stmdbeq	r0, {r0, r1, r4}
 284:	13490035 	movtne	r0, #36917	; 0x9035
 288:	150a0000 	strne	r0, [sl, #-0]
 28c:	010c2701 	tsteq	ip, r1, lsl #14
 290:	0b000013 	bleq	2e4 <_start-0x7d1c>
 294:	13490005 	movtne	r0, #36869	; 0x9005
 298:	2e0c0000 	cdpcs	0, 0, cr0, cr12, cr0, {0}
 29c:	030c3f01 	movweq	r3, #52993	; 0xcf01
 2a0:	3b0b3a0e 	blcc	2ceae0 <WriteSemaphore+0x2b9224>
 2a4:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
 2a8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 2ac:	96064001 	strls	r4, [r6], -r1
 2b0:	13010c42 	movwne	r0, #7234	; 0x1c42
 2b4:	050d0000 	streq	r0, [sp, #-0]
 2b8:	3a0e0300 	bcc	380ec0 <WriteSemaphore+0x36b604>
 2bc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 2c0:	000a0213 	andeq	r0, sl, r3, lsl r2
 2c4:	00340e00 	eorseq	r0, r4, r0, lsl #28
 2c8:	0b3a0e03 	bleq	e83adc <WriteSemaphore+0xe6e220>
 2cc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 2d0:	00000a02 	andeq	r0, r0, r2, lsl #20
 2d4:	3f012e0f 	svccc	0x00012e0f
 2d8:	3a0e030c 	bcc	380f10 <WriteSemaphore+0x36b654>
 2dc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 2e0:	1201110c 	andne	r1, r1, #3
 2e4:	96064001 	strls	r4, [r6], -r1
 2e8:	13010c42 	movwne	r0, #7234	; 0x1c42
 2ec:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
 2f0:	3a0e0301 	bcc	380efc <WriteSemaphore+0x36b640>
 2f4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 2f8:	1201110c 	andne	r1, r1, #3
 2fc:	96064001 	strls	r4, [r6], -r1
 300:	13010c42 	movwne	r0, #7234	; 0x1c42
 304:	0b110000 	bleq	44030c <WriteSemaphore+0x42aa50>
 308:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 30c:	12000001 	andne	r0, r0, #1
 310:	0e03012e 	adfeqsp	f0, f3, #0.5
 314:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
 318:	01110c27 	tsteq	r1, r7, lsr #24
 31c:	06400112 			; <UNDEFINED> instruction: 0x06400112
 320:	010c4296 			; <UNDEFINED> instruction: 0x010c4296
 324:	13000013 	movwne	r0, #19
 328:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 32c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
 330:	0a021349 	beq	8505c <WriteSemaphore+0x6f7a0>
 334:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
 338:	030c3f01 	movweq	r3, #52993	; 0xcf01
 33c:	3b0b3a0e 	blcc	2ceb7c <WriteSemaphore+0x2b92c0>
 340:	110c2705 	tstne	ip, r5, lsl #14
 344:	40011201 	andmi	r1, r1, r1, lsl #4
 348:	0c429606 	mcrreq	6, 0, r9, r2, cr6
 34c:	00001301 	andeq	r1, r0, r1, lsl #6
 350:	49002615 	stmdbmi	r0, {r0, r2, r4, r9, sl, sp}
 354:	16000013 			; <UNDEFINED> instruction: 0x16000013
 358:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 2a8 <_start-0x7d58>
 35c:	0b3a0e03 	bleq	e83b70 <WriteSemaphore+0xe6e2b4>
 360:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236	; 0xffffff14
 364:	01111349 	tsteq	r1, r9, asr #6
 368:	06400112 			; <UNDEFINED> instruction: 0x06400112
 36c:	010c4296 			; <UNDEFINED> instruction: 0x010c4296
 370:	17000013 	smladne	r0, r3, r0, r0
 374:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 378:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
 37c:	0a021349 	beq	850a8 <WriteSemaphore+0x6f7ec>
 380:	01180000 	tsteq	r8, r0
 384:	01134901 	tsteq	r3, r1, lsl #18
 388:	19000013 	stmdbne	r0, {r0, r1, r4}
 38c:	13490021 	movtne	r0, #36897	; 0x9021
 390:	00000b2f 	andeq	r0, r0, pc, lsr #22
 394:	0300341a 	movweq	r3, #1050	; 0x41a
 398:	3b0b3a0e 	blcc	2cebd8 <WriteSemaphore+0x2b931c>
 39c:	3f13490b 	svccc	0x0013490b
 3a0:	000a020c 	andeq	r0, sl, ip, lsl #4
 3a4:	11010000 	mrsne	r0, (UNDEF: 1)
 3a8:	130e2501 	movwne	r2, #58625	; 0xe501
 3ac:	110e030b 	tstne	lr, fp, lsl #6
 3b0:	10011201 	andne	r1, r1, r1, lsl #4
 3b4:	02000006 	andeq	r0, r0, #6
 3b8:	0b0b0024 	bleq	2c0450 <WriteSemaphore+0x2aab94>
 3bc:	0e030b3e 	vmoveq.16	d3[0], r0
 3c0:	24030000 	strcs	r0, [r3], #-0
 3c4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 3c8:	0008030b 	andeq	r0, r8, fp, lsl #6
 3cc:	000f0400 	andeq	r0, pc, r0, lsl #8
 3d0:	00000b0b 	andeq	r0, r0, fp, lsl #22
 3d4:	03001605 	movweq	r1, #1541	; 0x605
 3d8:	3b0b3a0e 	blcc	2cec18 <WriteSemaphore+0x2b935c>
 3dc:	0013490b 	andseq	r4, r3, fp, lsl #18
 3e0:	01130600 	tsteq	r3, r0, lsl #12
 3e4:	0b0b0e03 	bleq	2c3bf8 <WriteSemaphore+0x2ae33c>
 3e8:	0b3b0b3a 	bleq	ec30d8 <WriteSemaphore+0xead81c>
 3ec:	00001301 	andeq	r1, r0, r1, lsl #6
 3f0:	03000d07 	movweq	r0, #3335	; 0xd07
 3f4:	3b0b3a0e 	blcc	2cec34 <WriteSemaphore+0x2b9378>
 3f8:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 3fc:	0800000a 	stmdaeq	r0, {r1, r3}
 400:	0b0b000f 	bleq	2c0444 <WriteSemaphore+0x2aab88>
 404:	00001349 	andeq	r1, r0, r9, asr #6
 408:	49003509 	stmdbmi	r0, {r0, r3, r8, sl, ip, sp}
 40c:	0a000013 	beq	460 <_start-0x7ba0>
 410:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 360 <_start-0x7ca0>
 414:	0b3a0e03 	bleq	e83c28 <WriteSemaphore+0xe6e36c>
 418:	0c270b3b 	stceq	11, cr0, [r7], #-236	; 0xffffff14
 41c:	01120111 	tsteq	r2, r1, lsl r1
 420:	42970640 	addsmi	r0, r7, #67108864	; 0x4000000
 424:	0013010c 	andseq	r0, r3, ip, lsl #2
 428:	00050b00 	andeq	r0, r5, r0, lsl #22
 42c:	0b3a0e03 	bleq	e83c40 <WriteSemaphore+0xe6e384>
 430:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 434:	00000a02 	andeq	r0, r0, r2, lsl #20
 438:	0300340c 	movweq	r3, #1036	; 0x40c
 43c:	3b0b3a0e 	blcc	2cec7c <WriteSemaphore+0x2b93c0>
 440:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 444:	0d00000a 	stceq	0, cr0, [r0, #-40]	; 0xffffffd8
 448:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 398 <_start-0x7c68>
 44c:	0b3a0e03 	bleq	e83c60 <WriteSemaphore+0xe6e3a4>
 450:	0c270b3b 	stceq	11, cr0, [r7], #-236	; 0xffffff14
 454:	01120111 	tsteq	r2, r1, lsl r1
 458:	42970640 	addsmi	r0, r7, #67108864	; 0x4000000
 45c:	0000000c 	andeq	r0, r0, ip
 460:	25011101 	strcs	r1, [r1, #-257]	; 0x101
 464:	030b130e 	movweq	r1, #45838	; 0xb30e
 468:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 46c:	00061001 	andeq	r1, r6, r1
 470:	00160200 	andseq	r0, r6, r0, lsl #4
 474:	0b3a0e03 	bleq	e83c88 <WriteSemaphore+0xe6e3cc>
 478:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 47c:	24030000 	strcs	r0, [r3], #-0
 480:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 484:	000e030b 	andeq	r0, lr, fp, lsl #6
 488:	00240400 	eoreq	r0, r4, r0, lsl #8
 48c:	0b3e0b0b 	bleq	f830c0 <WriteSemaphore+0xf6d804>
 490:	00000803 	andeq	r0, r0, r3, lsl #16
 494:	0b000f05 	bleq	40b0 <_start-0x3f50>
 498:	0600000b 	streq	r0, [r0], -fp
 49c:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 4a0:	0b3a0b0b 	bleq	e830d4 <WriteSemaphore+0xe6d818>
 4a4:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 4a8:	0d070000 	stceq	0, cr0, [r7, #-0]
 4ac:	3a0e0300 	bcc	3810b4 <WriteSemaphore+0x36b7f8>
 4b0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 4b4:	000a3813 	andeq	r3, sl, r3, lsl r8
 4b8:	000f0800 	andeq	r0, pc, r0, lsl #16
 4bc:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 4c0:	35090000 	strcc	r0, [r9, #-0]
 4c4:	00134900 	andseq	r4, r3, r0, lsl #18
 4c8:	012e0a00 	teqeq	lr, r0, lsl #20
 4cc:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
 4d0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
 4d4:	13490c27 	movtne	r0, #39975	; 0x9c27
 4d8:	01120111 	tsteq	r2, r1, lsl r1
 4dc:	42960640 	addsmi	r0, r6, #67108864	; 0x4000000
 4e0:	0013010c 	andseq	r0, r3, ip, lsl #2
 4e4:	00050b00 	andeq	r0, r5, r0, lsl #22
 4e8:	0b3a0e03 	bleq	e83cfc <WriteSemaphore+0xe6e440>
 4ec:	1349053b 	movtne	r0, #38203	; 0x953b
 4f0:	00000a02 	andeq	r0, r0, r2, lsl #20
 4f4:	0300340c 	movweq	r3, #1036	; 0x40c
 4f8:	3b0b3a0e 	blcc	2ced38 <WriteSemaphore+0x2b947c>
 4fc:	02134905 	andseq	r4, r3, #81920	; 0x14000
 500:	0d00000a 	stceq	0, cr0, [r0, #-40]	; 0xffffffd8
 504:	13490026 	movtne	r0, #36902	; 0x9026
 508:	260e0000 	strcs	r0, [lr], -r0
 50c:	0f000000 	svceq	0x00000000
 510:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 460 <_start-0x7ba0>
 514:	0b3a0e03 	bleq	e83d28 <WriteSemaphore+0xe6e46c>
 518:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236	; 0xffffff14
 51c:	01111349 	tsteq	r1, r9, asr #6
 520:	06400112 			; <UNDEFINED> instruction: 0x06400112
 524:	010c4297 			; <UNDEFINED> instruction: 0x010c4297
 528:	10000013 	andne	r0, r0, r3, lsl r0
 52c:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 47c <_start-0x7b84>
 530:	0b3a0e03 	bleq	e83d44 <WriteSemaphore+0xe6e488>
 534:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236	; 0xffffff14
 538:	01120111 	tsteq	r2, r1, lsl r1
 53c:	42960640 	addsmi	r0, r6, #67108864	; 0x4000000
 540:	0013010c 	andseq	r0, r3, ip, lsl #2
 544:	012e1100 	teqeq	lr, r0, lsl #2
 548:	0b3a0e03 	bleq	e83d5c <WriteSemaphore+0xe6e4a0>
 54c:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236	; 0xffffff14
 550:	01120111 	tsteq	r2, r1, lsl r1
 554:	42960640 	addsmi	r0, r6, #67108864	; 0x4000000
 558:	0013010c 	andseq	r0, r3, ip, lsl #2
 55c:	012e1200 	teqeq	lr, r0, lsl #4
 560:	0b3a0e03 	bleq	e83d74 <WriteSemaphore+0xe6e4b8>
 564:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236	; 0xffffff14
 568:	01111349 	tsteq	r1, r9, asr #6
 56c:	06400112 			; <UNDEFINED> instruction: 0x06400112
 570:	010c4296 			; <UNDEFINED> instruction: 0x010c4296
 574:	13000013 	movwne	r0, #19
 578:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 4c8 <_start-0x7b38>
 57c:	0b3a0e03 	bleq	e83d90 <WriteSemaphore+0xe6e4d4>
 580:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236	; 0xffffff14
 584:	01111349 	tsteq	r1, r9, asr #6
 588:	06400112 			; <UNDEFINED> instruction: 0x06400112
 58c:	000c4297 	muleq	ip, r7, r2
 590:	11010000 	mrsne	r0, (UNDEF: 1)
 594:	130e2501 	movwne	r2, #58625	; 0xe501
 598:	1b0e030b 	blne	3811cc <WriteSemaphore+0x36b910>
 59c:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 5a0:	00061001 	andeq	r1, r6, r1
 5a4:	00160200 	andseq	r0, r6, r0, lsl #4
 5a8:	0b3a0e03 	bleq	e83dbc <WriteSemaphore+0xe6e500>
 5ac:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 5b0:	24030000 	strcs	r0, [r3], #-0
 5b4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 5b8:	000e030b 	andeq	r0, lr, fp, lsl #6
 5bc:	000f0400 	andeq	r0, pc, r0, lsl #8
 5c0:	00000b0b 	andeq	r0, r0, fp, lsl #22
 5c4:	0b002405 	bleq	95e0 <__module_entries_end+0x153c>
 5c8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 5cc:	06000008 	streq	r0, [r0], -r8
 5d0:	0b0b000f 	bleq	2c0614 <WriteSemaphore+0x2aad58>
 5d4:	00001349 	andeq	r1, r0, r9, asr #6
 5d8:	27011507 	strcs	r1, [r1, -r7, lsl #10]
 5dc:	0013010c 	andseq	r0, r3, ip, lsl #2
 5e0:	00050800 	andeq	r0, r5, r0, lsl #16
 5e4:	00001349 	andeq	r1, r0, r9, asr #6
 5e8:	27011509 	strcs	r1, [r1, -r9, lsl #10]
 5ec:	0113490c 	tsteq	r3, ip, lsl #18
 5f0:	0a000013 	beq	644 <_start-0x79bc>
 5f4:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 5f8:	0b3a0b0b 	bleq	e8322c <WriteSemaphore+0xe6d970>
 5fc:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 600:	0d0b0000 	stceq	0, cr0, [fp, #-0]
 604:	3a0e0300 	bcc	38120c <WriteSemaphore+0x36b950>
 608:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 60c:	000a3813 	andeq	r3, sl, r3, lsl r8
 610:	00350c00 	eorseq	r0, r5, r0, lsl #24
 614:	00001349 	andeq	r1, r0, r9, asr #6
 618:	4900260d 	stmdbmi	r0, {r0, r2, r3, r9, sl, sp}
 61c:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
 620:	13490101 	movtne	r0, #37121	; 0x9101
 624:	00001301 	andeq	r1, r0, r1, lsl #6
 628:	4900210f 	stmdbmi	r0, {r0, r1, r2, r3, r8, sp}
 62c:	000b2f13 	andeq	r2, fp, r3, lsl pc
 630:	012e1000 	teqeq	lr, r0
 634:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
 638:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
 63c:	13490c27 	movtne	r0, #39975	; 0x9c27
 640:	01120111 	tsteq	r2, r1, lsl r1
 644:	42960640 	addsmi	r0, r6, #67108864	; 0x4000000
 648:	0013010c 	andseq	r0, r3, ip, lsl #2
 64c:	00051100 	andeq	r1, r5, r0, lsl #2
 650:	0b3a0e03 	bleq	e83e64 <WriteSemaphore+0xe6e5a8>
 654:	1349053b 	movtne	r0, #38203	; 0x953b
 658:	00000a02 	andeq	r0, r0, r2, lsl #20
 65c:	03003412 	movweq	r3, #1042	; 0x412
 660:	3b0b3a0e 	blcc	2ceea0 <WriteSemaphore+0x2b95e4>
 664:	02134905 	andseq	r4, r3, #81920	; 0x14000
 668:	1300000a 	movwne	r0, #10
 66c:	0111010b 	tsteq	r1, fp, lsl #2
 670:	00000112 	andeq	r0, r0, r2, lsl r1
 674:	3f012e14 	svccc	0x00012e14
 678:	3a0e030c 	bcc	3812b0 <WriteSemaphore+0x36b9f4>
 67c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 680:	1201110c 	andne	r1, r1, #3
 684:	96064001 	strls	r4, [r6], -r1
 688:	13010c42 	movwne	r0, #7234	; 0x1c42
 68c:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
 690:	030c3f01 	movweq	r3, #52993	; 0xcf01
 694:	3b0b3a0e 	blcc	2ceed4 <WriteSemaphore+0x2b9618>
 698:	490c2705 	stmdbmi	ip, {r0, r2, r8, r9, sl, sp}
 69c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 6a0:	97064001 	strls	r4, [r6, -r1]
 6a4:	13010c42 	movwne	r0, #7234	; 0x1c42
 6a8:	2e160000 	cdpcs	0, 1, cr0, cr6, cr0, {0}
 6ac:	030c3f00 	movweq	r3, #52992	; 0xcf00
 6b0:	3b0b3a0e 	blcc	2ceef0 <WriteSemaphore+0x2b9634>
 6b4:	110c2705 	tstne	ip, r5, lsl #14
 6b8:	40011201 	andmi	r1, r1, r1, lsl #4
 6bc:	0c429606 	mcrreq	6, 0, r9, r2, cr6
 6c0:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
 6c4:	030c3f00 	movweq	r3, #52992	; 0xcf00
 6c8:	3b0b3a0e 	blcc	2cef08 <WriteSemaphore+0x2b964c>
 6cc:	110c2705 	tstne	ip, r5, lsl #14
 6d0:	40011201 	andmi	r1, r1, r1, lsl #4
 6d4:	0c429706 	mcrreq	7, 0, r9, r2, cr6
 6d8:	2e180000 	cdpcs	0, 1, cr0, cr8, cr0, {0}
 6dc:	030c3f00 	movweq	r3, #52992	; 0xcf00
 6e0:	3b0b3a0e 	blcc	2cef20 <WriteSemaphore+0x2b9664>
 6e4:	490c2705 	stmdbmi	ip, {r0, r2, r8, r9, sl, sp}
 6e8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 6ec:	97064001 	strls	r4, [r6, -r1]
 6f0:	00000c42 	andeq	r0, r0, r2, asr #24
 6f4:	11010b19 	tstne	r1, r9, lsl fp
 6f8:	01011201 	tsteq	r1, r1, lsl #4
 6fc:	1a000013 	bne	750 <_start-0x78b0>
 700:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 650 <_start-0x79b0>
 704:	0b3a0e03 	bleq	e83f18 <WriteSemaphore+0xe6e65c>
 708:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236	; 0xffffff14
 70c:	01120111 	tsteq	r2, r1, lsl r1
 710:	42970640 	addsmi	r0, r7, #67108864	; 0x4000000
 714:	0013010c 	andseq	r0, r3, ip, lsl #2
 718:	012e1b00 	teqeq	lr, r0, lsl #22
 71c:	0b3a0e03 	bleq	e83f30 <WriteSemaphore+0xe6e674>
 720:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236	; 0xffffff14
 724:	01120111 	tsteq	r2, r1, lsl r1
 728:	42960640 	addsmi	r0, r6, #67108864	; 0x4000000
 72c:	0013010c 	andseq	r0, r3, ip, lsl #2
 730:	012e1c00 	teqeq	lr, r0, lsl #24
 734:	0b3a0e03 	bleq	e83f48 <WriteSemaphore+0xe6e68c>
 738:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236	; 0xffffff14
 73c:	01111349 	tsteq	r1, r9, asr #6
 740:	06400112 			; <UNDEFINED> instruction: 0x06400112
 744:	010c4296 			; <UNDEFINED> instruction: 0x010c4296
 748:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
 74c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 750:	0b3b0b3a 	bleq	ec3440 <WriteSemaphore+0xeadb84>
 754:	0a021349 	beq	85480 <WriteSemaphore+0x6fbc4>
 758:	341e0000 	ldrcc	r0, [lr], #-0
 75c:	3a0e0300 	bcc	381364 <WriteSemaphore+0x36baa8>
 760:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 764:	020c3f13 	andeq	r3, ip, #76	; 0x4c
 768:	0000000a 	andeq	r0, r0, sl
 76c:	25011101 	strcs	r1, [r1, #-257]	; 0x101
 770:	030b130e 	movweq	r1, #45838	; 0xb30e
 774:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 778:	00061001 	andeq	r1, r6, r1
 77c:	00160200 	andseq	r0, r6, r0, lsl #4
 780:	0b3a0e03 	bleq	e83f94 <WriteSemaphore+0xe6e6d8>
 784:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 788:	24030000 	strcs	r0, [r3], #-0
 78c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 790:	000e030b 	andeq	r0, lr, fp, lsl #6
 794:	00240400 	eoreq	r0, r4, r0, lsl #8
 798:	0b3e0b0b 	bleq	f833cc <WriteSemaphore+0xf6db10>
 79c:	00000803 	andeq	r0, r0, r3, lsl #16
 7a0:	0b000f05 	bleq	43bc <_start-0x3c44>
 7a4:	0600000b 	streq	r0, [r0], -fp
 7a8:	0b0b000f 	bleq	2c07ec <WriteSemaphore+0x2aaf30>
 7ac:	00001349 	andeq	r1, r0, r9, asr #6
 7b0:	03011707 	movweq	r1, #5895	; 0x1707
 7b4:	3a050b0e 	bcc	1433f4 <WriteSemaphore+0x12db38>
 7b8:	010b3b0b 	tsteq	fp, fp, lsl #22
 7bc:	08000013 	stmdaeq	r0, {r0, r1, r4}
 7c0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 7c4:	0b3b0b3a 	bleq	ec34b4 <WriteSemaphore+0xeadbf8>
 7c8:	00001349 	andeq	r1, r0, r9, asr #6
 7cc:	49003509 	stmdbmi	r0, {r0, r3, r8, sl, ip, sp}
 7d0:	0a000013 	beq	824 <_start-0x77dc>
 7d4:	13490101 	movtne	r0, #37121	; 0x9101
 7d8:	00001301 	andeq	r1, r0, r1, lsl #6
 7dc:	4900210b 	stmdbmi	r0, {r0, r1, r3, r8, sp}
 7e0:	00052f13 	andeq	r2, r5, r3, lsl pc
 7e4:	01130c00 	tsteq	r3, r0, lsl #24
 7e8:	0b0b0e03 	bleq	2c3ffc <WriteSemaphore+0x2ae740>
 7ec:	0b3b0b3a 	bleq	ec34dc <WriteSemaphore+0xeadc20>
 7f0:	00001301 	andeq	r1, r0, r1, lsl #6
 7f4:	03000d0d 	movweq	r0, #3341	; 0xd0d
 7f8:	3b0b3a0e 	blcc	2cf038 <WriteSemaphore+0x2b977c>
 7fc:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 800:	0e00000a 	cdpeq	0, 0, cr0, cr0, cr10, {0}
 804:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 754 <_start-0x78ac>
 808:	0b3a0e03 	bleq	e8401c <WriteSemaphore+0xe6e760>
 80c:	0c270b3b 	stceq	11, cr0, [r7], #-236	; 0xffffff14
 810:	01111349 	tsteq	r1, r9, asr #6
 814:	06400112 			; <UNDEFINED> instruction: 0x06400112
 818:	010c4296 			; <UNDEFINED> instruction: 0x010c4296
 81c:	0f000013 	svceq	0x00000013
 820:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 824:	0b3b0b3a 	bleq	ec3514 <WriteSemaphore+0xeadc58>
 828:	0a021349 	beq	85554 <WriteSemaphore+0x6fc98>
 82c:	34100000 	ldrcc	r0, [r0], #-0
 830:	3a0e0300 	bcc	381438 <WriteSemaphore+0x36bb7c>
 834:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 838:	000a0213 	andeq	r0, sl, r3, lsl r2
 83c:	012e1100 	teqeq	lr, r0, lsl #2
 840:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
 844:	0b3b0b3a 	bleq	ec3534 <WriteSemaphore+0xeadc78>
 848:	01110c27 	tsteq	r1, r7, lsr #24
 84c:	06400112 			; <UNDEFINED> instruction: 0x06400112
 850:	010c4296 			; <UNDEFINED> instruction: 0x010c4296
 854:	12000013 	andne	r0, r0, #19
 858:	08030005 	stmdaeq	r3, {r0, r2}
 85c:	0b3b0b3a 	bleq	ec354c <WriteSemaphore+0xeadc90>
 860:	0a021349 	beq	8558c <WriteSemaphore+0x6fcd0>
 864:	34130000 	ldrcc	r0, [r3], #-0
 868:	3a080300 	bcc	201470 <WriteSemaphore+0x1ebbb4>
 86c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 870:	000a0213 	andeq	r0, sl, r3, lsl r2
 874:	002e1400 	eoreq	r1, lr, r0, lsl #8
 878:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
 87c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
 880:	13490c27 	movtne	r0, #39975	; 0x9c27
 884:	01120111 	tsteq	r2, r1, lsl r1
 888:	42970640 	addsmi	r0, r7, #67108864	; 0x4000000
 88c:	1500000c 	strne	r0, [r0, #-12]
 890:	0c3f002e 	ldceq	0, cr0, [pc], #-184	; 7e0 <_start-0x7820>
 894:	0b3a0e03 	bleq	e840a8 <WriteSemaphore+0xe6e7ec>
 898:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236	; 0xffffff14
 89c:	01120111 	tsteq	r2, r1, lsl r1
 8a0:	42970640 	addsmi	r0, r7, #67108864	; 0x4000000
 8a4:	1600000c 	strne	r0, [r0], -ip
 8a8:	0e03012e 	adfeqsp	f0, f3, #0.5
 8ac:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
 8b0:	01110c27 	tsteq	r1, r7, lsr #24
 8b4:	06400112 			; <UNDEFINED> instruction: 0x06400112
 8b8:	010c4297 			; <UNDEFINED> instruction: 0x010c4297
 8bc:	17000013 	smladne	r0, r3, r0, r0
 8c0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 8c4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
 8c8:	0a021349 	beq	855f4 <WriteSemaphore+0x6fd38>
 8cc:	05180000 	ldreq	r0, [r8, #-0]
 8d0:	3a0e0300 	bcc	3814d8 <WriteSemaphore+0x36bc1c>
 8d4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 8d8:	000a0213 	andeq	r0, sl, r3, lsl r2
 8dc:	00341900 	eorseq	r1, r4, r0, lsl #18
 8e0:	0b3a0803 	bleq	e828f4 <WriteSemaphore+0xe6d038>
 8e4:	1349053b 	movtne	r0, #38203	; 0x953b
 8e8:	00000a02 	andeq	r0, r0, r2, lsl #20
 8ec:	4900261a 	stmdbmi	r0, {r1, r3, r4, r9, sl, sp}
 8f0:	1b000013 	blne	944 <_start-0x76bc>
 8f4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 8f8:	0b3b0b3a 	bleq	ec35e8 <WriteSemaphore+0xeadd2c>
 8fc:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 7e0 <_start-0x7820>
 900:	00000a02 	andeq	r0, r0, r2, lsl #20
 904:	01110100 	tsteq	r1, r0, lsl #2
 908:	0b130e25 	bleq	4c41a4 <WriteSemaphore+0x4ae8e8>
 90c:	01110e03 	tsteq	r1, r3, lsl #28
 910:	06100112 			; <UNDEFINED> instruction: 0x06100112
 914:	16020000 	strne	r0, [r2], -r0
 918:	3a0e0300 	bcc	381520 <WriteSemaphore+0x36bc64>
 91c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 920:	03000013 	movweq	r0, #19
 924:	0b0b000f 	bleq	2c0968 <WriteSemaphore+0x2ab0ac>
 928:	00001349 	andeq	r1, r0, r9, asr #6
 92c:	27011504 	strcs	r1, [r1, -r4, lsl #10]
 930:	0013010c 	andseq	r0, r3, ip, lsl #2
 934:	00050500 	andeq	r0, r5, r0, lsl #10
 938:	00001349 	andeq	r1, r0, r9, asr #6
 93c:	0b002406 	bleq	995c <__module_entries_end+0x18b8>
 940:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 944:	07000008 	streq	r0, [r0, -r8]
 948:	0b0b000f 	bleq	2c098c <WriteSemaphore+0x2ab0d0>
 94c:	13080000 	movwne	r0, #32768	; 0x8000
 950:	3a0b0b01 	bcc	2c355c <WriteSemaphore+0x2adca0>
 954:	010b3b0b 	tsteq	fp, fp, lsl #22
 958:	09000013 	stmdbeq	r0, {r0, r1, r4}
 95c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 960:	0b3b0b3a 	bleq	ec3650 <WriteSemaphore+0xeadd94>
 964:	0a381349 	beq	e05690 <WriteSemaphore+0xdefdd4>
 968:	240a0000 	strcs	r0, [sl], #-0
 96c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 970:	000e030b 	andeq	r0, lr, fp, lsl #6
 974:	002e0b00 	eoreq	r0, lr, r0, lsl #22
 978:	0b3a0e03 	bleq	e8418c <WriteSemaphore+0xe6e8d0>
 97c:	01110b3b 	tsteq	r1, fp, lsr fp
 980:	06400112 			; <UNDEFINED> instruction: 0x06400112
 984:	000c4297 	muleq	ip, r7, r2
 988:	012e0c00 	teqeq	lr, r0, lsl #24
 98c:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
 990:	0b3b0b3a 	bleq	ec3680 <WriteSemaphore+0xeaddc4>
 994:	01120111 	tsteq	r2, r1, lsl r1
 998:	42960640 	addsmi	r0, r6, #67108864	; 0x4000000
 99c:	0013010c 	andseq	r0, r3, ip, lsl #2
 9a0:	00340d00 	eorseq	r0, r4, r0, lsl #26
 9a4:	0b3a0e03 	bleq	e841b8 <WriteSemaphore+0xe6e8fc>
 9a8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 9ac:	00000a02 	andeq	r0, r0, r2, lsl #20
 9b0:	0300340e 	movweq	r3, #1038	; 0x40e
 9b4:	3b0b3a08 	blcc	2cf1dc <WriteSemaphore+0x2b9920>
 9b8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 9bc:	0f00000a 	svceq	0x0000000a
 9c0:	0e03000a 	cdpeq	0, 0, cr0, cr3, cr10, {0}
 9c4:	0b3b0b3a 	bleq	ec36b4 <WriteSemaphore+0xeaddf8>
 9c8:	00000111 	andeq	r0, r0, r1, lsl r1
 9cc:	11010b10 	tstne	r1, r0, lsl fp
 9d0:	00011201 	andeq	r1, r1, r1, lsl #4
 9d4:	012e1100 	teqeq	lr, r0, lsl #2
 9d8:	0b3a0e03 	bleq	e841ec <WriteSemaphore+0xe6e930>
 9dc:	0c270b3b 	stceq	11, cr0, [r7], #-236	; 0xffffff14
 9e0:	01120111 	tsteq	r2, r1, lsl r1
 9e4:	42970640 	addsmi	r0, r7, #67108864	; 0x4000000
 9e8:	0013010c 	andseq	r0, r3, ip, lsl #2
 9ec:	00051200 	andeq	r1, r5, r0, lsl #4
 9f0:	0b3a0e03 	bleq	e84204 <WriteSemaphore+0xe6e948>
 9f4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 9f8:	00000a02 	andeq	r0, r0, r2, lsl #20
 9fc:	3f012e13 	svccc	0x00012e13
 a00:	3a0e030c 	bcc	381638 <WriteSemaphore+0x36bd7c>
 a04:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 a08:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 a0c:	97064001 	strls	r4, [r6, -r1]
 a10:	13010c42 	movwne	r0, #7234	; 0x1c42
 a14:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
 a18:	030c3f01 	movweq	r3, #52993	; 0xcf01
 a1c:	3b0b3a0e 	blcc	2cf25c <WriteSemaphore+0x2b99a0>
 a20:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
 a24:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 a28:	96064001 	strls	r4, [r6], -r1
 a2c:	13010c42 	movwne	r0, #7234	; 0x1c42
 a30:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
 a34:	030c3f01 	movweq	r3, #52993	; 0xcf01
 a38:	3b0b3a0e 	blcc	2cf278 <WriteSemaphore+0x2b99bc>
 a3c:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
 a40:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 a44:	97064001 	strls	r4, [r6, -r1]
 a48:	13010c42 	movwne	r0, #7234	; 0x1c42
 a4c:	2e160000 	cdpcs	0, 1, cr0, cr6, cr0, {0}
 a50:	030c3f00 	movweq	r3, #52992	; 0xcf00
 a54:	3b0b3a0e 	blcc	2cf294 <WriteSemaphore+0x2b99d8>
 a58:	1113490b 	tstne	r3, fp, lsl #18
 a5c:	40011201 	andmi	r1, r1, r1, lsl #4
 a60:	0c429606 	mcrreq	6, 0, r9, r2, cr6
 a64:	01170000 	tsteq	r7, r0
 a68:	01134901 	tsteq	r3, r1, lsl #18
 a6c:	18000013 	stmdane	r0, {r0, r1, r4}
 a70:	13490021 	movtne	r0, #36897	; 0x9021
 a74:	00000b2f 	andeq	r0, r0, pc, lsr #22
 a78:	49002619 	stmdbmi	r0, {r0, r3, r4, r9, sl, sp}
 a7c:	1a000013 	bne	ad0 <_start-0x7530>
 a80:	13490035 	movtne	r0, #36917	; 0x9035
 a84:	01000000 	mrseq	r0, (UNDEF: 0)
 a88:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 a8c:	0e030b13 	vmoveq.32	d3[0], r0
 a90:	01120111 	tsteq	r2, r1, lsl r1
 a94:	00000610 	andeq	r0, r0, r0, lsl r6
 a98:	0b011302 	bleq	456a8 <WriteSemaphore+0x2fdec>
 a9c:	3b0b3a0b 	blcc	2cf2d0 <WriteSemaphore+0x2b9a14>
 aa0:	0013010b 	andseq	r0, r3, fp, lsl #2
 aa4:	000d0300 	andeq	r0, sp, r0, lsl #6
 aa8:	0b3a0e03 	bleq	e842bc <WriteSemaphore+0xe6ea00>
 aac:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 ab0:	00000a38 	andeq	r0, r0, r8, lsr sl
 ab4:	49010104 	stmdbmi	r1, {r2, r8}
 ab8:	00130113 	andseq	r0, r3, r3, lsl r1
 abc:	00210500 	eoreq	r0, r1, r0, lsl #10
 ac0:	0b2f1349 	bleq	bc57ec <WriteSemaphore+0xbaff30>
 ac4:	24060000 	strcs	r0, [r6], #-0
 ac8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 acc:	000e030b 	andeq	r0, lr, fp, lsl #6
 ad0:	00160700 	andseq	r0, r6, r0, lsl #14
 ad4:	0b3a0e03 	bleq	e842e8 <WriteSemaphore+0xe6ea2c>
 ad8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 adc:	2e080000 	cdpcs	0, 0, cr0, cr8, cr0, {0}
 ae0:	030c3f01 	movweq	r3, #52993	; 0xcf01
 ae4:	3b0b3a0e 	blcc	2cf324 <WriteSemaphore+0x2b9a68>
 ae8:	110c270b 	tstne	ip, fp, lsl #14
 aec:	40011201 	andmi	r1, r1, r1, lsl #4
 af0:	0c429706 	mcrreq	7, 0, r9, r2, cr6
 af4:	00001301 	andeq	r1, r0, r1, lsl #6
 af8:	03000509 	movweq	r0, #1289	; 0x509
 afc:	3b0b3a0e 	blcc	2cf33c <WriteSemaphore+0x2b9a80>
 b00:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 b04:	0a00000a 	beq	b34 <_start-0x74cc>
 b08:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 b0c:	0b3b0b3a 	bleq	ec37fc <WriteSemaphore+0xeadf40>
 b10:	0a021349 	beq	8583c <WriteSemaphore+0x6ff80>
 b14:	340b0000 	strcc	r0, [fp], #-0
 b18:	3a080300 	bcc	201720 <WriteSemaphore+0x1ebe64>
 b1c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 b20:	000a0213 	andeq	r0, sl, r3, lsl r2
 b24:	00240c00 	eoreq	r0, r4, r0, lsl #24
 b28:	0b3e0b0b 	bleq	f8375c <WriteSemaphore+0xf6dea0>
 b2c:	00000803 	andeq	r0, r0, r3, lsl #16
 b30:	0300340d 	movweq	r3, #1037	; 0x40d
 b34:	3b0b3a0e 	blcc	2cf374 <WriteSemaphore+0x2b9ab8>
 b38:	3f13490b 	svccc	0x0013490b
 b3c:	000a020c 	andeq	r0, sl, ip, lsl #4
 b40:	00260e00 	eoreq	r0, r6, r0, lsl #28
 b44:	00001349 	andeq	r1, r0, r9, asr #6
 b48:	0b000f0f 	bleq	478c <_start-0x3874>
 b4c:	0013490b 	andseq	r4, r3, fp, lsl #18
 b50:	00351000 	eorseq	r1, r5, r0
 b54:	00001349 	andeq	r1, r0, r9, asr #6
 b58:	01110100 	tsteq	r1, r0, lsl #2
 b5c:	0b130e25 	bleq	4c43f8 <WriteSemaphore+0x4aeb3c>
 b60:	01110e03 	tsteq	r1, r3, lsl #28
 b64:	06100112 			; <UNDEFINED> instruction: 0x06100112
 b68:	24020000 	strcs	r0, [r2], #-0
 b6c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 b70:	0008030b 	andeq	r0, r8, fp, lsl #6
 b74:	00240300 	eoreq	r0, r4, r0, lsl #6
 b78:	0b3e0b0b 	bleq	f837ac <WriteSemaphore+0xf6def0>
 b7c:	00000e03 	andeq	r0, r0, r3, lsl #28
 b80:	0b000f04 	bleq	4798 <_start-0x3868>
 b84:	0500000b 	streq	r0, [r0, #-11]
 b88:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 b8c:	0b3b0b3a 	bleq	ec387c <WriteSemaphore+0xeadfc0>
 b90:	00001349 	andeq	r1, r0, r9, asr #6
 b94:	3f002e06 	svccc	0x00002e06
 b98:	3a0e030c 	bcc	3817d0 <WriteSemaphore+0x36bf14>
 b9c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 ba0:	1113490c 	tstne	r3, ip, lsl #18
 ba4:	40011201 	andmi	r1, r1, r1, lsl #4
 ba8:	0c429606 	mcrreq	6, 0, r9, r2, cr6
 bac:	2e070000 	cdpcs	0, 0, cr0, cr7, cr0, {0}
 bb0:	030c3f01 	movweq	r3, #52993	; 0xcf01
 bb4:	3b0b3a0e 	blcc	2cf3f4 <WriteSemaphore+0x2b9b38>
 bb8:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
 bbc:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 bc0:	96064001 	strls	r4, [r6], -r1
 bc4:	13010c42 	movwne	r0, #7234	; 0x1c42
 bc8:	05080000 	streq	r0, [r8, #-0]
 bcc:	3a080300 	bcc	2017d4 <WriteSemaphore+0x1ebf18>
 bd0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 bd4:	000a0213 	andeq	r0, sl, r3, lsl r2
 bd8:	00340900 	eorseq	r0, r4, r0, lsl #18
 bdc:	0b3a0e03 	bleq	e843f0 <WriteSemaphore+0xe6eb34>
 be0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 be4:	00000a02 	andeq	r0, r0, r2, lsl #20
 be8:	0300340a 	movweq	r3, #1034	; 0x40a
 bec:	3b0b3a0e 	blcc	2cf42c <WriteSemaphore+0x2b9b70>
 bf0:	3f13490b 	svccc	0x0013490b
 bf4:	000a020c 	andeq	r0, sl, ip, lsl #4
 bf8:	11010000 	mrsne	r0, (UNDEF: 1)
 bfc:	130e2501 	movwne	r2, #58625	; 0xe501
 c00:	110e030b 	tstne	lr, fp, lsl #6
 c04:	10011201 	andne	r1, r1, r1, lsl #4
 c08:	02000006 	andeq	r0, r0, #6
 c0c:	0b0b0024 	bleq	2c0ca4 <WriteSemaphore+0x2ab3e8>
 c10:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 c14:	24030000 	strcs	r0, [r3], #-0
 c18:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 c1c:	000e030b 	andeq	r0, lr, fp, lsl #6
 c20:	012e0400 	teqeq	lr, r0, lsl #8
 c24:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
 c28:	0b3b0b3a 	bleq	ec3918 <WriteSemaphore+0xeae05c>
 c2c:	13490c27 	movtne	r0, #39975	; 0x9c27
 c30:	01120111 	tsteq	r2, r1, lsl r1
 c34:	42960640 	addsmi	r0, r6, #67108864	; 0x4000000
 c38:	0013010c 	andseq	r0, r3, ip, lsl #2
 c3c:	00050500 	andeq	r0, r5, r0, lsl #10
 c40:	0b3a0803 	bleq	e82c54 <WriteSemaphore+0xe6d398>
 c44:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 c48:	00000a02 	andeq	r0, r0, r2, lsl #20
 c4c:	3f002e06 	svccc	0x00002e06
 c50:	3a0e030c 	bcc	381888 <WriteSemaphore+0x36bfcc>
 c54:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 c58:	1113490c 	tstne	r3, ip, lsl #18
 c5c:	40011201 	andmi	r1, r1, r1, lsl #4
 c60:	0c429606 	mcrreq	6, 0, r9, r2, cr6
 c64:	0f070000 	svceq	0x00070000
 c68:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 c6c:	08000013 	stmdaeq	r0, {r0, r1, r4}
 c70:	13490026 	movtne	r0, #36902	; 0x9026
 c74:	01000000 	mrseq	r0, (UNDEF: 0)
 c78:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 c7c:	0e030b13 	vmoveq.32	d3[0], r0
 c80:	01120111 	tsteq	r2, r1, lsl r1
 c84:	00000610 	andeq	r0, r0, r0, lsl r6
 c88:	0b002402 	bleq	9c98 <__module_entries_end+0x1bf4>
 c8c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 c90:	03000008 	movweq	r0, #8
 c94:	0b0b0024 	bleq	2c0d2c <WriteSemaphore+0x2ab470>
 c98:	0e030b3e 	vmoveq.16	d3[0], r0
 c9c:	0f040000 	svceq	0x00040000
 ca0:	000b0b00 	andeq	r0, fp, r0, lsl #22
 ca4:	012e0500 	teqeq	lr, r0, lsl #10
 ca8:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
 cac:	0b3b0b3a 	bleq	ec399c <WriteSemaphore+0xeae0e0>
 cb0:	01110c27 	tsteq	r1, r7, lsr #24
 cb4:	06400112 			; <UNDEFINED> instruction: 0x06400112
 cb8:	010c4296 			; <UNDEFINED> instruction: 0x010c4296
 cbc:	06000013 			; <UNDEFINED> instruction: 0x06000013
 cc0:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 cc4:	0b3b0b3a 	bleq	ec39b4 <WriteSemaphore+0xeae0f8>
 cc8:	0a021349 	beq	859f4 <WriteSemaphore+0x70138>
 ccc:	34070000 	strcc	r0, [r7], #-0
 cd0:	3a080300 	bcc	2018d8 <WriteSemaphore+0x1ec01c>
 cd4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 cd8:	000a0213 	andeq	r0, sl, r3, lsl r2
 cdc:	012e0800 	teqeq	lr, r0, lsl #16
 ce0:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
 ce4:	0b3b0b3a 	bleq	ec39d4 <WriteSemaphore+0xeae118>
 ce8:	01110c27 	tsteq	r1, r7, lsr #24
 cec:	06400112 			; <UNDEFINED> instruction: 0x06400112
 cf0:	000c4296 	muleq	ip, r6, r2
 cf4:	012e0900 	teqeq	lr, r0, lsl #18
 cf8:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
 cfc:	0b3b0b3a 	bleq	ec39ec <WriteSemaphore+0xeae130>
 d00:	0c3c1349 	ldceq	3, cr1, [ip], #-292	; 0xfffffedc
 d04:	180a0000 	stmdane	sl, {}	; <UNPREDICTABLE>
 d08:	00000000 	andeq	r0, r0, r0

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
       0:	00000000 	andeq	r0, r0, r0
       4:	00000004 	andeq	r0, r0, r4
       8:	007d0002 	rsbseq	r0, sp, r2
       c:	00000004 	andeq	r0, r0, r4
      10:	00000008 	andeq	r0, r0, r8
      14:	047d0002 	ldrbteq	r0, [sp], #-2
      18:	00000008 	andeq	r0, r0, r8
      1c:	00000240 	andeq	r0, r0, r0, asr #4
      20:	047b0002 	ldrbteq	r0, [fp], #-2
	...
      2c:	00000240 	andeq	r0, r0, r0, asr #4
      30:	00000244 	andeq	r0, r0, r4, asr #4
      34:	007d0002 	rsbseq	r0, sp, r2
      38:	00000244 	andeq	r0, r0, r4, asr #4
      3c:	00000248 	andeq	r0, r0, r8, asr #4
      40:	087d0002 	ldmdaeq	sp!, {r1}^
      44:	00000248 	andeq	r0, r0, r8, asr #4
      48:	0000025c 	andeq	r0, r0, ip, asr r2
      4c:	047b0002 	ldrbteq	r0, [fp], #-2
	...
      58:	0000025c 	andeq	r0, r0, ip, asr r2
      5c:	00000260 	andeq	r0, r0, r0, ror #4
      60:	007d0002 	rsbseq	r0, sp, r2
      64:	00000260 	andeq	r0, r0, r0, ror #4
      68:	00000264 	andeq	r0, r0, r4, ror #4
      6c:	047d0002 	ldrbteq	r0, [sp], #-2
      70:	00000264 	andeq	r0, r0, r4, ror #4
      74:	00000270 	andeq	r0, r0, r0, ror r2
      78:	047b0002 	ldrbteq	r0, [fp], #-2
	...
      84:	00000270 	andeq	r0, r0, r0, ror r2
      88:	00000274 	andeq	r0, r0, r4, ror r2
      8c:	007d0002 	rsbseq	r0, sp, r2
      90:	00000274 	andeq	r0, r0, r4, ror r2
      94:	00000278 	andeq	r0, r0, r8, ror r2
      98:	087d0002 	ldmdaeq	sp!, {r1}^
      9c:	00000278 	andeq	r0, r0, r8, ror r2
      a0:	000002a8 	andeq	r0, r0, r8, lsr #5
      a4:	047b0002 	ldrbteq	r0, [fp], #-2
	...
      b0:	000002a8 	andeq	r0, r0, r8, lsr #5
      b4:	000002ac 	andeq	r0, r0, ip, lsr #5
      b8:	007d0002 	rsbseq	r0, sp, r2
      bc:	000002ac 	andeq	r0, r0, ip, lsr #5
      c0:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
      c4:	087d0002 	ldmdaeq	sp!, {r1}^
      c8:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
      cc:	0000035c 	andeq	r0, r0, ip, asr r3
      d0:	047b0002 	ldrbteq	r0, [fp], #-2
	...
      e0:	00000004 	andeq	r0, r0, r4
      e4:	007d0002 	rsbseq	r0, sp, r2
      e8:	00000004 	andeq	r0, r0, r4
      ec:	00000008 	andeq	r0, r0, r8
      f0:	047d0002 	ldrbteq	r0, [sp], #-2
      f4:	00000008 	andeq	r0, r0, r8
      f8:	00000094 	muleq	r0, r4, r0
      fc:	047b0002 	ldrbteq	r0, [fp], #-2
	...
     108:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     10c:	000001f4 	strdeq	r0, [r0], -r4
     110:	007d0002 	rsbseq	r0, sp, r2
     114:	000001f4 	strdeq	r0, [r0], -r4
     118:	000001f8 	strdeq	r0, [r0], -r8
     11c:	047d0002 	ldrbteq	r0, [sp], #-2
     120:	000001f8 	strdeq	r0, [r0], -r8
     124:	00000230 	andeq	r0, r0, r0, lsr r2
     128:	047b0002 	ldrbteq	r0, [fp], #-2
	...
     134:	00000230 	andeq	r0, r0, r0, lsr r2
     138:	00000234 	andeq	r0, r0, r4, lsr r2
     13c:	007d0002 	rsbseq	r0, sp, r2
     140:	00000234 	andeq	r0, r0, r4, lsr r2
     144:	00000238 	andeq	r0, r0, r8, lsr r2
     148:	047d0002 	ldrbteq	r0, [sp], #-2
     14c:	00000238 	andeq	r0, r0, r8, lsr r2
     150:	00000290 	muleq	r0, r0, r2
     154:	047b0002 	ldrbteq	r0, [fp], #-2
	...
     164:	00000004 	andeq	r0, r0, r4
     168:	007d0002 	rsbseq	r0, sp, r2
     16c:	00000004 	andeq	r0, r0, r4
     170:	00000008 	andeq	r0, r0, r8
     174:	087d0002 	ldmdaeq	sp!, {r1}^
     178:	00000008 	andeq	r0, r0, r8
     17c:	00000168 	andeq	r0, r0, r8, ror #2
     180:	047b0002 	ldrbteq	r0, [fp], #-2
	...
     18c:	00000168 	andeq	r0, r0, r8, ror #2
     190:	0000016c 	andeq	r0, r0, ip, ror #2
     194:	007d0002 	rsbseq	r0, sp, r2
     198:	0000016c 	andeq	r0, r0, ip, ror #2
     19c:	00000170 	andeq	r0, r0, r0, ror r1
     1a0:	087d0002 	ldmdaeq	sp!, {r1}^
     1a4:	00000170 	andeq	r0, r0, r0, ror r1
     1a8:	00000248 	andeq	r0, r0, r8, asr #4
     1ac:	047b0002 	ldrbteq	r0, [fp], #-2
	...
     1b8:	00000248 	andeq	r0, r0, r8, asr #4
     1bc:	0000024c 	andeq	r0, r0, ip, asr #4
     1c0:	007d0002 	rsbseq	r0, sp, r2
     1c4:	0000024c 	andeq	r0, r0, ip, asr #4
     1c8:	00000250 	andeq	r0, r0, r0, asr r2
     1cc:	087d0002 	ldmdaeq	sp!, {r1}^
     1d0:	00000250 	andeq	r0, r0, r0, asr r2
     1d4:	00000330 	andeq	r0, r0, r0, lsr r3
     1d8:	047b0002 	ldrbteq	r0, [fp], #-2
	...
     1e4:	00000330 	andeq	r0, r0, r0, lsr r3
     1e8:	00000334 	andeq	r0, r0, r4, lsr r3
     1ec:	007d0002 	rsbseq	r0, sp, r2
     1f0:	00000334 	andeq	r0, r0, r4, lsr r3
     1f4:	00000338 	andeq	r0, r0, r8, lsr r3
     1f8:	087d0002 	ldmdaeq	sp!, {r1}^
     1fc:	00000338 	andeq	r0, r0, r8, lsr r3
     200:	00000508 	andeq	r0, r0, r8, lsl #10
     204:	047b0002 	ldrbteq	r0, [fp], #-2
	...
     210:	00000508 	andeq	r0, r0, r8, lsl #10
     214:	0000050c 	andeq	r0, r0, ip, lsl #10
     218:	007d0002 	rsbseq	r0, sp, r2
     21c:	0000050c 	andeq	r0, r0, ip, lsl #10
     220:	00000510 	andeq	r0, r0, r0, lsl r5
     224:	087d0002 	ldmdaeq	sp!, {r1}^
     228:	00000510 	andeq	r0, r0, r0, lsl r5
     22c:	00000634 	andeq	r0, r0, r4, lsr r6
     230:	047b0002 	ldrbteq	r0, [fp], #-2
	...
     23c:	00000634 	andeq	r0, r0, r4, lsr r6
     240:	00000638 	andeq	r0, r0, r8, lsr r6
     244:	007d0002 	rsbseq	r0, sp, r2
     248:	00000638 	andeq	r0, r0, r8, lsr r6
     24c:	0000063c 	andeq	r0, r0, ip, lsr r6
     250:	087d0002 	ldmdaeq	sp!, {r1}^
     254:	0000063c 	andeq	r0, r0, ip, lsr r6
     258:	000006d8 	ldrdeq	r0, [r0], -r8
     25c:	047b0002 	ldrbteq	r0, [fp], #-2
	...
     268:	000006d8 	ldrdeq	r0, [r0], -r8
     26c:	000006dc 	ldrdeq	r0, [r0], -ip
     270:	007d0002 	rsbseq	r0, sp, r2
     274:	000006dc 	ldrdeq	r0, [r0], -ip
     278:	000006e0 	andeq	r0, r0, r0, ror #13
     27c:	087d0002 	ldmdaeq	sp!, {r1}^
     280:	000006e0 	andeq	r0, r0, r0, ror #13
     284:	00000764 	andeq	r0, r0, r4, ror #14
     288:	047b0002 	ldrbteq	r0, [fp], #-2
	...
     298:	00000004 	andeq	r0, r0, r4
     29c:	007d0002 	rsbseq	r0, sp, r2
     2a0:	00000004 	andeq	r0, r0, r4
     2a4:	00000008 	andeq	r0, r0, r8
     2a8:	047d0002 	ldrbteq	r0, [sp], #-2
     2ac:	00000008 	andeq	r0, r0, r8
     2b0:	00000064 	andeq	r0, r0, r4, rrx
     2b4:	047b0002 	ldrbteq	r0, [fp], #-2
	...
     2c0:	00000064 	andeq	r0, r0, r4, rrx
     2c4:	00000068 	andeq	r0, r0, r8, rrx
     2c8:	007d0002 	rsbseq	r0, sp, r2
     2cc:	00000068 	andeq	r0, r0, r8, rrx
     2d0:	0000006c 	andeq	r0, r0, ip, rrx
     2d4:	047d0002 	ldrbteq	r0, [sp], #-2
     2d8:	0000006c 	andeq	r0, r0, ip, rrx
     2dc:	0000008c 	andeq	r0, r0, ip, lsl #1
     2e0:	047b0002 	ldrbteq	r0, [fp], #-2
	...
     2ec:	0000008c 	andeq	r0, r0, ip, lsl #1
     2f0:	00000090 	muleq	r0, r0, r0
     2f4:	007d0002 	rsbseq	r0, sp, r2
     2f8:	00000090 	muleq	r0, r0, r0
     2fc:	00000094 	muleq	r0, r4, r0
     300:	047d0002 	ldrbteq	r0, [sp], #-2
     304:	00000094 	muleq	r0, r4, r0
     308:	00000120 	andeq	r0, r0, r0, lsr #2
     30c:	047b0002 	ldrbteq	r0, [fp], #-2
	...
     318:	00000120 	andeq	r0, r0, r0, lsr #2
     31c:	00000124 	andeq	r0, r0, r4, lsr #2
     320:	007d0002 	rsbseq	r0, sp, r2
     324:	00000124 	andeq	r0, r0, r4, lsr #2
     328:	00000128 	andeq	r0, r0, r8, lsr #2
     32c:	047d0002 	ldrbteq	r0, [sp], #-2
     330:	00000128 	andeq	r0, r0, r8, lsr #2
     334:	000001f4 	strdeq	r0, [r0], -r4
     338:	047b0002 	ldrbteq	r0, [fp], #-2
	...
     344:	000001f4 	strdeq	r0, [r0], -r4
     348:	000001f8 	strdeq	r0, [r0], -r8
     34c:	007d0002 	rsbseq	r0, sp, r2
     350:	000001f8 	strdeq	r0, [r0], -r8
     354:	000001fc 	strdeq	r0, [r0], -ip
     358:	047d0002 	ldrbteq	r0, [sp], #-2
     35c:	000001fc 	strdeq	r0, [r0], -ip
     360:	00000288 	andeq	r0, r0, r8, lsl #5
     364:	047b0002 	ldrbteq	r0, [fp], #-2
	...
     374:	00000004 	andeq	r0, r0, r4
     378:	007d0002 	rsbseq	r0, sp, r2
     37c:	00000004 	andeq	r0, r0, r4
     380:	00000008 	andeq	r0, r0, r8
     384:	087d0002 	ldmdaeq	sp!, {r1}^
     388:	00000008 	andeq	r0, r0, r8
     38c:	00000114 	andeq	r0, r0, r4, lsl r1
     390:	047b0002 	ldrbteq	r0, [fp], #-2
	...
     39c:	00000114 	andeq	r0, r0, r4, lsl r1
     3a0:	00000118 	andeq	r0, r0, r8, lsl r1
     3a4:	007d0002 	rsbseq	r0, sp, r2
     3a8:	00000118 	andeq	r0, r0, r8, lsl r1
     3ac:	0000011c 	andeq	r0, r0, ip, lsl r1
     3b0:	087d0002 	ldmdaeq	sp!, {r1}^
     3b4:	0000011c 	andeq	r0, r0, ip, lsl r1
     3b8:	000001dc 	ldrdeq	r0, [r0], -ip
     3bc:	047b0002 	ldrbteq	r0, [fp], #-2
	...
     3c8:	000001dc 	ldrdeq	r0, [r0], -ip
     3cc:	000001e0 	andeq	r0, r0, r0, ror #3
     3d0:	007d0002 	rsbseq	r0, sp, r2
     3d4:	000001e0 	andeq	r0, r0, r0, ror #3
     3d8:	000001e4 	andeq	r0, r0, r4, ror #3
     3dc:	087d0002 	ldmdaeq	sp!, {r1}^
     3e0:	000001e4 	andeq	r0, r0, r4, ror #3
     3e4:	00000388 	andeq	r0, r0, r8, lsl #7
     3e8:	047b0002 	ldrbteq	r0, [fp], #-2
	...
     3f4:	00000388 	andeq	r0, r0, r8, lsl #7
     3f8:	0000038c 	andeq	r0, r0, ip, lsl #7
     3fc:	007d0002 	rsbseq	r0, sp, r2
     400:	0000038c 	andeq	r0, r0, ip, lsl #7
     404:	00000390 	muleq	r0, r0, r3
     408:	087d0002 	ldmdaeq	sp!, {r1}^
     40c:	00000390 	muleq	r0, r0, r3
     410:	00000464 	andeq	r0, r0, r4, ror #8
     414:	047b0002 	ldrbteq	r0, [fp], #-2
	...
     420:	00000464 	andeq	r0, r0, r4, ror #8
     424:	00000468 	andeq	r0, r0, r8, ror #8
     428:	007d0002 	rsbseq	r0, sp, r2
     42c:	00000468 	andeq	r0, r0, r8, ror #8
     430:	0000046c 	andeq	r0, r0, ip, ror #8
     434:	087d0002 	ldmdaeq	sp!, {r1}^
     438:	0000046c 	andeq	r0, r0, ip, ror #8
     43c:	00000670 	andeq	r0, r0, r0, ror r6
     440:	047b0002 	ldrbteq	r0, [fp], #-2
	...
     44c:	00000670 	andeq	r0, r0, r0, ror r6
     450:	00000674 	andeq	r0, r0, r4, ror r6
     454:	007d0002 	rsbseq	r0, sp, r2
     458:	00000674 	andeq	r0, r0, r4, ror r6
     45c:	00000678 	andeq	r0, r0, r8, ror r6
     460:	087d0002 	ldmdaeq	sp!, {r1}^
     464:	00000678 	andeq	r0, r0, r8, ror r6
     468:	00000750 	andeq	r0, r0, r0, asr r7
     46c:	047b0002 	ldrbteq	r0, [fp], #-2
	...
     478:	00000750 	andeq	r0, r0, r0, asr r7
     47c:	00000754 	andeq	r0, r0, r4, asr r7
     480:	007d0002 	rsbseq	r0, sp, r2
     484:	00000754 	andeq	r0, r0, r4, asr r7
     488:	00000758 	andeq	r0, r0, r8, asr r7
     48c:	087d0002 	ldmdaeq	sp!, {r1}^
     490:	00000758 	andeq	r0, r0, r8, asr r7
     494:	00000784 	andeq	r0, r0, r4, lsl #15
     498:	047b0002 	ldrbteq	r0, [fp], #-2
	...
     4a4:	00000784 	andeq	r0, r0, r4, lsl #15
     4a8:	00000788 	andeq	r0, r0, r8, lsl #15
     4ac:	007d0002 	rsbseq	r0, sp, r2
     4b0:	00000788 	andeq	r0, r0, r8, lsl #15
     4b4:	0000078c 	andeq	r0, r0, ip, lsl #15
     4b8:	047d0002 	ldrbteq	r0, [sp], #-2
     4bc:	0000078c 	andeq	r0, r0, ip, lsl #15
     4c0:	000007b4 			; <UNDEFINED> instruction: 0x000007b4
     4c4:	047b0002 	ldrbteq	r0, [fp], #-2
	...
     4d0:	000007b4 			; <UNDEFINED> instruction: 0x000007b4
     4d4:	000007b8 			; <UNDEFINED> instruction: 0x000007b8
     4d8:	007d0002 	rsbseq	r0, sp, r2
     4dc:	000007b8 			; <UNDEFINED> instruction: 0x000007b8
     4e0:	000007bc 			; <UNDEFINED> instruction: 0x000007bc
     4e4:	087d0002 	ldmdaeq	sp!, {r1}^
     4e8:	000007bc 			; <UNDEFINED> instruction: 0x000007bc
     4ec:	000007e4 	andeq	r0, r0, r4, ror #15
     4f0:	047b0002 	ldrbteq	r0, [fp], #-2
	...
     4fc:	000007e4 	andeq	r0, r0, r4, ror #15
     500:	000007e8 	andeq	r0, r0, r8, ror #15
     504:	007d0002 	rsbseq	r0, sp, r2
     508:	000007e8 	andeq	r0, r0, r8, ror #15
     50c:	000007ec 	andeq	r0, r0, ip, ror #15
     510:	087d0002 	ldmdaeq	sp!, {r1}^
     514:	000007ec 	andeq	r0, r0, ip, ror #15
     518:	00000914 	andeq	r0, r0, r4, lsl r9
     51c:	047b0002 	ldrbteq	r0, [fp], #-2
	...
     528:	00000914 	andeq	r0, r0, r4, lsl r9
     52c:	00000918 	andeq	r0, r0, r8, lsl r9
     530:	007d0002 	rsbseq	r0, sp, r2
     534:	00000918 	andeq	r0, r0, r8, lsl r9
     538:	0000091c 	andeq	r0, r0, ip, lsl r9
     53c:	087d0002 	ldmdaeq	sp!, {r1}^
     540:	0000091c 	andeq	r0, r0, ip, lsl r9
     544:	000009a4 	andeq	r0, r0, r4, lsr #19
     548:	047b0002 	ldrbteq	r0, [fp], #-2
	...
     554:	000009a4 	andeq	r0, r0, r4, lsr #19
     558:	000009a8 	andeq	r0, r0, r8, lsr #19
     55c:	007d0002 	rsbseq	r0, sp, r2
     560:	000009a8 	andeq	r0, r0, r8, lsr #19
     564:	000009ac 	andeq	r0, r0, ip, lsr #19
     568:	087d0002 	ldmdaeq	sp!, {r1}^
     56c:	000009ac 	andeq	r0, r0, ip, lsr #19
     570:	00000aa4 	andeq	r0, r0, r4, lsr #21
     574:	047b0002 	ldrbteq	r0, [fp], #-2
	...
     580:	00000aa4 	andeq	r0, r0, r4, lsr #21
     584:	00000aa8 	andeq	r0, r0, r8, lsr #21
     588:	007d0002 	rsbseq	r0, sp, r2
     58c:	00000aa8 	andeq	r0, r0, r8, lsr #21
     590:	00000aac 	andeq	r0, r0, ip, lsr #21
     594:	087d0002 	ldmdaeq	sp!, {r1}^
     598:	00000aac 	andeq	r0, r0, ip, lsr #21
     59c:	00000ae8 	andeq	r0, r0, r8, ror #21
     5a0:	047b0002 	ldrbteq	r0, [fp], #-2
	...
     5ac:	00000ae8 	andeq	r0, r0, r8, ror #21
     5b0:	00000aec 	andeq	r0, r0, ip, ror #21
     5b4:	007d0002 	rsbseq	r0, sp, r2
     5b8:	00000aec 	andeq	r0, r0, ip, ror #21
     5bc:	00000af0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     5c0:	047d0002 	ldrbteq	r0, [sp], #-2
     5c4:	00000af0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     5c8:	00000b28 	andeq	r0, r0, r8, lsr #22
     5cc:	047b0002 	ldrbteq	r0, [fp], #-2
	...
     5d8:	00000b28 	andeq	r0, r0, r8, lsr #22
     5dc:	00000b2c 	andeq	r0, r0, ip, lsr #22
     5e0:	007d0002 	rsbseq	r0, sp, r2
     5e4:	00000b2c 	andeq	r0, r0, ip, lsr #22
     5e8:	00000b30 	andeq	r0, r0, r0, lsr fp
     5ec:	087d0002 	ldmdaeq	sp!, {r1}^
     5f0:	00000b30 	andeq	r0, r0, r0, lsr fp
     5f4:	00000b74 	andeq	r0, r0, r4, ror fp
     5f8:	047b0002 	ldrbteq	r0, [fp], #-2
	...
     604:	00000b74 	andeq	r0, r0, r4, ror fp
     608:	00000b78 	andeq	r0, r0, r8, ror fp
     60c:	007d0002 	rsbseq	r0, sp, r2
     610:	00000b78 	andeq	r0, r0, r8, ror fp
     614:	00000b7c 	andeq	r0, r0, ip, ror fp
     618:	047d0002 	ldrbteq	r0, [sp], #-2
     61c:	00000b7c 	andeq	r0, r0, ip, ror fp
     620:	00000bbc 			; <UNDEFINED> instruction: 0x00000bbc
     624:	047b0002 	ldrbteq	r0, [fp], #-2
	...
     634:	00000004 	andeq	r0, r0, r4
     638:	007d0002 	rsbseq	r0, sp, r2
     63c:	00000004 	andeq	r0, r0, r4
     640:	00000008 	andeq	r0, r0, r8
     644:	087d0002 	ldmdaeq	sp!, {r1}^
     648:	00000008 	andeq	r0, r0, r8
     64c:	00000248 	andeq	r0, r0, r8, asr #4
     650:	047b0002 	ldrbteq	r0, [fp], #-2
	...
     65c:	00000248 	andeq	r0, r0, r8, asr #4
     660:	0000024c 	andeq	r0, r0, ip, asr #4
     664:	007d0002 	rsbseq	r0, sp, r2
     668:	0000024c 	andeq	r0, r0, ip, asr #4
     66c:	00000250 	andeq	r0, r0, r0, asr r2
     670:	087d0002 	ldmdaeq	sp!, {r1}^
     674:	00000250 	andeq	r0, r0, r0, asr r2
     678:	00000344 	andeq	r0, r0, r4, asr #6
     67c:	047b0002 	ldrbteq	r0, [fp], #-2
	...
     688:	00000344 	andeq	r0, r0, r4, asr #6
     68c:	00000348 	andeq	r0, r0, r8, asr #6
     690:	007d0002 	rsbseq	r0, sp, r2
     694:	00000348 	andeq	r0, r0, r8, asr #6
     698:	0000034c 	andeq	r0, r0, ip, asr #6
     69c:	087d0002 	ldmdaeq	sp!, {r1}^
     6a0:	0000034c 	andeq	r0, r0, ip, asr #6
     6a4:	00000450 	andeq	r0, r0, r0, asr r4
     6a8:	047b0002 	ldrbteq	r0, [fp], #-2
	...
     6b4:	00000450 	andeq	r0, r0, r0, asr r4
     6b8:	00000454 	andeq	r0, r0, r4, asr r4
     6bc:	007d0002 	rsbseq	r0, sp, r2
     6c0:	00000454 	andeq	r0, r0, r4, asr r4
     6c4:	00000458 	andeq	r0, r0, r8, asr r4
     6c8:	087d0002 	ldmdaeq	sp!, {r1}^
     6cc:	00000458 	andeq	r0, r0, r8, asr r4
     6d0:	000004d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     6d4:	047b0002 	ldrbteq	r0, [fp], #-2
	...
     6e0:	000004d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     6e4:	000004d4 	ldrdeq	r0, [r0], -r4
     6e8:	007d0002 	rsbseq	r0, sp, r2
     6ec:	000004d4 	ldrdeq	r0, [r0], -r4
     6f0:	000004d8 	ldrdeq	r0, [r0], -r8
     6f4:	087d0002 	ldmdaeq	sp!, {r1}^
     6f8:	000004d8 	ldrdeq	r0, [r0], -r8
     6fc:	00000528 	andeq	r0, r0, r8, lsr #10
     700:	047b0002 	ldrbteq	r0, [fp], #-2
	...
     70c:	00000528 	andeq	r0, r0, r8, lsr #10
     710:	0000052c 	andeq	r0, r0, ip, lsr #10
     714:	007d0002 	rsbseq	r0, sp, r2
     718:	0000052c 	andeq	r0, r0, ip, lsr #10
     71c:	00000530 	andeq	r0, r0, r0, lsr r5
     720:	087d0002 	ldmdaeq	sp!, {r1}^
     724:	00000530 	andeq	r0, r0, r0, lsr r5
     728:	000006cc 	andeq	r0, r0, ip, asr #13
     72c:	047b0002 	ldrbteq	r0, [fp], #-2
	...
     738:	000006cc 	andeq	r0, r0, ip, asr #13
     73c:	000006d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     740:	007d0002 	rsbseq	r0, sp, r2
     744:	000006d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     748:	000006d4 	ldrdeq	r0, [r0], -r4
     74c:	087d0002 	ldmdaeq	sp!, {r1}^
     750:	000006d4 	ldrdeq	r0, [r0], -r4
     754:	000007cc 	andeq	r0, r0, ip, asr #15
     758:	047b0002 	ldrbteq	r0, [fp], #-2
	...
     764:	000007cc 	andeq	r0, r0, ip, asr #15
     768:	000007d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     76c:	007d0002 	rsbseq	r0, sp, r2
     770:	000007d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     774:	000007d4 	ldrdeq	r0, [r0], -r4
     778:	047d0002 	ldrbteq	r0, [sp], #-2
     77c:	000007d4 	ldrdeq	r0, [r0], -r4
     780:	00000848 	andeq	r0, r0, r8, asr #16
     784:	047b0002 	ldrbteq	r0, [fp], #-2
	...
     790:	00000848 	andeq	r0, r0, r8, asr #16
     794:	0000084c 	andeq	r0, r0, ip, asr #16
     798:	007d0002 	rsbseq	r0, sp, r2
     79c:	0000084c 	andeq	r0, r0, ip, asr #16
     7a0:	00000850 	andeq	r0, r0, r0, asr r8
     7a4:	087d0002 	ldmdaeq	sp!, {r1}^
     7a8:	00000850 	andeq	r0, r0, r0, asr r8
     7ac:	0000093c 	andeq	r0, r0, ip, lsr r9
     7b0:	047b0002 	ldrbteq	r0, [fp], #-2
	...
     7bc:	0000093c 	andeq	r0, r0, ip, lsr r9
     7c0:	00000940 	andeq	r0, r0, r0, asr #18
     7c4:	007d0002 	rsbseq	r0, sp, r2
     7c8:	00000940 	andeq	r0, r0, r0, asr #18
     7cc:	00000944 	andeq	r0, r0, r4, asr #18
     7d0:	087d0002 	ldmdaeq	sp!, {r1}^
     7d4:	00000944 	andeq	r0, r0, r4, asr #18
     7d8:	00000a58 	andeq	r0, r0, r8, asr sl
     7dc:	047b0002 	ldrbteq	r0, [fp], #-2
	...
     7e8:	00000a58 	andeq	r0, r0, r8, asr sl
     7ec:	00000a5c 	andeq	r0, r0, ip, asr sl
     7f0:	007d0002 	rsbseq	r0, sp, r2
     7f4:	00000a5c 	andeq	r0, r0, ip, asr sl
     7f8:	00000a60 	andeq	r0, r0, r0, ror #20
     7fc:	087d0002 	ldmdaeq	sp!, {r1}^
     800:	00000a60 	andeq	r0, r0, r0, ror #20
     804:	00000af0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     808:	047b0002 	ldrbteq	r0, [fp], #-2
	...
     814:	00000af0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     818:	00000af4 	strdeq	r0, [r0], -r4
     81c:	007d0002 	rsbseq	r0, sp, r2
     820:	00000af4 	strdeq	r0, [r0], -r4
     824:	00000af8 	strdeq	r0, [r0], -r8
     828:	087d0002 	ldmdaeq	sp!, {r1}^
     82c:	00000af8 	strdeq	r0, [r0], -r8
     830:	00000b24 	andeq	r0, r0, r4, lsr #22
     834:	047b0002 	ldrbteq	r0, [fp], #-2
	...
     840:	00000b24 	andeq	r0, r0, r4, lsr #22
     844:	00000b28 	andeq	r0, r0, r8, lsr #22
     848:	007d0002 	rsbseq	r0, sp, r2
     84c:	00000b28 	andeq	r0, r0, r8, lsr #22
     850:	00000b2c 	andeq	r0, r0, ip, lsr #22
     854:	047d0002 	ldrbteq	r0, [sp], #-2
     858:	00000b2c 	andeq	r0, r0, ip, lsr #22
     85c:	00000b50 	andeq	r0, r0, r0, asr fp
     860:	047b0002 	ldrbteq	r0, [fp], #-2
	...
     86c:	00000b50 	andeq	r0, r0, r0, asr fp
     870:	00000b54 	andeq	r0, r0, r4, asr fp
     874:	007d0002 	rsbseq	r0, sp, r2
     878:	00000b54 	andeq	r0, r0, r4, asr fp
     87c:	00000b58 	andeq	r0, r0, r8, asr fp
     880:	0c7d0002 	ldcleq	0, cr0, [sp], #-8
     884:	00000b58 	andeq	r0, r0, r8, asr fp
     888:	00000cf4 	strdeq	r0, [r0], -r4
     88c:	047b0002 	ldrbteq	r0, [fp], #-2
	...
     898:	00000cf4 	strdeq	r0, [r0], -r4
     89c:	00000cf8 	strdeq	r0, [r0], -r8
     8a0:	007d0002 	rsbseq	r0, sp, r2
     8a4:	00000cf8 	strdeq	r0, [r0], -r8
     8a8:	00000cfc 	strdeq	r0, [r0], -ip
     8ac:	087d0002 	ldmdaeq	sp!, {r1}^
     8b0:	00000cfc 	strdeq	r0, [r0], -ip
     8b4:	00000d28 	andeq	r0, r0, r8, lsr #26
     8b8:	047b0002 	ldrbteq	r0, [fp], #-2
	...
     8c4:	00000d28 	andeq	r0, r0, r8, lsr #26
     8c8:	00000d2c 	andeq	r0, r0, ip, lsr #26
     8cc:	007d0002 	rsbseq	r0, sp, r2
     8d0:	00000d2c 	andeq	r0, r0, ip, lsr #26
     8d4:	00000d30 	andeq	r0, r0, r0, lsr sp
     8d8:	047d0002 	ldrbteq	r0, [sp], #-2
     8dc:	00000d30 	andeq	r0, r0, r0, lsr sp
     8e0:	00000d60 	andeq	r0, r0, r0, ror #26
     8e4:	047b0002 	ldrbteq	r0, [fp], #-2
	...
     8f0:	00000d60 	andeq	r0, r0, r0, ror #26
     8f4:	00000d64 	andeq	r0, r0, r4, ror #26
     8f8:	007d0002 	rsbseq	r0, sp, r2
     8fc:	00000d64 	andeq	r0, r0, r4, ror #26
     900:	00000d68 	andeq	r0, r0, r8, ror #26
     904:	047d0002 	ldrbteq	r0, [sp], #-2
     908:	00000d68 	andeq	r0, r0, r8, ror #26
     90c:	00000d84 	andeq	r0, r0, r4, lsl #27
     910:	047b0002 	ldrbteq	r0, [fp], #-2
	...
     91c:	00000d84 	andeq	r0, r0, r4, lsl #27
     920:	00000d88 	andeq	r0, r0, r8, lsl #27
     924:	007d0002 	rsbseq	r0, sp, r2
     928:	00000d88 	andeq	r0, r0, r8, lsl #27
     92c:	00000d8c 	andeq	r0, r0, ip, lsl #27
     930:	087d0002 	ldmdaeq	sp!, {r1}^
     934:	00000d8c 	andeq	r0, r0, ip, lsl #27
     938:	00000f98 	muleq	r0, r8, pc	; <UNPREDICTABLE>
     93c:	047b0002 	ldrbteq	r0, [fp], #-2
	...
     948:	00000f98 	muleq	r0, r8, pc	; <UNPREDICTABLE>
     94c:	00000f9c 	muleq	r0, ip, pc	; <UNPREDICTABLE>
     950:	007d0002 	rsbseq	r0, sp, r2
     954:	00000f9c 	muleq	r0, ip, pc	; <UNPREDICTABLE>
     958:	00000fa0 	andeq	r0, r0, r0, lsr #31
     95c:	087d0002 	ldmdaeq	sp!, {r1}^
     960:	00000fa0 	andeq	r0, r0, r0, lsr #31
     964:	00000ff0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     968:	047b0002 	ldrbteq	r0, [fp], #-2
	...
     974:	00000ff0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     978:	00000ff4 	strdeq	r0, [r0], -r4
     97c:	007d0002 	rsbseq	r0, sp, r2
     980:	00000ff4 	strdeq	r0, [r0], -r4
     984:	00000ff8 	strdeq	r0, [r0], -r8
     988:	087d0002 	ldmdaeq	sp!, {r1}^
     98c:	00000ff8 	strdeq	r0, [r0], -r8
     990:	0000104c 	andeq	r1, r0, ip, asr #32
     994:	047b0002 	ldrbteq	r0, [fp], #-2
	...
     9a0:	0000104c 	andeq	r1, r0, ip, asr #32
     9a4:	00001050 	andeq	r1, r0, r0, asr r0
     9a8:	007d0002 	rsbseq	r0, sp, r2
     9ac:	00001050 	andeq	r1, r0, r0, asr r0
     9b0:	00001054 	andeq	r1, r0, r4, asr r0
     9b4:	087d0002 	ldmdaeq	sp!, {r1}^
     9b8:	00001054 	andeq	r1, r0, r4, asr r0
     9bc:	000010c8 	andeq	r1, r0, r8, asr #1
     9c0:	047b0002 	ldrbteq	r0, [fp], #-2
	...
     9cc:	000010c8 	andeq	r1, r0, r8, asr #1
     9d0:	000010cc 	andeq	r1, r0, ip, asr #1
     9d4:	007d0002 	rsbseq	r0, sp, r2
     9d8:	000010cc 	andeq	r1, r0, ip, asr #1
     9dc:	000010d0 	ldrdeq	r1, [r0], -r0
     9e0:	047d0002 	ldrbteq	r0, [sp], #-2
     9e4:	000010d0 	ldrdeq	r1, [r0], -r0
     9e8:	000011d4 	ldrdeq	r1, [r0], -r4
     9ec:	047b0002 	ldrbteq	r0, [fp], #-2
	...
     9f8:	000011d4 	ldrdeq	r1, [r0], -r4
     9fc:	000011d8 	ldrdeq	r1, [r0], -r8
     a00:	007d0002 	rsbseq	r0, sp, r2
     a04:	000011d8 	ldrdeq	r1, [r0], -r8
     a08:	000011dc 	ldrdeq	r1, [r0], -ip
     a0c:	087d0002 	ldmdaeq	sp!, {r1}^
     a10:	000011dc 	ldrdeq	r1, [r0], -ip
     a14:	0000126c 	andeq	r1, r0, ip, ror #4
     a18:	047b0002 	ldrbteq	r0, [fp], #-2
	...
     a24:	0000126c 	andeq	r1, r0, ip, ror #4
     a28:	00001270 	andeq	r1, r0, r0, ror r2
     a2c:	007d0002 	rsbseq	r0, sp, r2
     a30:	00001270 	andeq	r1, r0, r0, ror r2
     a34:	00001274 	andeq	r1, r0, r4, ror r2
     a38:	087d0002 	ldmdaeq	sp!, {r1}^
     a3c:	00001274 	andeq	r1, r0, r4, ror r2
     a40:	00001384 	andeq	r1, r0, r4, lsl #7
     a44:	047b0002 	ldrbteq	r0, [fp], #-2
	...
     a50:	00001384 	andeq	r1, r0, r4, lsl #7
     a54:	00001388 	andeq	r1, r0, r8, lsl #7
     a58:	007d0002 	rsbseq	r0, sp, r2
     a5c:	00001388 	andeq	r1, r0, r8, lsl #7
     a60:	0000138c 	andeq	r1, r0, ip, lsl #7
     a64:	047d0002 	ldrbteq	r0, [sp], #-2
     a68:	0000138c 	andeq	r1, r0, ip, lsl #7
     a6c:	000013c8 	andeq	r1, r0, r8, asr #7
     a70:	047b0002 	ldrbteq	r0, [fp], #-2
	...
     a7c:	000013c8 	andeq	r1, r0, r8, asr #7
     a80:	000013cc 	andeq	r1, r0, ip, asr #7
     a84:	007d0002 	rsbseq	r0, sp, r2
     a88:	000013cc 	andeq	r1, r0, ip, asr #7
     a8c:	000013d0 	ldrdeq	r1, [r0], -r0
     a90:	087d0002 	ldmdaeq	sp!, {r1}^
     a94:	000013d0 	ldrdeq	r1, [r0], -r0
     a98:	000014bc 			; <UNDEFINED> instruction: 0x000014bc
     a9c:	047b0002 	ldrbteq	r0, [fp], #-2
	...
     aa8:	000014bc 			; <UNDEFINED> instruction: 0x000014bc
     aac:	000014c0 	andeq	r1, r0, r0, asr #9
     ab0:	007d0002 	rsbseq	r0, sp, r2
     ab4:	000014c0 	andeq	r1, r0, r0, asr #9
     ab8:	000014c4 	andeq	r1, r0, r4, asr #9
     abc:	047d0002 	ldrbteq	r0, [sp], #-2
     ac0:	000014c4 	andeq	r1, r0, r4, asr #9
     ac4:	000014e0 	andeq	r1, r0, r0, ror #9
     ac8:	047b0002 	ldrbteq	r0, [fp], #-2
	...
     ad4:	000014e0 	andeq	r1, r0, r0, ror #9
     ad8:	000014e4 	andeq	r1, r0, r4, ror #9
     adc:	007d0002 	rsbseq	r0, sp, r2
     ae0:	000014e4 	andeq	r1, r0, r4, ror #9
     ae4:	000014e8 	andeq	r1, r0, r8, ror #9
     ae8:	087d0002 	ldmdaeq	sp!, {r1}^
     aec:	000014e8 	andeq	r1, r0, r8, ror #9
     af0:	00001518 	andeq	r1, r0, r8, lsl r5
     af4:	047b0002 	ldrbteq	r0, [fp], #-2
	...
     b00:	00001518 	andeq	r1, r0, r8, lsl r5
     b04:	0000151c 	andeq	r1, r0, ip, lsl r5
     b08:	007d0002 	rsbseq	r0, sp, r2
     b0c:	0000151c 	andeq	r1, r0, ip, lsl r5
     b10:	00001520 	andeq	r1, r0, r0, lsr #10
     b14:	087d0002 	ldmdaeq	sp!, {r1}^
     b18:	00001520 	andeq	r1, r0, r0, lsr #10
     b1c:	000015d4 	ldrdeq	r1, [r0], -r4
     b20:	047b0002 	ldrbteq	r0, [fp], #-2
	...
     b2c:	000015d4 	ldrdeq	r1, [r0], -r4
     b30:	000015d8 	ldrdeq	r1, [r0], -r8
     b34:	007d0002 	rsbseq	r0, sp, r2
     b38:	000015d8 	ldrdeq	r1, [r0], -r8
     b3c:	000015dc 	ldrdeq	r1, [r0], -ip
     b40:	087d0002 	ldmdaeq	sp!, {r1}^
     b44:	000015dc 	ldrdeq	r1, [r0], -ip
     b48:	00001690 	muleq	r0, r0, r6
     b4c:	047b0002 	ldrbteq	r0, [fp], #-2
	...
     b58:	00001690 	muleq	r0, r0, r6
     b5c:	00001694 	muleq	r0, r4, r6
     b60:	007d0002 	rsbseq	r0, sp, r2
     b64:	00001694 	muleq	r0, r4, r6
     b68:	00001698 	muleq	r0, r8, r6
     b6c:	087d0002 	ldmdaeq	sp!, {r1}^
     b70:	00001698 	muleq	r0, r8, r6
     b74:	00001748 	andeq	r1, r0, r8, asr #14
     b78:	047b0002 	ldrbteq	r0, [fp], #-2
	...
     b84:	00001748 	andeq	r1, r0, r8, asr #14
     b88:	0000174c 	andeq	r1, r0, ip, asr #14
     b8c:	007d0002 	rsbseq	r0, sp, r2
     b90:	0000174c 	andeq	r1, r0, ip, asr #14
     b94:	00001750 	andeq	r1, r0, r0, asr r7
     b98:	087d0002 	ldmdaeq	sp!, {r1}^
     b9c:	00001750 	andeq	r1, r0, r0, asr r7
     ba0:	000017fc 	strdeq	r1, [r0], -ip
     ba4:	047b0002 	ldrbteq	r0, [fp], #-2
	...
     bb0:	000017fc 	strdeq	r1, [r0], -ip
     bb4:	00001800 	andeq	r1, r0, r0, lsl #16
     bb8:	007d0002 	rsbseq	r0, sp, r2
     bbc:	00001800 	andeq	r1, r0, r0, lsl #16
     bc0:	00001804 	andeq	r1, r0, r4, lsl #16
     bc4:	087d0002 	ldmdaeq	sp!, {r1}^
     bc8:	00001804 	andeq	r1, r0, r4, lsl #16
     bcc:	000018b0 			; <UNDEFINED> instruction: 0x000018b0
     bd0:	047b0002 	ldrbteq	r0, [fp], #-2
	...
     bdc:	000018b0 			; <UNDEFINED> instruction: 0x000018b0
     be0:	000018b4 			; <UNDEFINED> instruction: 0x000018b4
     be4:	007d0002 	rsbseq	r0, sp, r2
     be8:	000018b4 			; <UNDEFINED> instruction: 0x000018b4
     bec:	000018b8 			; <UNDEFINED> instruction: 0x000018b8
     bf0:	087d0002 	ldmdaeq	sp!, {r1}^
     bf4:	000018b8 			; <UNDEFINED> instruction: 0x000018b8
     bf8:	000018e0 	andeq	r1, r0, r0, ror #17
     bfc:	047b0002 	ldrbteq	r0, [fp], #-2
	...
     c0c:	00000004 	andeq	r0, r0, r4
     c10:	007d0002 	rsbseq	r0, sp, r2
     c14:	00000004 	andeq	r0, r0, r4
     c18:	00000008 	andeq	r0, r0, r8
     c1c:	087d0002 	ldmdaeq	sp!, {r1}^
     c20:	00000008 	andeq	r0, r0, r8
     c24:	000001dc 	ldrdeq	r0, [r0], -ip
     c28:	047b0002 	ldrbteq	r0, [fp], #-2
	...
     c34:	000001dc 	ldrdeq	r0, [r0], -ip
     c38:	000001e0 	andeq	r0, r0, r0, ror #3
     c3c:	007d0002 	rsbseq	r0, sp, r2
     c40:	000001e0 	andeq	r0, r0, r0, ror #3
     c44:	000001e4 	andeq	r0, r0, r4, ror #3
     c48:	087d0002 	ldmdaeq	sp!, {r1}^
     c4c:	000001e4 	andeq	r0, r0, r4, ror #3
     c50:	0000025c 	andeq	r0, r0, ip, asr r2
     c54:	047b0002 	ldrbteq	r0, [fp], #-2
	...
     c60:	0000025c 	andeq	r0, r0, ip, asr r2
     c64:	00000260 	andeq	r0, r0, r0, ror #4
     c68:	007d0002 	rsbseq	r0, sp, r2
     c6c:	00000260 	andeq	r0, r0, r0, ror #4
     c70:	00000264 	andeq	r0, r0, r4, ror #4
     c74:	047d0002 	ldrbteq	r0, [sp], #-2
     c78:	00000264 	andeq	r0, r0, r4, ror #4
     c7c:	00000280 	andeq	r0, r0, r0, lsl #5
     c80:	047b0002 	ldrbteq	r0, [fp], #-2
	...
     c8c:	00000280 	andeq	r0, r0, r0, lsl #5
     c90:	00000284 	andeq	r0, r0, r4, lsl #5
     c94:	007d0002 	rsbseq	r0, sp, r2
     c98:	00000284 	andeq	r0, r0, r4, lsl #5
     c9c:	00000288 	andeq	r0, r0, r8, lsl #5
     ca0:	047d0002 	ldrbteq	r0, [sp], #-2
     ca4:	00000288 	andeq	r0, r0, r8, lsl #5
     ca8:	00000294 	muleq	r0, r4, r2
     cac:	047b0002 	ldrbteq	r0, [fp], #-2
	...
     cb8:	00000294 	muleq	r0, r4, r2
     cbc:	00000298 	muleq	r0, r8, r2
     cc0:	007d0002 	rsbseq	r0, sp, r2
     cc4:	00000298 	muleq	r0, r8, r2
     cc8:	0000029c 	muleq	r0, ip, r2
     ccc:	047d0002 	ldrbteq	r0, [sp], #-2
     cd0:	0000029c 	muleq	r0, ip, r2
     cd4:	00000384 	andeq	r0, r0, r4, lsl #7
     cd8:	047b0002 	ldrbteq	r0, [fp], #-2
	...
     ce4:	00000384 	andeq	r0, r0, r4, lsl #7
     ce8:	00000388 	andeq	r0, r0, r8, lsl #7
     cec:	007d0002 	rsbseq	r0, sp, r2
     cf0:	00000388 	andeq	r0, r0, r8, lsl #7
     cf4:	0000038c 	andeq	r0, r0, ip, lsl #7
     cf8:	047d0002 	ldrbteq	r0, [sp], #-2
     cfc:	0000038c 	andeq	r0, r0, ip, lsl #7
     d00:	000004d4 	ldrdeq	r0, [r0], -r4
     d04:	047b0002 	ldrbteq	r0, [fp], #-2
	...
     d14:	00000004 	andeq	r0, r0, r4
     d18:	007d0002 	rsbseq	r0, sp, r2
     d1c:	00000004 	andeq	r0, r0, r4
     d20:	00000008 	andeq	r0, r0, r8
     d24:	047d0002 	ldrbteq	r0, [sp], #-2
     d28:	00000008 	andeq	r0, r0, r8
     d2c:	00000020 	andeq	r0, r0, r0, lsr #32
     d30:	047b0002 	ldrbteq	r0, [fp], #-2
	...
     d3c:	00000020 	andeq	r0, r0, r0, lsr #32
     d40:	00000024 	andeq	r0, r0, r4, lsr #32
     d44:	007d0002 	rsbseq	r0, sp, r2
     d48:	00000024 	andeq	r0, r0, r4, lsr #32
     d4c:	00000028 	andeq	r0, r0, r8, lsr #32
     d50:	047d0002 	ldrbteq	r0, [sp], #-2
     d54:	00000028 	andeq	r0, r0, r8, lsr #32
     d58:	00000040 	andeq	r0, r0, r0, asr #32
     d5c:	047b0002 	ldrbteq	r0, [fp], #-2
	...
     d68:	00000040 	andeq	r0, r0, r0, asr #32
     d6c:	00000044 	andeq	r0, r0, r4, asr #32
     d70:	007d0002 	rsbseq	r0, sp, r2
     d74:	00000044 	andeq	r0, r0, r4, asr #32
     d78:	00000048 	andeq	r0, r0, r8, asr #32
     d7c:	147d0002 	ldrbtne	r0, [sp], #-2
     d80:	00000048 	andeq	r0, r0, r8, asr #32
     d84:	00000150 	andeq	r0, r0, r0, asr r1
     d88:	047b0002 	ldrbteq	r0, [fp], #-2
	...
     d94:	00000150 	andeq	r0, r0, r0, asr r1
     d98:	00000154 	andeq	r0, r0, r4, asr r1
     d9c:	007d0002 	rsbseq	r0, sp, r2
     da0:	00000154 	andeq	r0, r0, r4, asr r1
     da4:	00000158 	andeq	r0, r0, r8, asr r1
     da8:	047d0002 	ldrbteq	r0, [sp], #-2
     dac:	00000158 	andeq	r0, r0, r8, asr r1
     db0:	00000170 	andeq	r0, r0, r0, ror r1
     db4:	047b0002 	ldrbteq	r0, [fp], #-2
	...
     dc0:	00000170 	andeq	r0, r0, r0, ror r1
     dc4:	00000174 	andeq	r0, r0, r4, ror r1
     dc8:	007d0002 	rsbseq	r0, sp, r2
     dcc:	00000174 	andeq	r0, r0, r4, ror r1
     dd0:	00000178 	andeq	r0, r0, r8, ror r1
     dd4:	047d0002 	ldrbteq	r0, [sp], #-2
     dd8:	00000178 	andeq	r0, r0, r8, ror r1
     ddc:	000001ec 	andeq	r0, r0, ip, ror #3
     de0:	047b0002 	ldrbteq	r0, [fp], #-2
	...
     dec:	000001ec 	andeq	r0, r0, ip, ror #3
     df0:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     df4:	007d0002 	rsbseq	r0, sp, r2
     df8:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     dfc:	000001f4 	strdeq	r0, [r0], -r4
     e00:	087d0002 	ldmdaeq	sp!, {r1}^
     e04:	000001f4 	strdeq	r0, [r0], -r4
     e08:	00000250 	andeq	r0, r0, r0, asr r2
     e0c:	047b0002 	ldrbteq	r0, [fp], #-2
	...
     e18:	00000250 	andeq	r0, r0, r0, asr r2
     e1c:	00000254 	andeq	r0, r0, r4, asr r2
     e20:	007d0002 	rsbseq	r0, sp, r2
     e24:	00000254 	andeq	r0, r0, r4, asr r2
     e28:	00000258 	andeq	r0, r0, r8, asr r2
     e2c:	047d0002 	ldrbteq	r0, [sp], #-2
     e30:	00000258 	andeq	r0, r0, r8, asr r2
     e34:	000002cc 	andeq	r0, r0, ip, asr #5
     e38:	047b0002 	ldrbteq	r0, [fp], #-2
	...
     e44:	000002cc 	andeq	r0, r0, ip, asr #5
     e48:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     e4c:	007d0002 	rsbseq	r0, sp, r2
     e50:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     e54:	000002d4 	ldrdeq	r0, [r0], -r4
     e58:	047d0002 	ldrbteq	r0, [sp], #-2
     e5c:	000002d4 	ldrdeq	r0, [r0], -r4
     e60:	00000328 	andeq	r0, r0, r8, lsr #6
     e64:	047b0002 	ldrbteq	r0, [fp], #-2
	...
     e70:	00000328 	andeq	r0, r0, r8, lsr #6
     e74:	0000032c 	andeq	r0, r0, ip, lsr #6
     e78:	007d0002 	rsbseq	r0, sp, r2
     e7c:	0000032c 	andeq	r0, r0, ip, lsr #6
     e80:	00000330 	andeq	r0, r0, r0, lsr r3
     e84:	087d0002 	ldmdaeq	sp!, {r1}^
     e88:	00000330 	andeq	r0, r0, r0, lsr r3
     e8c:	00000340 	andeq	r0, r0, r0, asr #6
     e90:	047b0002 	ldrbteq	r0, [fp], #-2
	...
     e9c:	00000340 	andeq	r0, r0, r0, asr #6
     ea0:	00000344 	andeq	r0, r0, r4, asr #6
     ea4:	007d0002 	rsbseq	r0, sp, r2
     ea8:	00000344 	andeq	r0, r0, r4, asr #6
     eac:	00000348 	andeq	r0, r0, r8, asr #6
     eb0:	087d0002 	ldmdaeq	sp!, {r1}^
     eb4:	00000348 	andeq	r0, r0, r8, asr #6
     eb8:	00000358 	andeq	r0, r0, r8, asr r3
     ebc:	047b0002 	ldrbteq	r0, [fp], #-2
	...
     ecc:	00000004 	andeq	r0, r0, r4
     ed0:	007d0002 	rsbseq	r0, sp, r2
     ed4:	00000004 	andeq	r0, r0, r4
     ed8:	00000008 	andeq	r0, r0, r8
     edc:	047d0002 	ldrbteq	r0, [sp], #-2
     ee0:	00000008 	andeq	r0, r0, r8
     ee4:	000000dc 	ldrdeq	r0, [r0], -ip
     ee8:	047b0002 	ldrbteq	r0, [fp], #-2
	...
     ef4:	000000dc 	ldrdeq	r0, [r0], -ip
     ef8:	000000e0 	andeq	r0, r0, r0, ror #1
     efc:	007d0002 	rsbseq	r0, sp, r2
     f00:	000000e0 	andeq	r0, r0, r0, ror #1
     f04:	000000e4 	andeq	r0, r0, r4, ror #1
     f08:	047d0002 	ldrbteq	r0, [sp], #-2
     f0c:	000000e4 	andeq	r0, r0, r4, ror #1
     f10:	0000017c 	andeq	r0, r0, ip, ror r1
     f14:	047b0002 	ldrbteq	r0, [fp], #-2
	...
     f24:	00000004 	andeq	r0, r0, r4
     f28:	007d0002 	rsbseq	r0, sp, r2
     f2c:	00000004 	andeq	r0, r0, r4
     f30:	00000008 	andeq	r0, r0, r8
     f34:	087d0002 	ldmdaeq	sp!, {r1}^
     f38:	00000008 	andeq	r0, r0, r8
     f3c:	000000ac 	andeq	r0, r0, ip, lsr #1
     f40:	047b0002 	ldrbteq	r0, [fp], #-2
	...
     f4c:	000000ac 	andeq	r0, r0, ip, lsr #1
     f50:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
     f54:	007d0002 	rsbseq	r0, sp, r2
     f58:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
     f5c:	000000b4 	strheq	r0, [r0], -r4
     f60:	087d0002 	ldmdaeq	sp!, {r1}^
     f64:	000000b4 	strheq	r0, [r0], -r4
     f68:	0000013c 	andeq	r0, r0, ip, lsr r1
     f6c:	047b0002 	ldrbteq	r0, [fp], #-2
	...
     f78:	0000013c 	andeq	r0, r0, ip, lsr r1
     f7c:	00000140 	andeq	r0, r0, r0, asr #2
     f80:	007d0002 	rsbseq	r0, sp, r2
     f84:	00000140 	andeq	r0, r0, r0, asr #2
     f88:	00000144 	andeq	r0, r0, r4, asr #2
     f8c:	107d0002 	rsbsne	r0, sp, r2
     f90:	00000144 	andeq	r0, r0, r4, asr #2
     f94:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
     f98:	047b0002 	ldrbteq	r0, [fp], #-2
	...
     fa8:	00000004 	andeq	r0, r0, r4
     fac:	007d0002 	rsbseq	r0, sp, r2
     fb0:	00000004 	andeq	r0, r0, r4
     fb4:	00000008 	andeq	r0, r0, r8
     fb8:	087d0002 	ldmdaeq	sp!, {r1}^
     fbc:	00000008 	andeq	r0, r0, r8
     fc0:	00000028 	andeq	r0, r0, r8, lsr #32
     fc4:	047b0002 	ldrbteq	r0, [fp], #-2
	...
     fd0:	00000028 	andeq	r0, r0, r8, lsr #32
     fd4:	0000002c 	andeq	r0, r0, ip, lsr #32
     fd8:	007d0002 	rsbseq	r0, sp, r2
     fdc:	0000002c 	andeq	r0, r0, ip, lsr #32
     fe0:	00000030 	andeq	r0, r0, r0, lsr r0
     fe4:	087d0002 	ldmdaeq	sp!, {r1}^
     fe8:	00000030 	andeq	r0, r0, r0, lsr r0
     fec:	00000040 	andeq	r0, r0, r0, asr #32
     ff0:	047b0002 	ldrbteq	r0, [fp], #-2
	...
     ffc:	00000040 	andeq	r0, r0, r0, asr #32
    1000:	00000044 	andeq	r0, r0, r4, asr #32
    1004:	007d0002 	rsbseq	r0, sp, r2
    1008:	00000044 	andeq	r0, r0, r4, asr #32
    100c:	00000048 	andeq	r0, r0, r8, asr #32
    1010:	087d0002 	ldmdaeq	sp!, {r1}^
    1014:	00000048 	andeq	r0, r0, r8, asr #32
    1018:	000000a4 	andeq	r0, r0, r4, lsr #1
    101c:	047b0002 	ldrbteq	r0, [fp], #-2
	...
    102c:	00000004 	andeq	r0, r0, r4
    1030:	007d0002 	rsbseq	r0, sp, r2
    1034:	00000004 	andeq	r0, r0, r4
    1038:	00000008 	andeq	r0, r0, r8
    103c:	087d0002 	ldmdaeq	sp!, {r1}^
    1040:	00000008 	andeq	r0, r0, r8
    1044:	0000002c 	andeq	r0, r0, ip, lsr #32
    1048:	047b0002 	ldrbteq	r0, [fp], #-2
	...
    1054:	0000002c 	andeq	r0, r0, ip, lsr #32
    1058:	00000030 	andeq	r0, r0, r0, lsr r0
    105c:	007d0002 	rsbseq	r0, sp, r2
    1060:	00000030 	andeq	r0, r0, r0, lsr r0
    1064:	00000034 	andeq	r0, r0, r4, lsr r0
    1068:	087d0002 	ldmdaeq	sp!, {r1}^
    106c:	00000034 	andeq	r0, r0, r4, lsr r0
    1070:	0000006c 	andeq	r0, r0, ip, rrx
    1074:	047b0002 	ldrbteq	r0, [fp], #-2
	...
    1080:	0000006c 	andeq	r0, r0, ip, rrx
    1084:	00000070 	andeq	r0, r0, r0, ror r0
    1088:	007d0002 	rsbseq	r0, sp, r2
    108c:	00000070 	andeq	r0, r0, r0, ror r0
    1090:	00000074 	andeq	r0, r0, r4, ror r0
    1094:	087d0002 	ldmdaeq	sp!, {r1}^
    1098:	00000074 	andeq	r0, r0, r4, ror r0
    109c:	00000128 	andeq	r0, r0, r8, lsr #2
    10a0:	047b0002 	ldrbteq	r0, [fp], #-2
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	00010000 	andeq	r0, r1, r0
  14:	0000035c 	andeq	r0, r0, ip, asr r3
	...
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	027b0002 	rsbseq	r0, fp, #2
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	0001035c 	andeq	r0, r1, ip, asr r3
  34:	00000290 	muleq	r0, r0, r2
	...
  40:	0000001c 	andeq	r0, r0, ip, lsl r0
  44:	04320002 	ldrteq	r0, [r2], #-2
  48:	00040000 	andeq	r0, r4, r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	000105f4 	strdeq	r0, [r1], -r4
  54:	00000764 	andeq	r0, r0, r4, ror #14
	...
  60:	0000001c 	andeq	r0, r0, ip, lsl r0
  64:	08e00002 	stmiaeq	r0!, {r1}^
  68:	00040000 	andeq	r0, r4, r0
  6c:	00000000 	andeq	r0, r0, r0
  70:	00010d58 	andeq	r0, r1, r8, asr sp
  74:	00000288 	andeq	r0, r0, r8, lsl #5
	...
  80:	0000001c 	andeq	r0, r0, ip, lsl r0
  84:	0b8e0002 	bleq	fe380094 <_estack+0xf6370094>
  88:	00040000 	andeq	r0, r4, r0
  8c:	00000000 	andeq	r0, r0, r0
  90:	00010fe0 	andeq	r0, r1, r0, ror #31
  94:	00000bbc 			; <UNDEFINED> instruction: 0x00000bbc
	...
  a0:	0000001c 	andeq	r0, r0, ip, lsl r0
  a4:	13250002 	teqne	r5, #2
  a8:	00040000 	andeq	r0, r4, r0
  ac:	00000000 	andeq	r0, r0, r0
  b0:	00011b9c 	muleq	r1, ip, fp
  b4:	000018e0 	andeq	r1, r0, r0, ror #17
	...
  c0:	0000001c 	andeq	r0, r0, ip, lsl r0
  c4:	211a0002 	tstcs	sl, r2
  c8:	00040000 	andeq	r0, r4, r0
  cc:	00000000 	andeq	r0, r0, r0
  d0:	0001347c 	andeq	r3, r1, ip, ror r4
  d4:	000004d4 	ldrdeq	r0, [r0], -r4
	...
  e0:	0000001c 	andeq	r0, r0, ip, lsl r0
  e4:	24020002 	strcs	r0, [r2], #-2
  e8:	00040000 	andeq	r0, r4, r0
  ec:	00000000 	andeq	r0, r0, r0
  f0:	00013968 	andeq	r3, r1, r8, ror #18
  f4:	00000358 	andeq	r0, r0, r8, asr r3
	...
 100:	0000001c 	andeq	r0, r0, ip, lsl r0
 104:	27590002 	ldrbcs	r0, [r9, -r2]
 108:	00040000 	andeq	r0, r4, r0
 10c:	00000000 	andeq	r0, r0, r0
 110:	00013cc0 	andeq	r3, r1, r0, asr #25
 114:	0000017c 	andeq	r0, r0, ip, ror r1
	...
 120:	0000001c 	andeq	r0, r0, ip, lsl r0
 124:	291f0002 	ldmdbcs	pc, {r1}	; <UNPREDICTABLE>
 128:	00040000 	andeq	r0, r4, r0
 12c:	00000000 	andeq	r0, r0, r0
 130:	00013e3c 	andeq	r3, r1, ip, lsr lr
 134:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
	...
 140:	0000001c 	andeq	r0, r0, ip, lsl r0
 144:	2a160002 	bcs	580154 <WriteSemaphore+0x56a898>
 148:	00040000 	andeq	r0, r4, r0
 14c:	00000000 	andeq	r0, r0, r0
 150:	00013ff4 	strdeq	r3, [r1], -r4
 154:	000000a4 	andeq	r0, r0, r4, lsr #1
	...
 160:	0000001c 	andeq	r0, r0, ip, lsl r0
 164:	2ad70002 	bcs	ff5c0174 <_estack+0xf75b0174>
 168:	00040000 	andeq	r0, r4, r0
 16c:	00000000 	andeq	r0, r0, r0
 170:	00014098 	muleq	r1, r8, r0
 174:	00000128 	andeq	r0, r0, r8, lsr #2
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	0000010d 	andeq	r0, r0, sp, lsl #2
       4:	00af0002 	adceq	r0, pc, r2
       8:	01020000 	mrseq	r0, (UNDEF: 2)
       c:	000d0efb 	strdeq	r0, [sp], -fp
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
      18:	2f010000 	svccs	0x00010000
      1c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xf68
      20:	696e732f 	stmdbvs	lr!, {r0, r1, r2, r3, r5, r8, r9, ip, sp, lr}^
      24:	2f6c6567 	svccs	0x006c6567
      28:	2f697072 	svccs	0x00697072
      2c:	65657246 	strbvs	r7, [r5, #-582]!	; 0x246
      30:	534f5452 	movtpl	r5, #62546	; 0xf452
      34:	6572462f 	ldrbvs	r4, [r2, #-1583]!	; 0x62f
      38:	4f545265 	svcmi	0x00545265
      3c:	6f532f53 	svcvs	0x00532f53
      40:	65637275 	strbvs	r7, [r3, #-629]!	; 0x275
      44:	726f702f 	rsbvc	r7, pc, #47	; 0x2f
      48:	6c626174 	stfvse	f6, [r2], #-464	; 0xfffffe30
      4c:	43472f65 	movtmi	r2, #32613	; 0x7f65
      50:	61522f43 	cmpvs	r2, r3, asr #30
      54:	65627073 	strbvs	r7, [r2, #-115]!	; 0x73
      58:	50797272 	rsbspl	r7, r9, r2, ror r2
      5c:	682f0069 	stmdavs	pc!, {r0, r3, r5, r6}	; <UNPREDICTABLE>
      60:	2f656d6f 	svccs	0x00656d6f
      64:	67696e73 			; <UNDEFINED> instruction: 0x67696e73
      68:	722f6c65 	eorvc	r6, pc, #25856	; 0x6500
      6c:	462f6970 			; <UNDEFINED> instruction: 0x462f6970
      70:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
      74:	2f534f54 	svccs	0x00534f54
      78:	65657246 	strbvs	r7, [r5, #-582]!	; 0x246
      7c:	534f5452 	movtpl	r5, #62546	; 0xf452
      80:	756f532f 	strbvc	r5, [pc, #-815]!	; fffffd59 <_estack+0xf7fefd59>
      84:	2f656372 	svccs	0x00656372
      88:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
      8c:	00656475 	rsbeq	r6, r5, r5, ror r4
      90:	726f7000 	rsbvc	r7, pc, #0
      94:	00632e74 	rsbeq	r2, r3, r4, ror lr
      98:	70000001 	andvc	r0, r0, r1
      9c:	646a6f72 	strbtvs	r6, [sl], #-3954	; 0xf72
      a0:	2e736665 	cdpcs	6, 7, cr6, cr3, cr5, {3}
      a4:	00020068 	andeq	r0, r2, r8, rrx
      a8:	726f7000 	rsbvc	r7, pc, #0
      ac:	63616d74 	cmnvs	r1, #7424	; 0x1d00
      b0:	682e6f72 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}
      b4:	00000100 	andeq	r0, r0, r0, lsl #2
      b8:	02050000 	andeq	r0, r5, #0
      bc:	00010000 	andeq	r0, r1, r0
      c0:	bd013703 	stclt	7, cr3, [r1, #-12]
      c4:	68836e4e 	stmvs	r3, {r1, r2, r3, r6, r9, sl, fp, sp, lr}
      c8:	67676767 	strbvs	r6, [r7, -r7, ror #14]!
      cc:	67676767 	strbvs	r6, [r7, -r7, ror #14]!
      d0:	67676767 	strbvs	r6, [r7, -r7, ror #14]!
      d4:	67676767 	strbvs	r6, [r7, -r7, ror #14]!
      d8:	67676767 	strbvs	r6, [r7, -r7, ror #14]!
      dc:	67676767 	strbvs	r6, [r7, -r7, ror #14]!
      e0:	6a676767 	bvs	19d9e84 <WriteSemaphore+0x19c45c8>
      e4:	85686a67 	strbhi	r6, [r8, #-2663]!	; 0xa67
      e8:	2f686ca1 	svccs	0x00686ca1
      ec:	4d162202 	lfmmi	f2, 4, [r6, #-8]
      f0:	4e2f3131 	mcrmi	1, 1, r3, cr15, cr1, {1}
      f4:	660a034d 	strvs	r0, [sl], -sp, asr #6
      f8:	8331319f 	teqhi	r1, #-1073741785	; 0xc0000027
      fc:	0a036b6c 	beq	daeb4 <WriteSemaphore+0xc55f8>
     100:	4c2f2f4a 	stcmi	15, cr2, [pc], #-296	; ffffffe0 <_estack+0xf7feffe0>
     104:	83838384 	orrhi	r8, r3, #268435458	; 0x10000002
     108:	4b848383 	blmi	fe120f1c <_estack+0xf6110f1c>
     10c:	01000c02 	tsteq	r0, r2, lsl #24
     110:	0000a601 	andeq	sl, r0, r1, lsl #12
     114:	63000200 	movwvs	r0, #512	; 0x200
     118:	02000000 	andeq	r0, r0, #0
     11c:	0d0efb01 	vstreq	d15, [lr, #-4]
     120:	01010100 	mrseq	r0, (UNDEF: 17)
     124:	00000001 	andeq	r0, r0, r1
     128:	01000001 	tsteq	r0, r1
     12c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 78 <_start-0x7f88>
     130:	6e732f65 	cdpvs	15, 7, cr2, cr3, cr5, {3}
     134:	6c656769 	stclvs	7, cr6, [r5], #-420	; 0xfffffe5c
     138:	6970722f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r9, ip, sp, lr}^
     13c:	6572462f 	ldrbvs	r4, [r2, #-1583]!	; 0x62f
     140:	4f545265 	svcmi	0x00545265
     144:	72462f53 	subvc	r2, r6, #332	; 0x14c
     148:	54526565 	ldrbpl	r6, [r2], #-1381	; 0x565
     14c:	532f534f 	teqpl	pc, #1006632961	; 0x3c000001
     150:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     154:	6f702f65 	svcvs	0x00702f65
     158:	62617472 	rsbvs	r7, r1, #1912602624	; 0x72000000
     15c:	472f656c 	strmi	r6, [pc, -ip, ror #10]!
     160:	522f4343 	eorpl	r4, pc, #201326593	; 0xc000001
     164:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
     168:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
     16c:	00006950 	andeq	r6, r0, r0, asr r9
     170:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xf70
     174:	2e727369 	cdpcs	3, 7, cr7, cr2, cr9, {3}
     178:	00010063 	andeq	r0, r1, r3, rrx
     17c:	05000000 	streq	r0, [r0, #-0]
     180:	01035c02 	tsteq	r3, r2, lsl #24
     184:	01330300 	teqeq	r3, r0, lsl #6
     188:	2f2fa052 	svccs	0x002fa052
     18c:	13240234 	teqne	r4, #1073741827	; 0x40000003
     190:	ba0e036c 	blt	380f48 <WriteSemaphore+0x36b68c>
     194:	2c023116 	stfcss	f3, [r2], {22}
     198:	28023115 	stmdacs	r2, {r0, r2, r4, r8, ip, sp}
     19c:	01160313 	tsteq	r6, r3, lsl r3
     1a0:	132c0213 	teqne	ip, #805306369	; 0x30000001
     1a4:	1328022f 	teqne	r8, #-268435454	; 0xf0000002
     1a8:	4c012a03 	stcmi	10, cr2, [r1], {3}
     1ac:	9f9e0a03 	svcls	0x009e0a03
     1b0:	a2854b85 	addge	r4, r5, #136192	; 0x21400
     1b4:	0c02a685 	stceq	6, cr10, [r2], {133}	; 0x85
     1b8:	d6010100 	strle	r0, [r1], -r0, lsl #2
     1bc:	02000001 	andeq	r0, r0, #1
     1c0:	0000e700 	andeq	lr, r0, r0, lsl #14
     1c4:	fb010200 	blx	409ce <WriteSemaphore+0x2b112>
     1c8:	01000d0e 	tsteq	r0, lr, lsl #26
     1cc:	00010101 	andeq	r0, r1, r1, lsl #2
     1d0:	00010000 	andeq	r0, r1, r0
     1d4:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
     1d8:	2f656d6f 	svccs	0x00656d6f
     1dc:	67696e73 			; <UNDEFINED> instruction: 0x67696e73
     1e0:	722f6c65 	eorvc	r6, pc, #25856	; 0x6500
     1e4:	462f6970 			; <UNDEFINED> instruction: 0x462f6970
     1e8:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
     1ec:	2f534f54 	svccs	0x00534f54
     1f0:	65657246 	strbvs	r7, [r5, #-582]!	; 0x246
     1f4:	534f5452 	movtpl	r5, #62546	; 0xf452
     1f8:	756f532f 	strbvc	r5, [pc, #-815]!	; fffffed1 <_estack+0xf7fefed1>
     1fc:	00656372 	rsbeq	r6, r5, r2, ror r3
     200:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 14c <_start-0x7eb4>
     204:	6e732f65 	cdpvs	15, 7, cr2, cr3, cr5, {3}
     208:	6c656769 	stclvs	7, cr6, [r5], #-420	; 0xfffffe5c
     20c:	6970722f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r9, ip, sp, lr}^
     210:	6572462f 	ldrbvs	r4, [r2, #-1583]!	; 0x62f
     214:	4f545265 	svcmi	0x00545265
     218:	72462f53 	subvc	r2, r6, #332	; 0x14c
     21c:	54526565 	ldrbpl	r6, [r2], #-1381	; 0x565
     220:	532f534f 	teqpl	pc, #1006632961	; 0x3c000001
     224:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     228:	6e692f65 	cdpvs	15, 6, cr2, cr9, cr5, {3}
     22c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
     230:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
     234:	2f656d6f 	svccs	0x00656d6f
     238:	67696e73 			; <UNDEFINED> instruction: 0x67696e73
     23c:	722f6c65 	eorvc	r6, pc, #25856	; 0x6500
     240:	462f6970 			; <UNDEFINED> instruction: 0x462f6970
     244:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
     248:	2f534f54 	svccs	0x00534f54
     24c:	65657246 	strbvs	r7, [r5, #-582]!	; 0x246
     250:	534f5452 	movtpl	r5, #62546	; 0xf452
     254:	756f532f 	strbvc	r5, [pc, #-815]!	; ffffff2d <_estack+0xf7feff2d>
     258:	2f656372 	svccs	0x00656372
     25c:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xf70
     260:	656c6261 	strbvs	r6, [ip, #-609]!	; 0x261
     264:	4343472f 	movtmi	r4, #14127	; 0x372f
     268:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
     26c:	72656270 	rsbvc	r6, r5, #7
     270:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
     274:	72630000 	rsbvc	r0, r3, #0
     278:	6974756f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
     27c:	632e656e 	teqvs	lr, #461373440	; 0x1b800000
     280:	00000100 	andeq	r0, r0, r0, lsl #2
     284:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0x96c
     288:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     28c:	6f700000 	svcvs	0x00700000
     290:	616d7472 	smcvs	55106	; 0xd742
     294:	2e6f7263 	cdpcs	2, 6, cr7, cr15, cr3, {3}
     298:	00030068 	andeq	r0, r3, r8, rrx
     29c:	6f726300 	svcvs	0x00726300
     2a0:	6e697475 	mcrvs	4, 3, r7, cr9, cr5, {3}
     2a4:	00682e65 	rsbeq	r2, r8, r5, ror #28
     2a8:	00000002 	andeq	r0, r0, r2
     2ac:	f4020500 	vst3.8	{d0,d2,d4}, [r2], r0
     2b0:	03000105 	movweq	r0, #261	; 0x105
     2b4:	bf01018a 	svclt	0x0001018a
     2b8:	67846a67 	strvs	r6, [r4, r7, ror #20]
     2bc:	674e6832 	smlaldxvs	r6, lr, r2, r8
     2c0:	83696767 	cmnhi	r9, #27000832	; 0x19c0000
     2c4:	86696787 	strbthi	r6, [r9], -r7, lsl #15
     2c8:	01040200 	mrseq	r0, R12_usr
     2cc:	0200ba06 	andeq	fp, r0, #24576	; 0x6000
     2d0:	00820204 	addeq	r0, r2, r4, lsl #4
     2d4:	06020402 	streq	r0, [r2], -r2, lsl #8
     2d8:	4d6a9208 	sfmmi	f1, 3, [sl, #-32]!	; 0xffffffe0
     2dc:	a3a3be2f 			; <UNDEFINED> instruction: 0xa3a3be2f
     2e0:	08a284a1 	stmiaeq	r2!, {r0, r5, r7, sl, pc}
     2e4:	bc6af526 	cfstr64lt	mvdx15, [sl], #-152	; 0xffffff68
     2e8:	a0336abe 	ldrhtge	r6, [r3], -lr
     2ec:	83a08483 	movhi	r8, #-2097152000	; 0x83000000
     2f0:	01040200 	mrseq	r0, R12_usr
     2f4:	0200ba06 	andeq	fp, r0, #24576	; 0x6000
     2f8:	00820204 	addeq	r0, r2, r4, lsl #4
     2fc:	06010402 	streq	r0, [r1], -r2, lsl #8
     300:	90087303 	andls	r7, r8, r3, lsl #6
     304:	a2820f03 	addge	r0, r2, #12
     308:	9f30d769 	svcls	0x0030d769
     30c:	836788a1 	cmnhi	r7, #10551296	; 0xa10000
     310:	c0a0306a 	adcgt	r3, r0, sl, rrx
     314:	858485a5 	strhi	r8, [r4, #1445]	; 0x5a5
     318:	040200a0 	streq	r0, [r2], #-160	; 0xa0
     31c:	00ba0601 	adcseq	r0, sl, r1, lsl #12
     320:	82020402 	andhi	r0, r2, #33554432	; 0x2000000
     324:	08650306 	stmdaeq	r5!, {r1, r2, r8, r9}^
     328:	040200ac 	streq	r0, [r2], #-172	; 0xac
     32c:	062e0601 	strteq	r0, [lr], -r1, lsl #12
     330:	040200c1 	streq	r0, [r2], #-193	; 0xc1
     334:	2e670301 	cdpcs	3, 6, cr0, cr7, cr1, {0}
     338:	83823103 	orrhi	r3, r2, #-1073741824	; 0xc0000000
     33c:	31682408 	cmncc	r8, r8, lsl #8
     340:	00873031 	addeq	r3, r7, r1, lsr r0
     344:	03010402 	movweq	r0, #5122	; 0x1402
     348:	0c039e79 	stceq	14, cr9, [r3], {121}	; 0x79
     34c:	02005808 	andeq	r5, r0, #524288	; 0x80000
     350:	02060104 	andeq	r0, r6, #1
     354:	02001228 	andeq	r1, r0, #-2147483646	; 0x80000002
     358:	009e0204 	addseq	r0, lr, r4, lsl #4
     35c:	06020402 	streq	r0, [r2], -r2, lsl #8
     360:	040200a1 	streq	r0, [r2], #-161	; 0xa1
     364:	035a0802 	cmpeq	sl, #131072	; 0x20000
     368:	0d034a74 	vstreq	s8, [r3, #-464]	; 0xfffffe30
     36c:	0069a22e 	rsbeq	sl, r9, lr, lsr #4
     370:	68020402 	stmdavs	r2, {r1, sl}
     374:	02040200 	andeq	r0, r4, #0
     378:	02001e08 	andeq	r1, r0, #128	; 0x80
     37c:	66060104 	strvs	r0, [r6], -r4, lsl #2
     380:	4b4b6b06 	blmi	12dafa0 <WriteSemaphore+0x12c56e4>
     384:	f667674e 			; <UNDEFINED> instruction: 0xf667674e
     388:	a0838389 	addge	r8, r3, r9, lsl #7
     38c:	2f4d6ad8 	svccs	0x004d6ad8
     390:	01000a02 	tsteq	r0, r2, lsl #20
     394:	00012301 	andeq	r2, r1, r1, lsl #6
     398:	d5000200 	strle	r0, [r0, #-512]	; 0x200
     39c:	02000000 	andeq	r0, r0, #0
     3a0:	0d0efb01 	vstreq	d15, [lr, #-4]
     3a4:	01010100 	mrseq	r0, (UNDEF: 17)
     3a8:	00000001 	andeq	r0, r0, r1
     3ac:	01000001 	tsteq	r0, r1
     3b0:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 2fc <_start-0x7d04>
     3b4:	6e732f65 	cdpvs	15, 7, cr2, cr3, cr5, {3}
     3b8:	6c656769 	stclvs	7, cr6, [r5], #-420	; 0xfffffe5c
     3bc:	6970722f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r9, ip, sp, lr}^
     3c0:	6572462f 	ldrbvs	r4, [r2, #-1583]!	; 0x62f
     3c4:	4f545265 	svcmi	0x00545265
     3c8:	72462f53 	subvc	r2, r6, #332	; 0x14c
     3cc:	54526565 	ldrbpl	r6, [r2], #-1381	; 0x565
     3d0:	532f534f 	teqpl	pc, #1006632961	; 0x3c000001
     3d4:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     3d8:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
     3dc:	2f656d6f 	svccs	0x00656d6f
     3e0:	67696e73 			; <UNDEFINED> instruction: 0x67696e73
     3e4:	722f6c65 	eorvc	r6, pc, #25856	; 0x6500
     3e8:	462f6970 			; <UNDEFINED> instruction: 0x462f6970
     3ec:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
     3f0:	2f534f54 	svccs	0x00534f54
     3f4:	65657246 	strbvs	r7, [r5, #-582]!	; 0x246
     3f8:	534f5452 	movtpl	r5, #62546	; 0xf452
     3fc:	756f532f 	strbvc	r5, [pc, #-815]!	; d5 <_start-0x7f2b>
     400:	2f656372 	svccs	0x00656372
     404:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     408:	00656475 	rsbeq	r6, r5, r5, ror r4
     40c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 358 <_start-0x7ca8>
     410:	6e732f65 	cdpvs	15, 7, cr2, cr3, cr5, {3}
     414:	6c656769 	stclvs	7, cr6, [r5], #-420	; 0xfffffe5c
     418:	6970722f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r9, ip, sp, lr}^
     41c:	6572462f 	ldrbvs	r4, [r2, #-1583]!	; 0x62f
     420:	4f545265 	svcmi	0x00545265
     424:	72462f53 	subvc	r2, r6, #332	; 0x14c
     428:	54526565 	ldrbpl	r6, [r2], #-1381	; 0x565
     42c:	532f534f 	teqpl	pc, #1006632961	; 0x3c000001
     430:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     434:	6f702f65 	svcvs	0x00702f65
     438:	62617472 	rsbvs	r7, r1, #1912602624	; 0x72000000
     43c:	472f656c 	strmi	r6, [pc, -ip, ror #10]!
     440:	522f4343 	eorpl	r4, pc, #201326593	; 0xc000001
     444:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
     448:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
     44c:	00006950 	andeq	r6, r0, r0, asr r9
     450:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0x96c
     454:	0100632e 	tsteq	r0, lr, lsr #6
     458:	696c0000 	stmdbvs	ip!, {}^	; <UNPREDICTABLE>
     45c:	682e7473 	stmdavs	lr!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}
     460:	00000200 	andeq	r0, r0, r0, lsl #4
     464:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xf70
     468:	7263616d 	rsbvc	r6, r3, #1073741851	; 0x4000001b
     46c:	00682e6f 	rsbeq	r2, r8, pc, ror #28
     470:	00000003 	andeq	r0, r0, r3
     474:	58020500 	stmdapl	r2, {r8, sl}
     478:	0300010d 	movweq	r0, #269	; 0x10d
     47c:	860100cc 	strhi	r0, [r1], -ip, asr #1
     480:	84836a86 	strhi	r6, [r3], #2694	; 0xa86
     484:	67846a67 	strvs	r6, [r4, r7, ror #20]
     488:	8368a56a 	cmnhi	r8, #444596224	; 0x1a800000
     48c:	69678383 	stmdbvs	r7!, {r0, r1, r7, r8, r9, pc}^
     490:	a36a9f68 	cmnge	sl, #416	; 0x1a0
     494:	68660903 	stmdavs	r6!, {r0, r1, r8, fp}^
     498:	00821403 	addeq	r1, r2, r3, lsl #8
     49c:	06020402 	streq	r0, [r2], -r2, lsl #8
     4a0:	04020082 	streq	r0, [r2], #-130	; 0x82
     4a4:	c1066601 	tstgt	r6, r1, lsl #12
     4a8:	6a678383 	bvs	19e12bc <WriteSemaphore+0x19cba00>
     4ac:	856a9f68 	strbhi	r9, [sl, #-3944]!	; 0xf68
     4b0:	a069a29f 	mlsge	r9, pc, r2, sl	; <UNPREDICTABLE>
     4b4:	029f6785 	addseq	r6, pc, #34865152	; 0x2140000
     4b8:	01010006 	tsteq	r1, r6
     4bc:	00000283 	andeq	r0, r0, r3, lsl #5
     4c0:	01220002 	teqeq	r2, r2
     4c4:	01020000 	mrseq	r0, (UNDEF: 2)
     4c8:	000d0efb 	strdeq	r0, [sp], -fp
     4cc:	01010101 	tsteq	r1, r1, lsl #2
     4d0:	01000000 	mrseq	r0, (UNDEF: 0)
     4d4:	2f010000 	svccs	0x00010000
     4d8:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xf68
     4dc:	696e732f 	stmdbvs	lr!, {r0, r1, r2, r3, r5, r8, r9, ip, sp, lr}^
     4e0:	2f6c6567 	svccs	0x006c6567
     4e4:	2f697072 	svccs	0x00697072
     4e8:	65657246 	strbvs	r7, [r5, #-582]!	; 0x246
     4ec:	534f5452 	movtpl	r5, #62546	; 0xf452
     4f0:	6572462f 	ldrbvs	r4, [r2, #-1583]!	; 0x62f
     4f4:	4f545265 	svcmi	0x00545265
     4f8:	6f532f53 	svcvs	0x00532f53
     4fc:	65637275 	strbvs	r7, [r3, #-629]!	; 0x275
     500:	73752f00 	cmnvc	r5, #0
     504:	6f6c2f72 	svcvs	0x006c2f72
     508:	2f6c6163 	svccs	0x006c6163
     50c:	2f6e6962 	svccs	0x006e6962
     510:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; 460 <_start-0x7ba0>
     514:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
     518:	612f6363 	teqvs	pc, r3, ror #6
     51c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
     520:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
     524:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     528:	372e342f 	strcc	r3, [lr, -pc, lsr #8]!
     52c:	692f332e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, r9, ip, sp}	; <UNPREDICTABLE>
     530:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
     534:	2f006564 	svccs	0x00006564
     538:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xf68
     53c:	696e732f 	stmdbvs	lr!, {r0, r1, r2, r3, r5, r8, r9, ip, sp, lr}^
     540:	2f6c6567 	svccs	0x006c6567
     544:	2f697072 	svccs	0x00697072
     548:	65657246 	strbvs	r7, [r5, #-582]!	; 0x246
     54c:	534f5452 	movtpl	r5, #62546	; 0xf452
     550:	6572462f 	ldrbvs	r4, [r2, #-1583]!	; 0x62f
     554:	4f545265 	svcmi	0x00545265
     558:	6f532f53 	svcvs	0x00532f53
     55c:	65637275 	strbvs	r7, [r3, #-629]!	; 0x275
     560:	726f702f 	rsbvc	r7, pc, #47	; 0x2f
     564:	6c626174 	stfvse	f6, [r2], #-464	; 0xfffffe30
     568:	43472f65 	movtmi	r2, #32613	; 0x7f65
     56c:	61522f43 	cmpvs	r2, r3, asr #30
     570:	65627073 	strbvs	r7, [r2, #-115]!	; 0x73
     574:	50797272 	rsbspl	r7, r9, r2, ror r2
     578:	682f0069 	stmdavs	pc!, {r0, r3, r5, r6}	; <UNPREDICTABLE>
     57c:	2f656d6f 	svccs	0x00656d6f
     580:	67696e73 			; <UNDEFINED> instruction: 0x67696e73
     584:	722f6c65 	eorvc	r6, pc, #25856	; 0x6500
     588:	462f6970 			; <UNDEFINED> instruction: 0x462f6970
     58c:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
     590:	2f534f54 	svccs	0x00534f54
     594:	65657246 	strbvs	r7, [r5, #-582]!	; 0x246
     598:	534f5452 	movtpl	r5, #62546	; 0xf452
     59c:	756f532f 	strbvc	r5, [pc, #-815]!	; 275 <_start-0x7d8b>
     5a0:	2f656372 	svccs	0x00656372
     5a4:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     5a8:	00656475 	rsbeq	r6, r5, r5, ror r4
     5ac:	65757100 	ldrbvs	r7, [r5, #-256]!	; 0x100
     5b0:	632e6575 	teqvs	lr, #490733568	; 0x1d400000
     5b4:	00000100 	andeq	r0, r0, r0, lsl #2
     5b8:	64647473 	strbtvs	r7, [r4], #-1139	; 0x473
     5bc:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
     5c0:	00000200 	andeq	r0, r0, r0, lsl #4
     5c4:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xf70
     5c8:	7263616d 	rsbvc	r6, r3, #1073741851	; 0x4000001b
     5cc:	00682e6f 	rsbeq	r2, r8, pc, ror #28
     5d0:	6c000003 	stcvs	0, cr0, [r0], {3}
     5d4:	2e747369 	cdpcs	3, 7, cr7, cr4, cr9, {3}
     5d8:	00040068 	andeq	r0, r4, r8, rrx
     5dc:	73617400 	cmnvc	r1, #0
     5e0:	00682e6b 	rsbeq	r2, r8, fp, ror #28
     5e4:	00000004 	andeq	r0, r0, r4
     5e8:	e0020500 	and	r0, r2, r0, lsl #10
     5ec:	0300010f 	movweq	r0, #271	; 0x10f
     5f0:	a1010297 			; <UNDEFINED> instruction: 0xa1010297
     5f4:	673d0830 			; <UNDEFINED> instruction: 0x673d0830
     5f8:	67590883 	ldrbvs	r0, [r9, -r3, lsl #17]
     5fc:	d8846d68 	stmle	r4, {r3, r5, r6, r8, sl, fp, sp, lr}
     600:	32858351 	addcc	r8, r5, #1140850689	; 0x44000001
     604:	51d96a2f 	bicspl	r6, r9, pc, lsr #20
     608:	a06a6768 	rsbge	r6, sl, r8, ror #14
     60c:	6767869f 			; <UNDEFINED> instruction: 0x6767869f
     610:	2f516b6e 	svccs	0x00516b6e
     614:	6601d003 	strvs	sp, [r1], -r3
     618:	00f103d7 	ldrsbteq	r0, [r1], #55	; 0x37
     61c:	7f9a0366 	svcvc	0x009a0366
     620:	86bd322e 	ldrthi	r3, [sp], lr, lsr #4
     624:	3232dc84 	eorscc	sp, r2, #33792	; 0x8400
     628:	4c336a4e 	ldcmi	10, cr6, [r3], #-312	; 0xfffffec8
     62c:	334e676a 	movtcc	r6, #59242	; 0xe76a
     630:	0402002f 	streq	r0, [r2], #-47	; 0x2f
     634:	009e0601 	addseq	r0, lr, r1, lsl #12
     638:	66020402 	strvs	r0, [r2], -r2, lsl #8
     63c:	03040200 	movweq	r0, #16896	; 0x4200
     640:	04020082 	streq	r0, [r2], #-130	; 0x82
     644:	02006604 	andeq	r6, r0, #4194304	; 0x400000
     648:	31060404 	tstcc	r6, r4, lsl #8
     64c:	51c1a1f4 	strdpl	sl, [r1, #20]
     650:	2e150384 	cdpcs	3, 1, cr0, cr5, cr4, {4}
     654:	4b2e7103 	blmi	b9ca68 <WriteSemaphore+0xb871ac>
     658:	032e0e03 	teqeq	lr, #48	; 0x30
     65c:	334b2e78 	movtcc	r2, #48760	; 0xbe78
     660:	01d20331 	bicseq	r0, r2, r1, lsr r3
     664:	d60c0366 	strle	r0, [ip], -r6, ror #6
     668:	8486be4c 	strhi	fp, [r6], #3660	; 0xe4c
     66c:	0368da84 	cmneq	r8, #540672	; 0x84000
     670:	6ba18209 	blvs	fe860e9c <_estack+0xf6850e9c>
     674:	d76a2f4f 	strble	r2, [sl, -pc, asr #30]!
     678:	66018f03 	strvs	r8, [r1], -r3, lsl #30
     67c:	2e7efe03 	cdpcs	14, 7, cr15, cr14, cr3, {0}
     680:	68688532 	stmdavs	r8!, {r1, r4, r5, r8, sl, pc}^
     684:	9e0d036b 	cdpls	3, 0, cr0, cr13, cr11, {3}
     688:	0a03d884 	beq	f68a0 <WriteSemaphore+0xe0fe4>
     68c:	d9866a4a 	stmible	r6, {r1, r3, r6, r9, fp, sp, lr}
     690:	6a4e2f33 	bvs	138c364 <WriteSemaphore+0x1376aa8>
     694:	676a4c30 			; <UNDEFINED> instruction: 0x676a4c30
     698:	002f334e 	eoreq	r3, pc, lr, asr #6
     69c:	06010402 	streq	r0, [r1], -r2, lsl #8
     6a0:	0402009e 	streq	r0, [r2], #-158	; 0x9e
     6a4:	02006602 	andeq	r6, r0, #2097152	; 0x200000
     6a8:	00820304 	addeq	r0, r2, r4, lsl #6
     6ac:	66040402 	strvs	r0, [r4], -r2, lsl #8
     6b0:	04040200 	streq	r0, [r4], #-512	; 0x200
     6b4:	03f43106 	mvnseq	r3, #-2147483647	; 0x80000001
     6b8:	4bbb9e11 	blmi	feee7f04 <_estack+0xf6ed7f04>
     6bc:	2e110384 	cdpcs	3, 1, cr0, cr1, cr4, {4}
     6c0:	4b2e7503 	blmi	b9dad4 <WriteSemaphore+0xb88218>
     6c4:	292e0a03 	stmdbcs	lr!, {r0, r1, r9, fp}
     6c8:	6a31304b 	bvs	c4c7fc <WriteSemaphore+0xc36f40>
     6cc:	67864dc1 	strvs	r4, [r6, r1, asr #27]
     6d0:	da8484a3 	ble	fe121964 <_estack+0xf6111964>
     6d4:	82090368 	andhi	r0, r9, #-1610612735	; 0xa0000001
     6d8:	2f506aa1 	svccs	0x00506aa1
     6dc:	672f876a 	strvs	r8, [pc, -sl, ror #14]!
     6e0:	876a2f30 			; <UNDEFINED> instruction: 0x876a2f30
     6e4:	87862f68 	strhi	r2, [r6, r8, ror #30]
     6e8:	22034b83 	andcs	r4, r3, #134144	; 0x20c00
     6ec:	0d03bb4a 	vstreq	d11, [r3, #-296]	; 0xfffffed8
     6f0:	d7f36882 	ldrble	r6, [r3, r2, lsl #17]!
     6f4:	f3f3a3bc 	vrsra.u64	d26, d28, #13
     6f8:	4e9ff6bc 	mrcmi	6, 4, APSR_nzcv, cr15, cr12, {5}
     6fc:	bcd7849f 	cfldrdlt	mvd8, [r7], {159}	; 0x9f
     700:	894ef484 	stmdbhi	lr, {r2, r7, sl, ip, sp, lr, pc}^
     704:	da863231 	ble	fe18cfd0 <_estack+0xf617cfd0>
     708:	04020031 	streq	r0, [r2], #-49	; 0x31
     70c:	9e710301 	cdpls	3, 7, cr0, cr1, cr1, {0}
     710:	329e1303 	addscc	r1, lr, #201326592	; 0xc000000
     714:	30303168 	eorscc	r3, r0, r8, ror #2
     718:	0031d884 	eorseq	sp, r1, r4, lsl #17
     71c:	03010402 	movweq	r0, #5122	; 0x1402
     720:	0d039e77 	stceq	14, cr9, [r3, #-476]	; 0xfffffe24
     724:	2f68329e 	svccs	0x0068329e
     728:	d72f854e 	strle	r8, [pc, -lr, asr #10]!
     72c:	866a2f30 	uqasxhi	r2, sl, r0
     730:	85862fd8 	strhi	r2, [r6, #4056]	; 0xfd8
     734:	3021082f 	eorcc	r0, r1, pc, lsr #16
     738:	08866a2f 	stmeq	r6, {r0, r1, r2, r3, r5, r9, fp, sp, lr}
     73c:	08022f22 	stmdaeq	r2, {r1, r5, r8, r9, sl, fp, sp}
     740:	83010100 	movwhi	r0, #4352	; 0x1100
     744:	02000004 	andeq	r0, r0, #4
     748:	00013e00 	andeq	r3, r1, r0, lsl #28
     74c:	fb010200 	blx	40f56 <WriteSemaphore+0x2b69a>
     750:	01000d0e 	tsteq	r0, lr, lsl #26
     754:	00010101 	andeq	r0, r1, r1, lsl #2
     758:	00010000 	andeq	r0, r1, r0
     75c:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
     760:	2f656d6f 	svccs	0x00656d6f
     764:	67696e73 			; <UNDEFINED> instruction: 0x67696e73
     768:	722f6c65 	eorvc	r6, pc, #25856	; 0x6500
     76c:	462f6970 			; <UNDEFINED> instruction: 0x462f6970
     770:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
     774:	2f534f54 	svccs	0x00534f54
     778:	65657246 	strbvs	r7, [r5, #-582]!	; 0x246
     77c:	534f5452 	movtpl	r5, #62546	; 0xf452
     780:	756f532f 	strbvc	r5, [pc, #-815]!	; 459 <_start-0x7ba7>
     784:	00656372 	rsbeq	r6, r5, r2, ror r3
     788:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
     78c:	636f6c2f 	cmnvs	pc, #12032	; 0x2f00
     790:	622f6c61 	eorvs	r6, pc, #24832	; 0x6100
     794:	2e2f6e69 	cdpcs	14, 2, cr6, cr15, cr9, {3}
     798:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
     79c:	63672f62 	cmnvs	r7, #392	; 0x188
     7a0:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
     7a4:	6f6e2d6d 	svcvs	0x006e2d6d
     7a8:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
     7ac:	2f696261 	svccs	0x00696261
     7b0:	2e372e34 	mrccs	14, 1, r2, cr7, cr4, {1}
     7b4:	6e692f33 	mcrvs	15, 3, r2, cr9, cr3, {1}
     7b8:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
     7bc:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
     7c0:	2f656d6f 	svccs	0x00656d6f
     7c4:	67696e73 			; <UNDEFINED> instruction: 0x67696e73
     7c8:	722f6c65 	eorvc	r6, pc, #25856	; 0x6500
     7cc:	462f6970 			; <UNDEFINED> instruction: 0x462f6970
     7d0:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
     7d4:	2f534f54 	svccs	0x00534f54
     7d8:	65657246 	strbvs	r7, [r5, #-582]!	; 0x246
     7dc:	534f5452 	movtpl	r5, #62546	; 0xf452
     7e0:	756f532f 	strbvc	r5, [pc, #-815]!	; 4b9 <_start-0x7b47>
     7e4:	2f656372 	svccs	0x00656372
     7e8:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     7ec:	00656475 	rsbeq	r6, r5, r5, ror r4
     7f0:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 73c <_start-0x78c4>
     7f4:	6e732f65 	cdpvs	15, 7, cr2, cr3, cr5, {3}
     7f8:	6c656769 	stclvs	7, cr6, [r5], #-420	; 0xfffffe5c
     7fc:	6970722f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r9, ip, sp, lr}^
     800:	6572462f 	ldrbvs	r4, [r2, #-1583]!	; 0x62f
     804:	4f545265 	svcmi	0x00545265
     808:	72462f53 	subvc	r2, r6, #332	; 0x14c
     80c:	54526565 	ldrbpl	r6, [r2], #-1381	; 0x565
     810:	532f534f 	teqpl	pc, #1006632961	; 0x3c000001
     814:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     818:	6f702f65 	svcvs	0x00702f65
     81c:	62617472 	rsbvs	r7, r1, #1912602624	; 0x72000000
     820:	472f656c 	strmi	r6, [pc, -ip, ror #10]!
     824:	522f4343 	eorpl	r4, pc, #201326593	; 0xc000001
     828:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
     82c:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
     830:	00006950 	andeq	r6, r0, r0, asr r9
     834:	6b736174 	blvs	1cd8e0c <WriteSemaphore+0x1cc3550>
     838:	00632e73 	rsbeq	r2, r3, r3, ror lr
     83c:	73000001 	movwvc	r0, #1
     840:	65646474 	strbvs	r6, [r4, #-1140]!	; 0x474
     844:	00682e66 	rsbeq	r2, r8, r6, ror #28
     848:	70000002 	andvc	r0, r0, r2
     84c:	646a6f72 	strbtvs	r6, [sl], #-3954	; 0xf72
     850:	2e736665 	cdpcs	6, 7, cr6, cr3, cr5, {3}
     854:	00030068 	andeq	r0, r3, r8, rrx
     858:	726f7000 	rsbvc	r7, pc, #0
     85c:	63616d74 	cmnvs	r1, #7424	; 0x1d00
     860:	682e6f72 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}
     864:	00000400 	andeq	r0, r0, r0, lsl #8
     868:	65657246 	strbvs	r7, [r5, #-582]!	; 0x246
     86c:	534f5452 	movtpl	r5, #62546	; 0xf452
     870:	0300682e 	movweq	r6, #2094	; 0x82e
     874:	696c0000 	stmdbvs	ip!, {}^	; <UNPREDICTABLE>
     878:	682e7473 	stmdavs	lr!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}
     87c:	00000300 	andeq	r0, r0, r0, lsl #6
     880:	6b736174 	blvs	1cd8e58 <WriteSemaphore+0x1cc359c>
     884:	0300682e 	movweq	r6, #2094	; 0x82e
     888:	00000000 	andeq	r0, r0, r0
     88c:	1b9c0205 	blne	fe7010a8 <_estack+0xf66f10a8>
     890:	9b030001 	blls	c089c <WriteSemaphore+0xaafe0>
     894:	09030103 	stmdbeq	r3, {r0, r1, r8}
     898:	1803a0d6 	stmdane	r3, {r1, r2, r4, r6, r7, sp, pc}
     89c:	1403d766 	strne	sp, [r3], #-1894	; 0x766
     8a0:	d60c0366 	strle	r0, [ip], -r6, ror #6
     8a4:	306b6bdd 	ldrdcc	r6, [fp], #-189	; 0xffffff43	; <UNPREDICTABLE>
     8a8:	8768869f 			; <UNDEFINED> instruction: 0x8768869f
     8ac:	6dbc8452 	cfldrsvs	mvf8, [ip, #328]!	; 0x148
     8b0:	820903bc 	andhi	r0, r9, #-268435454	; 0xf0000002
     8b4:	040200a0 	streq	r0, [r2], #-160	; 0xa0
     8b8:	00ba0601 	adcseq	r0, sl, r1, lsl #12
     8bc:	82020402 	andhi	r0, r2, #33554432	; 0x2000000
     8c0:	02040200 	andeq	r0, r4, #0
     8c4:	00920806 	addseq	r0, r2, r6, lsl #16
     8c8:	4e020402 	cdpmi	4, 0, cr0, cr2, cr2, {0}
     8cc:	86684e4e 	strbthi	r4, [r8], -lr, asr #28
     8d0:	082f33bc 	stmdaeq	pc!, {r2, r3, r4, r5, r7, r8, r9, ip, sp}	; <UNPREDICTABLE>
     8d4:	a0328542 	eorsge	r8, r2, r2, asr #10
     8d8:	0402004e 	streq	r0, [r2], #-78	; 0x4e
     8dc:	00660601 	rsbeq	r0, r6, r1, lsl #12
     8e0:	66020402 	strvs	r0, [r2], -r2, lsl #8
     8e4:	03040200 	movweq	r0, #16896	; 0x4200
     8e8:	0402002e 	streq	r0, [r2], #-46	; 0x2e
     8ec:	00340603 	eorseq	r0, r4, r3, lsl #12
     8f0:	85030402 	strhi	r0, [r3, #-1026]	; 0x402
     8f4:	a2a38584 	adcge	r8, r3, #553648128	; 0x21000000
     8f8:	688431a2 	stmvs	r4, {r1, r5, r7, r8, ip, sp}
     8fc:	d6100331 			; <UNDEFINED> instruction: 0xd6100331
     900:	a0314fa0 	eorsge	r4, r1, r0, lsr #31
     904:	040200c1 	streq	r0, [r2], #-193	; 0xc1
     908:	069e0601 	ldreq	r0, [lr], r1, lsl #12
     90c:	02006ea0 	andeq	r6, r0, #2560	; 0xa00
     910:	9e060104 	adflss	f0, f6, f4
     914:	684fa006 	stmdavs	pc, {r1, r2, sp, pc}^	; <UNPREDICTABLE>
     918:	4e4d9f6d 	cdpmi	15, 4, cr9, cr13, cr13, {3}
     91c:	848a3068 	strhi	r3, [sl], #104	; 0x68
     920:	0e03684d 	cdpeq	8, 0, cr6, cr3, cr13, {2}
     924:	4c9fa32e 	ldcmi	3, cr10, [pc], {46}	; 0x2e
     928:	8a30684f 	bhi	c1aa6c <WriteSemaphore+0xc051b0>
     92c:	02003286 	andeq	r3, r0, #1610612744	; 0x60000008
     930:	66060104 	strvs	r0, [r6], -r4, lsl #2
     934:	02040200 	andeq	r0, r4, #0
     938:	04020066 	streq	r0, [r2], #-102	; 0x66
     93c:	02002e03 	andeq	r2, r0, #48	; 0x30
     940:	2f060304 	svccs	0x00060304
     944:	03040200 	movweq	r0, #16896	; 0x4200
     948:	04020068 	streq	r0, [r2], #-104	; 0x68
     94c:	02003003 	andeq	r3, r0, #3
     950:	8a2f0304 	bhi	bc1568 <WriteSemaphore+0xbabcac>
     954:	4d684fa1 	stclmi	15, cr4, [r8, #-644]!	; 0xfffffd7c
     958:	004fa030 	subeq	sl, pc, r0, lsr r0	; <UNPREDICTABLE>
     95c:	06010402 	streq	r0, [r1], -r2, lsl #8
     960:	04020066 	streq	r0, [r2], #-102	; 0x66
     964:	02006602 	andeq	r6, r0, #2097152	; 0x200000
     968:	002e0304 	eoreq	r0, lr, r4, lsl #6
     96c:	06030402 	streq	r0, [r3], -r2, lsl #8
     970:	002e0a03 	eoreq	r0, lr, r3, lsl #20
     974:	6a030402 	bvs	c1984 <WriteSemaphore+0xac0c8>
     978:	696c8486 	stmdbvs	ip!, {r1, r2, r7, sl, pc}^
     97c:	4a13036a 	bmi	4c172c <WriteSemaphore+0x4abe70>
     980:	5d08886a 	stcpl	8, cr8, [r8, #-424]	; 0xfffffe58
     984:	04020083 	streq	r0, [r2], #-131	; 0x83
     988:	00ba0601 	adcseq	r0, sl, r1, lsl #12
     98c:	82020402 	andhi	r0, r2, #33554432	; 0x2000000
     990:	68930806 	ldmvs	r3, {r1, r2, fp}
     994:	85a62f32 	strhi	r2, [r6, #3890]!	; 0xf32
     998:	004ea032 	subeq	sl, lr, r2, lsr r0
     99c:	06010402 	streq	r0, [r1], -r2, lsl #8
     9a0:	04020066 	streq	r0, [r2], #-102	; 0x66
     9a4:	02006602 	andeq	r6, r0, #2097152	; 0x200000
     9a8:	002e0304 	eoreq	r0, lr, r4, lsl #6
     9ac:	06030402 	streq	r0, [r3], -r2, lsl #8
     9b0:	04020033 	streq	r0, [r2], #-51	; 0x33
     9b4:	85848503 	strhi	r8, [r4, #1283]	; 0x503
     9b8:	856830a0 	strbhi	r3, [r8, #-160]!	; 0xa0
     9bc:	3286c051 	addcc	ip, r6, #81	; 0x51
     9c0:	514b83c2 	smlalbtpl	r8, fp, r2, r3
     9c4:	4f84a4a1 	svcmi	0x0084a4a1
     9c8:	4e8ac22f 	cdpmi	2, 8, cr12, cr10, cr15, {1}
     9cc:	01040200 	mrseq	r0, R12_usr
     9d0:	a0066606 	andge	r6, r6, r6, lsl #12
     9d4:	0083a430 	addeq	sl, r3, r0, lsr r4
     9d8:	06010402 	streq	r0, [r1], -r2, lsl #8
     9dc:	040200ba 	streq	r0, [r2], #-186	; 0xba
     9e0:	02008202 	andeq	r8, r0, #536870912	; 0x20000000
     9e4:	08060204 	stmdaeq	r6, {r2, r9}
     9e8:	3032da93 	mlascc	r2, r3, sl, sp
     9ec:	839e0903 	orrshi	r0, lr, #49152	; 0xc000
     9f0:	a24c4c50 	subge	r4, ip, #20480	; 0x5000
     9f4:	833d0884 	teqhi	sp, #8650752	; 0x840000
     9f8:	01040200 	mrseq	r0, R12_usr
     9fc:	0200ba06 	andeq	fp, r0, #24576	; 0x6000
     a00:	06820204 	streq	r0, [r2], r4, lsl #4
     a04:	2fa4b308 	svccs	0x00a4b308
     a08:	03f20d03 	mvnseq	r0, #192	; 0xc0
     a0c:	0d03660d 	stceq	6, cr6, [r3, #-52]	; 0xffffffcc
     a10:	0a03ac08 	beq	eba38 <WriteSemaphore+0xd617c>
     a14:	0367a066 	cmneq	r7, #102	; 0x66
     a18:	0d036609 	stceq	6, cr6, [r3, #-36]	; 0xffffffdc
     a1c:	9f4ebe2e 	svcls	0x004ebe2e
     a20:	4d4e2f67 	stclmi	15, cr2, [lr, #-412]	; 0xfffffe64
     a24:	0368869f 	cmneq	r8, #166723584	; 0x9f00000
     a28:	a0304a0b 	eorsge	r4, r0, fp, lsl #20
     a2c:	304e8484 	subcc	r8, lr, r4, lsl #9
     a30:	00676767 	rsbeq	r6, r7, r7, ror #14
     a34:	06010402 	streq	r0, [r1], -r2, lsl #8
     a38:	0402009e 	streq	r0, [r2], #-158	; 0x9e
     a3c:	02006602 	andeq	r6, r0, #2097152	; 0x200000
     a40:	08060204 	stmdaeq	r6, {r2, r9}
     a44:	0200bc5c 	andeq	fp, r0, #23552	; 0x5c00
     a48:	75030104 	strvc	r0, [r3, #-260]	; 0x104
     a4c:	8212034a 	andshi	r0, r2, #671088641	; 0x28000001
     a50:	002f3084 	eoreq	r3, pc, r4, lsl #1
     a54:	9b010402 	blls	41a64 <WriteSemaphore+0x2c1a8>
     a58:	4f820b03 	svcmi	0x00820b03
     a5c:	01040200 	mrseq	r0, R12_usr
     a60:	84066606 	strhi	r6, [r6], #-1542	; 0x606
     a64:	3033674b 	eorscc	r6, r3, fp, asr #14
     a68:	080e032f 	stmdaeq	lr, {r0, r1, r2, r3, r5, r8, r9}
     a6c:	68306a58 	ldmdavs	r0!, {r3, r4, r6, r9, fp, sp, lr}
     a70:	6a862f30 	bvs	fe18c738 <_estack+0xf617c738>
     a74:	a22f694b 	eorge	r6, pc, #1228800	; 0x12c000
     a78:	ae034b4d 	vmlsge.f64	d4, d3, d13
     a7c:	846c9e01 	strbthi	r9, [ip], #-3585	; 0xe01
     a80:	8209039f 	andhi	r0, r9, #2080374786	; 0x7c000002
     a84:	a0678367 	rsbge	r8, r7, r7, ror #6
     a88:	879f8aa5 	ldrhi	r8, [pc, r5, lsr #21]
     a8c:	01040200 	mrseq	r0, R12_usr
     a90:	0200ba06 	andeq	fp, r0, #24576	; 0x6000
     a94:	009e0204 	addseq	r0, lr, r4, lsl #4
     a98:	82030402 	andhi	r0, r3, #33554432	; 0x2000000
     a9c:	04040200 	streq	r0, [r4], #-512	; 0x200
     aa0:	02009008 	andeq	r9, r0, #8
     aa4:	00820504 	addeq	r0, r2, r4, lsl #10
     aa8:	f2060402 	vshl.s8	d0, d2, d6
     aac:	07040200 	streq	r0, [r4, -r0, lsl #4]
     ab0:	04020082 	streq	r0, [r2], #-130	; 0x82
     ab4:	0200ba08 	andeq	fp, r0, #32768	; 0x8000
     ab8:	06820904 	streq	r0, [r2], r4, lsl #18
     abc:	1703b008 	strne	fp, [r3, -r8]
     ac0:	a25e089e 	subsge	r0, lr, #10354688	; 0x9e0000
     ac4:	2f4f8668 	svccs	0x004f8668
     ac8:	876e2f67 	strbhi	r2, [lr, -r7, ror #30]!
     acc:	2f4f8668 	svccs	0x004f8668
     ad0:	8a2f3067 	bhi	bccc74 <WriteSemaphore+0xbb73b8>
     ad4:	4d8668a3 	stcmi	8, cr6, [r6, #652]	; 0x28c
     ad8:	2f4dbe84 	svccs	0x004dbe84
     adc:	03866788 	orreq	r6, r6, #35651584	; 0x2200000
     ae0:	00b78221 	adcseq	r8, r7, r1, lsr #4
     ae4:	06010402 	streq	r0, [r1], -r2, lsl #8
     ae8:	0d03062e 	stceq	6, cr0, [r3, #-184]	; 0xffffff48
     aec:	02005808 	andeq	r5, r0, #524288	; 0x80000
     af0:	02060104 	andeq	r0, r6, #1
     af4:	02001228 	andeq	r1, r0, #-2147483646	; 0x80000002
     af8:	069e0204 	ldreq	r0, [lr], r4, lsl #4
     afc:	0b03f6a6 	bleq	fe59c <WriteSemaphore+0xe8ce0>
     b00:	6ba3bf9e 	blvs	fe8f0980 <_estack+0xf68e0980>
     b04:	0b039fdc 	bleq	e8a7c <WriteSemaphore+0xd31c0>
     b08:	9e26034a 	cdpls	3, 2, cr0, cr6, cr10, {2}
     b0c:	84821103 	strhi	r1, [r2], #259	; 0x103
     b10:	00838484 	addeq	r8, r3, r4, lsl #9
     b14:	06010402 	streq	r0, [r1], -r2, lsl #8
     b18:	040200ba 	streq	r0, [r2], #-186	; 0xba
     b1c:	08068202 	stmdaeq	r6, {r1, r9, pc}
     b20:	6adca1b2 	bvs	ff7291f0 <_estack+0xf77191f0>
     b24:	84f62f4d 	ldrbthi	r2, [r6], #3917	; 0xf4d
     b28:	a4a28383 	strtge	r8, [r2], #899	; 0x383
     b2c:	006b8434 	rsbeq	r8, fp, r4, lsr r4
     b30:	06010402 	streq	r0, [r1], -r2, lsl #8
     b34:	68c006ba 	stmiavs	r0, {r1, r3, r4, r5, r7, r9, sl}^
     b38:	3d082308 	stccc	3, cr2, [r8, #-32]	; 0xffffffe0
     b3c:	304d6a4b 	subcc	r6, sp, fp, asr #20
     b40:	674ba22f 	strbvs	sl, [fp, -pc, lsr #4]
     b44:	03823203 	orreq	r3, r2, #805306368	; 0x30000000
     b48:	56039e31 			; <UNDEFINED> instruction: 0x56039e31
     b4c:	2e17032e 	cdpcs	3, 1, cr0, cr7, cr14, {1}
     b50:	2e110384 	cdpcs	3, 1, cr0, cr1, cr4, {4}
     b54:	db4a1003 	blle	1284b68 <WriteSemaphore+0x126f2ac>
     b58:	4d686abd 	vstmdbmi	r8!, {s13-s201}
     b5c:	6986836d 	stmibvs	r6, {r0, r2, r3, r5, r6, r8, r9, pc}
     b60:	660a0383 	strvs	r0, [sl], -r3, lsl #7
     b64:	03661403 	cmneq	r6, #50331648	; 0x3000000
     b68:	00694a17 	rsbeq	r4, r9, r7, lsl sl
     b6c:	68020402 	stmdavs	r2, {r1, sl}
     b70:	02040200 	andeq	r0, r4, #0
     b74:	02001e08 	andeq	r1, r0, #128	; 0x80
     b78:	66060104 	strvs	r0, [r6], -r4, lsl #2
     b7c:	4b4b6b06 	blmi	12db79c <WriteSemaphore+0x12c5ee0>
     b80:	6750504e 	ldrbvs	r5, [r0, -lr, asr #32]
     b84:	6d400867 	stclvs	8, cr0, [r0, #-412]	; 0xfffffe64
     b88:	30d72f84 	sbcscc	r2, r7, r4, lsl #31
     b8c:	8383306a 	orrhi	r3, r3, #106	; 0x6a
     b90:	4f30a09f 	svcmi	0x0030a09f
     b94:	a18484a2 	orrge	r8, r4, r2, lsr #9
     b98:	a0f72508 	rscsge	r2, r7, r8, lsl #10
     b9c:	68bfda69 	ldmvs	pc!, {r0, r3, r5, r6, r9, fp, ip, lr, pc}	; <UNPREDICTABLE>
     ba0:	0402006b 	streq	r0, [r2], #-107	; 0x6b
     ba4:	00660601 	rsbeq	r0, r6, r1, lsl #12
     ba8:	ba020402 	blt	81bb8 <WriteSemaphore+0x6c2fc>
     bac:	03040200 	movweq	r0, #16896	; 0x4200
     bb0:	0402002e 	streq	r0, [r2], #-46	; 0x2e
     bb4:	854c0603 	strbhi	r0, [ip, #-1539]	; 0x603
     bb8:	0a036b4b 	beq	db8ec <WriteSemaphore+0xc6030>
     bbc:	9d032ff2 	stcls	15, cr2, [r3, #-968]	; 0xfffffc38
     bc0:	838a6601 	orrhi	r6, sl, #1048576	; 0x100000
     bc4:	0004024b 	andeq	r0, r4, fp, asr #4
     bc8:	01200101 	teqeq	r0, r1, lsl #2
     bcc:	00020000 	andeq	r0, r2, r0
     bd0:	0000009d 	muleq	r0, sp, r0
     bd4:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     bd8:	0101000d 	tsteq	r1, sp
     bdc:	00000101 	andeq	r0, r0, r1, lsl #2
     be0:	00000100 	andeq	r0, r0, r0, lsl #2
     be4:	6f682f01 	svcvs	0x00682f01
     be8:	732f656d 	teqvc	pc, #457179136	; 0x1b400000
     bec:	6567696e 	strbvs	r6, [r7, #-2414]!	; 0x96e
     bf0:	70722f6c 	rsbsvc	r2, r2, ip, ror #30
     bf4:	72462f69 	subvc	r2, r6, #420	; 0x1a4
     bf8:	54526565 	ldrbpl	r6, [r2], #-1381	; 0x565
     bfc:	2f2f534f 	svccs	0x002f534f
     c00:	65657246 	strbvs	r7, [r5, #-582]!	; 0x246
     c04:	534f5452 	movtpl	r5, #62546	; 0xf452
     c08:	756f532f 	strbvc	r5, [pc, #-815]!	; 8e1 <_start-0x771f>
     c0c:	2f656372 	svccs	0x00656372
     c10:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xf70
     c14:	656c6261 	strbvs	r6, [ip, #-609]!	; 0x261
     c18:	6d654d2f 	stclvs	13, cr4, [r5, #-188]!	; 0xffffff44
     c1c:	676e614d 	strbvs	r6, [lr, -sp, asr #2]!
     c20:	73752f00 	cmnvc	r5, #0
     c24:	6f6c2f72 	svcvs	0x006c2f72
     c28:	2f6c6163 	svccs	0x006c6163
     c2c:	2f6e6962 	svccs	0x006e6962
     c30:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; b80 <_start-0x7480>
     c34:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
     c38:	612f6363 	teqvs	pc, r3, ror #6
     c3c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
     c40:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
     c44:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     c48:	372e342f 	strcc	r3, [lr, -pc, lsr #8]!
     c4c:	692f332e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, r9, ip, sp}	; <UNPREDICTABLE>
     c50:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
     c54:	00006564 	andeq	r6, r0, r4, ror #10
     c58:	70616568 	rsbvc	r6, r1, r8, ror #10
     c5c:	632e345f 	teqvs	lr, #1593835520	; 0x5f000000
     c60:	00000100 	andeq	r0, r0, r0, lsl #2
     c64:	64647473 	strbtvs	r7, [r4], #-1139	; 0x473
     c68:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
     c6c:	00000200 	andeq	r0, r0, r0, lsl #4
     c70:	02050000 	andeq	r0, r5, #0
     c74:	0001347c 	andeq	r3, r1, ip, ror r4
     c78:	01019203 	tsteq	r1, r3, lsl #4
     c7c:	84324c84 	ldrthi	r4, [r2], #-3204	; 0xc84
     c80:	85a26833 	strhi	r6, [r2, #2099]!	; 0x833
     c84:	04020086 	streq	r0, [r2], #-134	; 0x86
     c88:	06660601 	strbteq	r0, [r6], -r1, lsl #12
     c8c:	30674ba2 	rsbcc	r4, r7, r2, lsr #23
     c90:	0402004b 	streq	r0, [r2], #-75	; 0x4b
     c94:	02006301 	andeq	r6, r0, #67108864	; 0x4000000
     c98:	9e060204 	cdpls	2, 0, cr0, cr6, cr4, {0}
     c9c:	bea28a06 	vfmalt.f32	s16, s4, s12
     ca0:	86250885 	strthi	r0, [r5], -r5, lsl #17
     ca4:	da4d69bb 	ble	135b398 <WriteSemaphore+0x1345adc>
     ca8:	bc2e0c03 	stclt	12, cr0, [lr], #-12
     cac:	8324082f 	teqhi	r4, #3080192	; 0x2f0000
     cb0:	4cbd6a4d 	vpopmi	{s12-s88}
     cb4:	304cd731 	subcc	sp, ip, r1, lsr r7
     cb8:	a24b4b86 	subge	r4, fp, #137216	; 0x21800
     cbc:	09036a4c 	stmdbeq	r3, {r2, r3, r6, r9, fp, sp, lr}
     cc0:	9f6a6766 	svcls	0x006a6766
     cc4:	868368bb 			; <UNDEFINED> instruction: 0x868368bb
     cc8:	d785d74b 	strle	sp, [r5, fp, asr #14]
     ccc:	00882408 	addeq	r2, r8, r8, lsl #8
     cd0:	06020402 	streq	r0, [r2], -r2, lsl #8
     cd4:	04020066 	streq	r0, [r2], #-102	; 0x66
     cd8:	a5066601 	strge	r6, [r6, #-1537]	; 0x601
     cdc:	4fd7d84b 	svcmi	0x00d7d84b
     ce0:	f3bdf44b 	vcgt.f<illegal width 64>	<illegal reg q7.5>, <illegal reg q5.5>, #0
     ce4:	8489a3be 	strhi	sl, [r9], #958	; 0x3be
     ce8:	000a0268 	andeq	r0, sl, r8, ror #4
     cec:	00e10101 	rsceq	r0, r1, r1, lsl #2
     cf0:	00020000 	andeq	r0, r2, r0
     cf4:	0000005a 	andeq	r0, r0, sl, asr r0
     cf8:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     cfc:	0101000d 	tsteq	r1, sp
     d00:	00000101 	andeq	r0, r0, r1, lsl #2
     d04:	00000100 	andeq	r0, r0, r0, lsl #2
     d08:	6f682f01 	svcvs	0x00682f01
     d0c:	732f656d 	teqvc	pc, #457179136	; 0x1b400000
     d10:	6567696e 	strbvs	r6, [r7, #-2414]!	; 0x96e
     d14:	70722f6c 	rsbsvc	r2, r2, ip, ror #30
     d18:	72462f69 	subvc	r2, r6, #420	; 0x1a4
     d1c:	54526565 	ldrbpl	r6, [r2], #-1381	; 0x565
     d20:	442f534f 	strtmi	r5, [pc], #-847	; d28 <_start-0x72d8>
     d24:	2f6f6d65 	svccs	0x006f6d65
     d28:	76697244 	strbtvc	r7, [r9], -r4, asr #4
     d2c:	00737265 	rsbseq	r7, r3, r5, ror #4
     d30:	746e6900 	strbtvc	r6, [lr], #-2304	; 0x900
     d34:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0x265
     d38:	2e737470 	mrccs	4, 3, r7, cr3, cr0, {3}
     d3c:	00010063 	andeq	r0, r1, r3, rrx
     d40:	746e6900 	strbtvc	r6, [lr], #-2304	; 0x900
     d44:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0x265
     d48:	2e737470 	mrccs	4, 3, r7, cr3, cr0, {3}
     d4c:	00010068 	andeq	r0, r1, r8, rrx
     d50:	05000000 	streq	r0, [r0, #-0]
     d54:	01396802 	teqeq	r9, r2, lsl #16
     d58:	011d0300 	tsteq	sp, r0, lsl #6
     d5c:	2f2f2f4b 	svccs	0x002f2f4b
     d60:	2f2f4b68 	svccs	0x002f4b68
     d64:	660d0330 			; <UNDEFINED> instruction: 0x660d0330
     d68:	67660d03 	strbvs	r0, [r6, -r3, lsl #26]!
     d6c:	312f8330 	teqcc	pc, r0, lsr r3	; <UNPREDICTABLE>
     d70:	4f316767 	svcmi	0x00316767
     d74:	4b306767 	blmi	c1ab18 <WriteSemaphore+0xc0525c>
     d78:	032e7703 	teqeq	lr, #786432	; 0xc0000
     d7c:	302f2e11 	eorcc	r2, pc, r1, lsl lr	; <UNPREDICTABLE>
     d80:	7103bbc1 	smlabtvc	r3, r1, fp, fp
     d84:	1103c808 	tstne	r3, r8, lsl #16
     d88:	68a4a12e 	stmiavs	r4!, {r1, r2, r3, r5, r8, sp, pc}
     d8c:	04020068 	streq	r0, [r2], #-104	; 0x68
     d90:	02006702 	andeq	r6, r0, #524288	; 0x80000
     d94:	00830204 	addeq	r0, r3, r4, lsl #4
     d98:	f0020402 			; <UNDEFINED> instruction: 0xf0020402
     d9c:	01040200 	mrseq	r0, R12_usr
     da0:	6a066606 	bvs	19a5c0 <WriteSemaphore+0x184d04>
     da4:	30bcbe2f 	adcscc	fp, ip, pc, lsr #28
     da8:	2f2ff483 	svccs	0x002ff483
     dac:	00848684 	addeq	r8, r4, r4, lsl #13
     db0:	06010402 	streq	r0, [r1], -r2, lsl #8
     db4:	d9670666 	stmdble	r7!, {r1, r2, r5, r6, r9, sl}^
     db8:	83a02f86 	movhi	r2, #536	; 0x218
     dbc:	01040200 	mrseq	r0, R12_usr
     dc0:	67066606 	strvs	r6, [r6, -r6, lsl #12]
     dc4:	4ba02fdb 	blmi	fe80cd38 <_estack+0xf67fcd38>
     dc8:	4b4c2f2f 	blmi	130ca8c <WriteSemaphore+0x12f71d0>
     dcc:	04022f2f 	streq	r2, [r2], #-3887	; 0xf2f
     dd0:	6b010100 	blvs	411d8 <WriteSemaphore+0x2b91c>
     dd4:	02000000 	andeq	r0, r0, #0
     dd8:	00004400 	andeq	r4, r0, r0, lsl #8
     ddc:	fb010200 	blx	415e6 <WriteSemaphore+0x2bd2a>
     de0:	01000d0e 	tsteq	r0, lr, lsl #26
     de4:	00010101 	andeq	r0, r1, r1, lsl #2
     de8:	00010000 	andeq	r0, r1, r0
     dec:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
     df0:	2f656d6f 	svccs	0x00656d6f
     df4:	67696e73 			; <UNDEFINED> instruction: 0x67696e73
     df8:	722f6c65 	eorvc	r6, pc, #25856	; 0x6500
     dfc:	462f6970 			; <UNDEFINED> instruction: 0x462f6970
     e00:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
     e04:	2f534f54 	svccs	0x00534f54
     e08:	6f6d6544 	svcvs	0x006d6544
     e0c:	6972442f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, lr}^
     e10:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
     e14:	70670000 	rsbvc	r0, r7, r0
     e18:	632e6f69 	teqvs	lr, #420	; 0x1a4
     e1c:	00000100 	andeq	r0, r0, r0, lsl #2
     e20:	02050000 	andeq	r0, r5, #0
     e24:	00013cc0 	andeq	r3, r1, r0, asr #25
     e28:	a0011603 	andge	r1, r1, r3, lsl #12
     e2c:	3d08a0a0 	stccc	0, cr10, [r8, #-640]	; 0xfffffd80
     e30:	3d083d08 	stccc	13, cr3, [r8, #-32]	; 0xffffffe0
     e34:	689fa09f 	ldmvs	pc, {r0, r1, r2, r3, r4, r7, sp, pc}	; <UNPREDICTABLE>
     e38:	08ca0867 	stmiaeq	sl, {r0, r1, r2, r5, r6, fp}^
     e3c:	0008023e 	andeq	r0, r8, lr, lsr r2
     e40:	01240101 	teqeq	r4, r1, lsl #2
     e44:	00020000 	andeq	r0, r2, r0
     e48:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     e4c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     e50:	0101000d 	tsteq	r1, sp
     e54:	00000101 	andeq	r0, r0, r1, lsl #2
     e58:	00000100 	andeq	r0, r0, r0, lsl #2
     e5c:	6f682f01 	svcvs	0x00682f01
     e60:	732f656d 	teqvc	pc, #457179136	; 0x1b400000
     e64:	6567696e 	strbvs	r6, [r7, #-2414]!	; 0x96e
     e68:	70722f6c 	rsbsvc	r2, r2, ip, ror #30
     e6c:	72462f69 	subvc	r2, r6, #420	; 0x1a4
     e70:	54526565 	ldrbpl	r6, [r2], #-1381	; 0x565
     e74:	442f534f 	strtmi	r5, [pc], #-847	; e7c <_start-0x7184>
     e78:	2f6f6d65 	svccs	0x006f6d65
     e7c:	76697244 	strbtvc	r7, [r9], -r4, asr #4
     e80:	00737265 	rsbseq	r7, r3, r5, ror #4
     e84:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; dd0 <_start-0x7230>
     e88:	6e732f65 	cdpvs	15, 7, cr2, cr3, cr5, {3}
     e8c:	6c656769 	stclvs	7, cr6, [r5], #-420	; 0xfffffe5c
     e90:	6970722f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r9, ip, sp, lr}^
     e94:	6572462f 	ldrbvs	r4, [r2, #-1583]!	; 0x62f
     e98:	4f545265 	svcmi	0x00545265
     e9c:	72462f53 	subvc	r2, r6, #332	; 0x14c
     ea0:	54526565 	ldrbpl	r6, [r2], #-1381	; 0x565
     ea4:	532f534f 	teqpl	pc, #1006632961	; 0x3c000001
     ea8:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     eac:	6f702f65 	svcvs	0x00702f65
     eb0:	62617472 	rsbvs	r7, r1, #1912602624	; 0x72000000
     eb4:	472f656c 	strmi	r6, [pc, -ip, ror #10]!
     eb8:	522f4343 	eorpl	r4, pc, #201326593	; 0xc000001
     ebc:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
     ec0:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
     ec4:	2f006950 	svccs	0x00006950
     ec8:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xf68
     ecc:	696e732f 	stmdbvs	lr!, {r0, r1, r2, r3, r5, r8, r9, ip, sp, lr}^
     ed0:	2f6c6567 	svccs	0x006c6567
     ed4:	2f697072 	svccs	0x00697072
     ed8:	65657246 	strbvs	r7, [r5, #-582]!	; 0x246
     edc:	534f5452 	movtpl	r5, #62546	; 0xf452
     ee0:	6572462f 	ldrbvs	r4, [r2, #-1583]!	; 0x62f
     ee4:	4f545265 	svcmi	0x00545265
     ee8:	6f532f53 	svcvs	0x00532f53
     eec:	65637275 	strbvs	r7, [r3, #-629]!	; 0x275
     ef0:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     ef4:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
     ef8:	61750000 	cmnvs	r5, r0
     efc:	632e7472 	teqvs	lr, #1912602624	; 0x72000000
     f00:	00000100 	andeq	r0, r0, r0, lsl #2
     f04:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xf70
     f08:	7263616d 	rsbvc	r6, r3, #1073741851	; 0x4000001b
     f0c:	00682e6f 	rsbeq	r2, r8, pc, ror #28
     f10:	71000002 	tstvc	r0, r2
     f14:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
     f18:	0300682e 	movweq	r6, #2094	; 0x82e
     f1c:	65730000 	ldrbvs	r0, [r3, #-0]!
     f20:	7268706d 	rsbvc	r7, r8, #109	; 0x6d
     f24:	0300682e 	movweq	r6, #2094	; 0x82e
     f28:	00000000 	andeq	r0, r0, r0
     f2c:	3e3c0205 	cdpcc	2, 3, cr0, cr12, cr5, {0}
     f30:	4c190001 	ldcmi	0, cr0, [r9], {1}
     f34:	01040200 	mrseq	r0, R12_usr
     f38:	06580806 	ldrbeq	r0, [r8], -r6, lsl #16
     f3c:	040200d7 	streq	r0, [r2], #-215	; 0xd7
     f40:	58080601 	stmdapl	r8, {r0, r9, sl}
     f44:	032fd906 	teqeq	pc, #98304	; 0x18000
     f48:	d884820d 	stmle	r4, {r0, r2, r3, r9, pc}
     f4c:	01040200 	mrseq	r0, R12_usr
     f50:	a0062e06 	andge	r2, r6, r6, lsl #28
     f54:	be2fd8a0 	cdplt	8, 2, cr13, cr15, cr0, {5}
     f58:	0200d84d 	andeq	sp, r0, #5046272	; 0x4d0000
     f5c:	2e060104 	adfcss	f0, f6, f4
     f60:	d868a006 	stmdale	r8!, {r1, r2, sp, pc}^
     f64:	000a022f 	andeq	r0, sl, pc, lsr #4
     f68:	00690101 	rsbeq	r0, r9, r1, lsl #2
     f6c:	00020000 	andeq	r0, r2, r0
     f70:	0000003d 	andeq	r0, r0, sp, lsr r0
     f74:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     f78:	0101000d 	tsteq	r1, sp
     f7c:	00000101 	andeq	r0, r0, r1, lsl #2
     f80:	00000100 	andeq	r0, r0, r0, lsl #2
     f84:	6f682f01 	svcvs	0x00682f01
     f88:	732f656d 	teqvc	pc, #457179136	; 0x1b400000
     f8c:	6567696e 	strbvs	r6, [r7, #-2414]!	; 0x96e
     f90:	70722f6c 	rsbsvc	r2, r2, ip, ror #30
     f94:	72462f69 	subvc	r2, r6, #420	; 0x1a4
     f98:	54526565 	ldrbpl	r6, [r2], #-1381	; 0x565
     f9c:	442f534f 	strtmi	r5, [pc], #-847	; fa4 <_start-0x705c>
     fa0:	006f6d65 	rsbeq	r6, pc, r5, ror #26
     fa4:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
     fa8:	632e6f69 	teqvs	lr, #420	; 0x1a4
     fac:	00000100 	andeq	r0, r0, r0, lsl #2
     fb0:	02050000 	andeq	r0, r5, #0
     fb4:	00013ff4 	strdeq	r3, [r1], -r4
     fb8:	83010a03 	movwhi	r0, #6659	; 0x1a03
     fbc:	4b4b6967 	blmi	12db560 <WriteSemaphore+0x12c5ca4>
     fc0:	002f834d 	eoreq	r8, pc, sp, asr #6
     fc4:	06010402 	streq	r0, [r1], -r2, lsl #8
     fc8:	02003c08 	andeq	r3, r0, #2048	; 0x800
     fcc:	49060104 	stmdbmi	r6, {r2, r8}
     fd0:	06022f84 	streq	r2, [r2], -r4, lsl #31
     fd4:	85010100 	strhi	r0, [r1, #-256]	; 0x100
     fd8:	02000000 	andeq	r0, r0, #0
     fdc:	00003c00 	andeq	r3, r0, r0, lsl #24
     fe0:	fb010200 	blx	417ea <WriteSemaphore+0x2bf2e>
     fe4:	01000d0e 	tsteq	r0, lr, lsl #26
     fe8:	00010101 	andeq	r0, r1, r1, lsl #2
     fec:	00010000 	andeq	r0, r1, r0
     ff0:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
     ff4:	2f656d6f 	svccs	0x00656d6f
     ff8:	67696e73 			; <UNDEFINED> instruction: 0x67696e73
     ffc:	722f6c65 	eorvc	r6, pc, #25856	; 0x6500
    1000:	462f6970 			; <UNDEFINED> instruction: 0x462f6970
    1004:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
    1008:	2f534f54 	svccs	0x00534f54
    100c:	6f6d6544 	svcvs	0x006d6544
    1010:	616d0000 	cmnvs	sp, r0
    1014:	632e6e69 	teqvs	lr, #1680	; 0x690
    1018:	00000100 	andeq	r0, r0, r0, lsl #2
    101c:	02050000 	andeq	r0, r5, #0
    1020:	00014098 	muleq	r1, r8, r0
    1024:	0402001a 	streq	r0, [r2], #-26
    1028:	02008601 	andeq	r8, r0, #1048576	; 0x100000
    102c:	00670104 	rsbeq	r0, r7, r4, lsl #2
    1030:	67010402 	strvs	r0, [r1, -r2, lsl #8]
    1034:	02008431 	andeq	r8, r0, #822083584	; 0x31000000
    1038:	004c0104 	subeq	r0, ip, r4, lsl #2
    103c:	67010402 	strvs	r0, [r1, -r2, lsl #8]
    1040:	01040200 	mrseq	r0, R12_usr
    1044:	04020083 	streq	r0, [r2], #-131	; 0x83
    1048:	67324b01 	ldrvs	r4, [r2, -r1, lsl #22]!
    104c:	3068302f 	rsbcc	r3, r8, pc, lsr #32
    1050:	0891084d 	ldmeq	r1, {r0, r2, r3, r6, fp}
    1054:	02003192 	andeq	r3, r0, #-2147483612	; 0x80000024
    1058:	024b0104 	subeq	r0, fp, #1
    105c:	0101000e 	tsteq	r1, lr

Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	5152496e 	cmppl	r2, lr, ror #18
       4:	43787000 	cmnmi	r8, #0
       8:	0065646f 	rsbeq	r6, r5, pc, ror #8
       c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; ffffff58 <_estack+0xf7feff58>
      10:	6e732f65 	cdpvs	15, 7, cr2, cr3, cr5, {3}
      14:	6c656769 	stclvs	7, cr6, [r5], #-420	; 0xfffffe5c
      18:	6970722f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r9, ip, sp, lr}^
      1c:	6572462f 	ldrbvs	r4, [r2, #-1583]!	; 0x62f
      20:	4f545265 	svcmi	0x00545265
      24:	72462f53 	subvc	r2, r6, #332	; 0x14c
      28:	54526565 	ldrbpl	r6, [r2], #-1381	; 0x565
      2c:	532f534f 	teqpl	pc, #1006632961	; 0x3c000001
      30:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
      34:	6f702f65 	svcvs	0x00702f65
      38:	62617472 	rsbvs	r7, r1, #1912602624	; 0x72000000
      3c:	472f656c 	strmi	r6, [pc, -ip, ror #10]!
      40:	522f4343 	eorpl	r4, pc, #201326593	; 0xc000001
      44:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
      48:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
      4c:	702f6950 	eorvc	r6, pc, r0, asr r9	; <UNPREDICTABLE>
      50:	2e74726f 	cdpcs	2, 7, cr7, cr4, cr15, {3}
      54:	6f700063 	svcvs	0x00700063
      58:	69547472 	ldmdbvs	r4, {r1, r4, r5, r6, sl, ip, sp, lr}^
      5c:	79546b63 	ldmdbvc	r4, {r0, r1, r5, r6, r8, r9, fp, sp, lr}^
      60:	70006570 	andvc	r6, r0, r0, ror r5
      64:	65537672 	ldrbvs	r7, [r3, #-1650]	; 0x672
      68:	54707574 	ldrbtpl	r7, [r0], #-1396	; 0x574
      6c:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
      70:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xe49
      74:	70757272 	rsbsvc	r7, r5, r2, ror r2
      78:	50700074 	rsbspl	r0, r0, r4, ror r0
      7c:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
      80:	73694400 	cmnvc	r9, #0
      84:	656c6261 	strbvs	r6, [ip, #-609]!	; 0x261
      88:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xe49
      8c:	70757272 	rsbsvc	r7, r5, r2, ror r2
      90:	6e450074 	mcrvs	0, 2, r0, cr5, cr4, {3}
      94:	656c6261 	strbvs	r6, [ip, #-609]!	; 0x261
      98:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xe49
      9c:	70757272 	rsbsvc	r7, r5, r2, ror r2
      a0:	78700074 	ldmdavc	r0!, {r2, r4, r5, r6}^
      a4:	6769724f 	strbvs	r7, [r9, -pc, asr #4]!
      a8:	6c616e69 	stclvs	14, cr6, [r1], #-420	; 0xfffffe5c
      ac:	00534f54 	subseq	r4, r3, r4, asr pc
      b0:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
      b4:	6e752074 	mrcvs	0, 3, r2, cr5, cr4, {3}
      b8:	6e676973 	mcrvs	9, 3, r6, cr7, cr3, {3}
      bc:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
      c0:	7000746e 	andvc	r7, r0, lr, ror #8
      c4:	53415464 	movtpl	r5, #5220	; 0x1464
      c8:	4f435f4b 	svcmi	0x00435f4b
      cc:	52004544 	andpl	r4, r0, #285212672	; 0x11000000
      d0:	73696765 	cmnvc	r9, #26476544	; 0x1940000
      d4:	49726574 	ldmdbmi	r2!, {r2, r4, r5, r6, r8, sl, sp, lr}^
      d8:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
      dc:	74707572 	ldrbtvc	r7, [r0], #-1394	; 0x572
      e0:	6f507600 	svcvs	0x00507600
      e4:	6e457472 	mcrvs	4, 2, r7, cr5, cr2, {3}
      e8:	68635364 	stmdavs	r3!, {r2, r5, r6, r8, r9, ip, lr}^
      ec:	6c756465 	cfldrdvs	mvd6, [r5], #-404	; 0xfffffe6c
      f0:	44007265 	strmi	r7, [r0], #-613	; 0x265
      f4:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
      f8:	6e49656c 	cdpvs	5, 4, cr6, cr9, cr12, {3}
      fc:	72726574 	rsbsvc	r6, r2, #486539264	; 0x1d000000
     100:	73747075 	cmnvc	r4, #117	; 0x75
     104:	69547600 	ldmdbvs	r4, {r9, sl, ip, sp, lr}^
     108:	53496b63 	movtpl	r6, #39779	; 0x9b63
     10c:	69730052 	ldmdbvs	r3!, {r1, r4, r6}^
     110:	7974657a 	ldmdbvc	r4!, {r1, r3, r4, r5, r6, r8, sl, sp, lr}^
     114:	70006570 	andvc	r6, r0, r0, ror r5
     118:	72615076 	rsbvc	r5, r1, #118	; 0x76
     11c:	74656d61 	strbtvc	r6, [r5], #-3425	; 0xd61
     120:	00737265 	rsbseq	r7, r3, r5, ror #4
     124:	67655270 			; <UNDEFINED> instruction: 0x67655270
     128:	78700073 	ldmdavc	r0!, {r0, r1, r4, r5, r6}^
     12c:	4f706f54 	svcmi	0x00706f54
     130:	61745366 	cmnvs	r4, r6, ror #6
     134:	47006b63 	strmi	r6, [r0, -r3, ror #22]
     138:	4320554e 	teqmi	r0, #327155712	; 0x13800000
     13c:	372e3420 	strcc	r3, [lr, -r0, lsr #8]!
     140:	3220332e 	eorcc	r3, r0, #-1207959552	; 0xb8000000
     144:	30333130 	eorscc	r3, r3, r0, lsr r1
     148:	20323133 	eorscs	r3, r2, r3, lsr r1
     14c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
     150:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0x165
     154:	415b2029 	cmpmi	fp, r9, lsr #32
     158:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff40e <_estack+0xf7fef40e>
     15c:	6465626d 	strbtvs	r6, [r5], #-621	; 0x26d
     160:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
     164:	2d375f34 	ldccs	15, cr5, [r7, #-208]!	; 0xffffff30
     168:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
     16c:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
     170:	73697665 	cmnvc	r9, #105906176	; 0x6500000
     174:	206e6f69 	rsbcs	r6, lr, r9, ror #30
     178:	36363931 			; <UNDEFINED> instruction: 0x36363931
     17c:	005d3531 	subseq	r3, sp, r1, lsr r5
     180:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
     184:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xe49
     188:	70757272 	rsbsvc	r7, r5, r2, ror r2
     18c:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
     190:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; ffffffc8 <_estack+0xf7feffc8>
     194:	0072656c 	rsbseq	r6, r2, ip, ror #10
     198:	4d43425f 	sfmmi	f4, 2, [r3, #-380]	; 0xfffffe84
     19c:	35333832 	ldrcc	r3, [r3, #-2098]!	; 0x832
     1a0:	4d49545f 	cfstrdmi	mvd5, [r9, #-380]	; 0xfffffe84
     1a4:	525f5245 	subspl	r5, pc, #1342177284	; 0x50000004
     1a8:	00534745 	subseq	r4, r3, r5, asr #14
     1ac:	726f5078 	rsbvc	r5, pc, #120	; 0x78
     1b0:	61745374 	cmnvs	r4, r4, ror r3
     1b4:	63537472 	cmpvs	r3, #1912602624	; 0x72000000
     1b8:	75646568 	strbvc	r6, [r4, #-1384]!	; 0x568
     1bc:	0072656c 	rsbseq	r6, r2, ip, ror #10
     1c0:	6f507870 	svcvs	0x00507870
     1c4:	6e497472 	mcrvs	4, 2, r7, cr9, cr2, {3}
     1c8:	61697469 	cmnvs	r9, r9, ror #8
     1cc:	6573696c 	ldrbvs	r6, [r3, #-2412]!	; 0x96c
     1d0:	63617453 	cmnvs	r1, #1392508928	; 0x53000000
     1d4:	6c75006b 	ldclvs	0, cr0, [r5], #-428	; 0xfffffe54
     1d8:	706d6f43 	rsbvc	r6, sp, r3, asr #30
     1dc:	4d657261 	sfmmi	f7, 2, [r5, #-388]!	; 0xfffffe7c
     1e0:	68637461 	stmdavs	r3!, {r0, r5, r6, sl, ip, sp, lr}^
     1e4:	6f682f00 	svcvs	0x00682f00
     1e8:	732f656d 	teqvc	pc, #457179136	; 0x1b400000
     1ec:	6567696e 	strbvs	r6, [r7, #-2414]!	; 0x96e
     1f0:	70722f6c 	rsbsvc	r2, r2, ip, ror #30
     1f4:	72462f69 	subvc	r2, r6, #420	; 0x1a4
     1f8:	54526565 	ldrbpl	r6, [r2], #-1381	; 0x565
     1fc:	462f534f 	strtmi	r5, [pc], -pc, asr #6
     200:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
     204:	2f534f54 	svccs	0x00534f54
     208:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     20c:	702f6563 	eorvc	r6, pc, r3, ror #10
     210:	6174726f 	cmnvs	r4, pc, ror #4
     214:	2f656c62 	svccs	0x00656c62
     218:	2f434347 	svccs	0x00434347
     21c:	70736152 	rsbsvc	r6, r3, r2, asr r1
     220:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
     224:	2f695079 	svccs	0x00695079
     228:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xf70
     22c:	2e727369 	cdpcs	3, 7, cr7, cr2, cr9, {3}
     230:	5f670063 	svcpl	0x00670063
     234:	61745362 	cmnvs	r4, r2, ror #6
     238:	64657472 	strbtvs	r7, [r5], #-1138	; 0x472
     23c:	6f507600 	svcvs	0x00507600
     240:	69597472 	ldmdbvs	r9, {r1, r4, r5, r6, sl, ip, sp, lr}^
     244:	50646c65 	rsbpl	r6, r4, r5, ror #24
     248:	65636f72 	strbvs	r6, [r3, #-3954]!	; 0xf72
     24c:	726f7373 	rsbvc	r7, pc, #-872415231	; 0xcc000001
     250:	72467600 	subvc	r7, r6, #0
     254:	54526565 	ldrbpl	r6, [r2], #-1381	; 0x565
     258:	495f534f 	ldmdbmi	pc, {r0, r1, r2, r3, r6, r8, r9, ip, lr}^	; <UNPREDICTABLE>
     25c:	76005253 			; <UNDEFINED> instruction: 0x76005253
     260:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xf50
     264:	65746e45 	ldrbvs	r6, [r4, #-3653]!	; 0xe45
     268:	69724372 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, r9, lr}^
     26c:	61636974 	smcvs	13972	; 0x3694
     270:	7870006c 	ldmdavc	r0!, {r2, r3, r5, r6}^
     274:	72727543 	rsbsvc	r7, r2, #281018368	; 0x10c00000
     278:	54746e65 	ldrbtpl	r6, [r4], #-3685	; 0xe65
     27c:	76004243 	strvc	r4, [r0], -r3, asr #4
     280:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xf50
     284:	53525349 	cmppl	r2, #603979777	; 0x24000001
     288:	74726174 	ldrbtvc	r6, [r2], #-372	; 0x174
     28c:	73726946 	cmnvc	r2, #1146880	; 0x118000
     290:	73615474 	cmnvc	r1, #1946157056	; 0x74000000
     294:	5076006b 	rsbspl	r0, r6, fp, rrx
     298:	4574726f 	ldrbmi	r7, [r4, #-623]!	; 0x26f
     29c:	43746978 	cmnmi	r4, #1966080	; 0x1e0000
     2a0:	69746972 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     2a4:	006c6163 	rsbeq	r6, ip, r3, ror #2
     2a8:	72436c75 	subvc	r6, r3, #29952	; 0x7500
     2ac:	63697469 	cmnvs	r9, #1761607680	; 0x69000000
     2b0:	654e6c61 	strbvs	r6, [lr, #-3169]	; 0xc61
     2b4:	6e697473 	mcrvs	4, 3, r7, cr9, cr3, {3}
     2b8:	78700067 	ldmdavc	r0!, {r0, r1, r2, r5, r6}^
     2bc:	6c626e55 	stclvs	14, cr6, [r2], #-340	; 0xfffffeac
     2c0:	656b636f 	strbvs	r6, [fp, #-879]!	; 0x36f
     2c4:	43524364 	cmpmi	r2, #-1879048191	; 0x90000001
     2c8:	78700042 	ldmdavc	r0!, {r1, r6}^
     2cc:	706d6554 	rsbvc	r6, sp, r4, asr r5
     2d0:	6f437600 	svcvs	0x00437600
     2d4:	74756f52 	ldrbtvc	r6, [r5], #-3922	; 0xf52
     2d8:	41656e69 	cmnmi	r5, r9, ror #28
     2dc:	6f546464 	svcvs	0x00546464
     2e0:	616c6544 	cmnvs	ip, r4, asr #10
     2e4:	4c646579 	cfstr64mi	mvdx6, [r4], #-484	; 0xfffffe1c
     2e8:	00747369 	rsbseq	r7, r4, r9, ror #6
     2ec:	6f437670 	svcvs	0x00437670
     2f0:	6961746e 	stmdbvs	r1!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
     2f4:	0072656e 	rsbseq	r6, r2, lr, ror #10
     2f8:	6f437870 	svcvs	0x00437870
     2fc:	74756f52 	ldrbtvc	r6, [r5], #-3922	; 0xf52
     300:	46656e69 	strbtmi	r6, [r5], -r9, ror #28
     304:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xe75
     308:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     30c:	73615078 	cmnvc	r1, #120	; 0x78
     310:	54646573 	strbtpl	r6, [r4], #-1395	; 0x573
     314:	736b6369 	cmnvc	fp, #-1543503871	; 0xa4000001
     318:	49787000 	ldmdbmi	r8!, {ip, sp, lr}^
     31c:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
     320:	74497800 	strbvc	r7, [r9], #-2048	; 0x800
     324:	61566d65 	cmpvs	r6, r5, ror #26
     328:	0065756c 	rsbeq	r7, r5, ip, ror #10
     32c:	73694c78 	cmnvc	r9, #30720	; 0x7800
     330:	646e4574 	strbtvs	r4, [lr], #-1396	; 0x574
     334:	4f767000 	svcmi	0x00767000
     338:	72656e77 	rsbvc	r6, r5, #1904	; 0x770
     33c:	614c7800 	cmpvs	ip, r0, lsl #16
     340:	69547473 	ldmdbvs	r4, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
     344:	6f436b63 	svcvs	0x00436b63
     348:	00746e75 	rsbseq	r6, r4, r5, ror lr
     34c:	526f4378 	rsbpl	r4, pc, #-536870911	; 0xe0000001
     350:	6974756f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
     354:	6954656e 	ldmdbvs	r4, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
     358:	6f436b63 	svcvs	0x00436b63
     35c:	00746e75 	rsbseq	r6, r4, r5, ror lr
     360:	53494c78 	movtpl	r4, #40056	; 0x9c78
     364:	54495f54 	strbpl	r5, [r9], #-3924	; 0xf54
     368:	70004d45 	andvc	r4, r0, r5, asr #26
     36c:	6e6f4378 	mcrvs	3, 3, r4, cr15, cr8, {3}
     370:	694c7473 	stmdbvs	ip, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
     374:	75007473 	strvc	r7, [r0, #-1139]	; 0x473
     378:	706f5478 	rsbvc	r5, pc, r8, ror r4	; <UNPREDICTABLE>
     37c:	6f526f43 	svcvs	0x00526f43
     380:	6e697475 	mcrvs	4, 3, r7, cr9, cr5, {3}
     384:	61655265 	cmnvs	r5, r5, ror #4
     388:	72507964 	subsvc	r7, r0, #1638400	; 0x190000
     38c:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     390:	78007974 	stmdavc	r0, {r2, r4, r5, r6, r8, fp, ip, sp, lr}
     394:	616c6544 	cmnvs	ip, r4, asr #10
     398:	43646579 	cmnmi	r4, #507510784	; 0x1e400000
     39c:	756f526f 	strbvc	r5, [pc, #-623]!	; 135 <_start-0x7ecb>
     3a0:	656e6974 	strbvs	r6, [lr, #-2420]!	; 0x974
     3a4:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0x94c
     3a8:	44780031 	ldrbtmi	r0, [r8], #-49	; 0x31
     3ac:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
     3b0:	6f436465 	svcvs	0x00436465
     3b4:	74756f52 	ldrbtvc	r6, [r5], #-3922	; 0xf52
     3b8:	4c656e69 	stclmi	14, cr6, [r5], #-420	; 0xfffffe5c
     3bc:	32747369 	rsbscc	r7, r4, #-1543503871	; 0xa4000001
     3c0:	726f6300 	rsbvc	r6, pc, #0
     3c4:	42435243 	submi	r5, r3, #805306372	; 0x30000004
     3c8:	43787000 	cmnmi	r8, #0
     3cc:	00424352 	subeq	r4, r2, r2, asr r3
     3d0:	72507870 	subsvc	r7, r0, #7340032	; 0x700000
     3d4:	6f697665 	svcvs	0x00697665
     3d8:	70007375 	andvc	r7, r0, r5, ror r3
     3dc:	526f4378 	rsbpl	r4, pc, #-536870911	; 0xe0000001
     3e0:	6974756f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
     3e4:	6f43656e 	svcvs	0x0043656e
     3e8:	63006564 	movwvs	r6, #1380	; 0x564
     3ec:	6f43726f 	svcvs	0x0043726f
     3f0:	74756f52 	ldrbtvc	r6, [r5], #-3922	; 0xf52
     3f4:	43656e69 	cmnmi	r5, #1680	; 0x690
     3f8:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
     3fc:	6c426c6f 	mcrrvs	12, 6, r6, r2, cr15
     400:	006b636f 	rsbeq	r6, fp, pc, ror #6
     404:	526f4378 	rsbpl	r4, pc, #-536870911	; 0xe0000001
     408:	6974756f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
     40c:	6552656e 	ldrbvs	r6, [r2, #-1390]	; 0x56e
     410:	65766f6d 	ldrbvs	r6, [r6, #-3949]!	; 0xf6d
     414:	6d6f7246 	sfmvs	f7, 2, [pc, #-280]!	; 304 <_start-0x7cfc>
     418:	6e657645 	cdpvs	6, 6, cr7, cr5, cr5, {2}
     41c:	73694c74 	cmnvc	r9, #29696	; 0x7400
     420:	78700074 	ldmdavc	r0!, {r2, r4, r5, r6}^
     424:	7265764f 	rsbvc	r7, r5, #82837504	; 0x4f00000
     428:	776f6c66 	strbvc	r6, [pc, -r6, ror #24]!
     42c:	616c6544 	cmnvs	ip, r4, asr #10
     430:	43646579 	cmnmi	r4, #507510784	; 0x1e400000
     434:	756f526f 	strbvc	r5, [pc, #-623]!	; 1cd <_start-0x7e33>
     438:	656e6974 	strbvs	r6, [lr, #-2420]!	; 0x974
     43c:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0x94c
     440:	52787000 	rsbspl	r7, r8, #0
     444:	79646165 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sp, lr}^
     448:	6f526f43 	svcvs	0x00526f43
     44c:	6e697475 	mcrvs	4, 3, r7, cr9, cr5, {3}
     450:	73694c65 	cmnvc	r9, #25856	; 0x6500
     454:	75007374 	strvc	r7, [r0, #-884]	; 0x374
     458:	646e4978 	strbtvs	r4, [lr], #-2424	; 0x978
     45c:	78007865 	stmdavc	r0, {r0, r2, r5, r6, fp, ip, sp, lr}
     460:	696e694d 	stmdbvs	lr!, {r0, r2, r3, r6, r8, fp, sp, lr}^
     464:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0x94c
     468:	6d657449 	cfstrdvs	mvd7, [r5, #-292]!	; 0xfffffedc
     46c:	6f437800 	svcvs	0x00437800
     470:	74756f52 	ldrbtvc	r6, [r5], #-3922	; 0xf52
     474:	43656e69 	cmnmi	r5, #1680	; 0x690
     478:	74616572 	strbtvc	r6, [r1], #-1394	; 0x572
     47c:	78750065 	ldmdavc	r5!, {r0, r2, r5, r6}^
     480:	626d754e 	rsbvs	r7, sp, #327155712	; 0x13800000
     484:	664f7265 	strbvs	r7, [pc], -r5, ror #4
     488:	6d657449 	cfstrdvs	mvd7, [r5, #-292]!	; 0xfffffedc
     48c:	72700073 	rsbsvc	r0, r0, #115	; 0x73
     490:	65684376 	strbvs	r4, [r8, #-886]!	; 0x376
     494:	65506b63 	ldrbvs	r6, [r0, #-2915]	; 0xb63
     498:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
     49c:	61655267 	cmnvs	r5, r7, ror #4
     4a0:	694c7964 	stmdbvs	ip, {r2, r5, r6, r8, fp, ip, sp, lr}^
     4a4:	75007473 	strvc	r7, [r0, #-1139]	; 0x473
     4a8:	69725078 	ldmdbvs	r2!, {r3, r4, r5, r6, ip, lr}^
     4ac:	7469726f 	strbtvc	r7, [r9], #-623	; 0x26f
     4b0:	43780079 	cmnmi	r8, #121	; 0x79
     4b4:	756f526f 	strbvc	r5, [pc, #-623]!	; 24d <_start-0x7db3>
     4b8:	656e6974 	strbvs	r6, [lr, #-2420]!	; 0x974
     4bc:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
     4c0:	7800656c 	stmdavc	r0, {r2, r3, r5, r6, r8, sl, sp, lr}
     4c4:	646e6550 	strbtvs	r6, [lr], #-1360	; 0x550
     4c8:	52676e69 	rsbpl	r6, r7, #1680	; 0x690
     4cc:	79646165 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sp, lr}^
     4d0:	6f526f43 	svcvs	0x00526f43
     4d4:	6e697475 	mcrvs	4, 3, r7, cr9, cr5, {3}
     4d8:	73694c65 	cmnvc	r9, #25856	; 0x6500
     4dc:	78700074 	ldmdavc	r0!, {r2, r4, r5, r6}^
     4e0:	7478654e 	ldrbtvc	r6, [r8], #-1358	; 0x54e
     4e4:	45787000 	ldrbmi	r7, [r8, #-0]!
     4e8:	746e6576 	strbtvc	r6, [lr], #-1398	; 0x576
     4ec:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0x94c
     4f0:	43787000 	cmnmi	r8, #0
     4f4:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0x275
     4f8:	6f43746e 	svcvs	0x0043746e
     4fc:	74756f52 	ldrbtvc	r6, [r5], #-3922	; 0xf52
     500:	00656e69 	rsbeq	r6, r5, r9, ror #28
     504:	6d695478 	cfstrdvs	mvd5, [r9, #-480]!	; 0xfffffe20
     508:	576f5465 	strbpl	r5, [pc, -r5, ror #8]!
     50c:	00656b61 	rsbeq	r6, r5, r1, ror #22
     510:	73694c78 	cmnvc	r9, #30720	; 0x7800
     514:	65744974 	ldrbvs	r4, [r4, #-2420]!	; 0x974
     518:	4376006d 	cmnmi	r6, #109	; 0x6d
     51c:	756f526f 	strbvc	r5, [pc, #-623]!	; 2b5 <_start-0x7d4b>
     520:	656e6974 	strbvs	r6, [lr, #-2420]!	; 0x974
     524:	65686353 	strbvs	r6, [r8, #-851]!	; 0x353
     528:	656c7564 	strbvs	r7, [ip, #-1380]!	; 0x564
     52c:	43787000 	cmnmi	r8, #0
     530:	756f526f 	strbvc	r5, [pc, #-623]!	; 2c9 <_start-0x7d37>
     534:	656e6974 	strbvs	r6, [lr, #-2420]!	; 0x974
     538:	53787500 	cmnpl	r8, #0
     53c:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0x174
     540:	44787000 	ldrbtmi	r7, [r8], #-0
     544:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
     548:	6f436465 	svcvs	0x00436465
     54c:	74756f52 	ldrbtvc	r6, [r5], #-3922	; 0xf52
     550:	4c656e69 	stclmi	14, cr6, [r5], #-420	; 0xfffffe5c
     554:	00747369 	rsbseq	r7, r4, r9, ror #6
     558:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 4a4 <_start-0x7b5c>
     55c:	6e732f65 	cdpvs	15, 7, cr2, cr3, cr5, {3}
     560:	6c656769 	stclvs	7, cr6, [r5], #-420	; 0xfffffe5c
     564:	6970722f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r9, ip, sp, lr}^
     568:	6572462f 	ldrbvs	r4, [r2, #-1583]!	; 0x62f
     56c:	4f545265 	svcmi	0x00545265
     570:	72462f53 	subvc	r2, r6, #332	; 0x14c
     574:	54526565 	ldrbpl	r6, [r2], #-1381	; 0x565
     578:	532f534f 	teqpl	pc, #1006632961	; 0x3c000001
     57c:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     580:	72632f65 	rsbvc	r2, r3, #404	; 0x194
     584:	6974756f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
     588:	632e656e 	teqvs	lr, #461373440	; 0x1b800000
     58c:	494d7800 	stmdbmi	sp, {fp, ip, sp, lr}^
     590:	4c5f494e 	mrrcmi	9, 4, r4, pc, cr14	; <UNPREDICTABLE>
     594:	5f545349 	svcpl	0x00545349
     598:	4d455449 	cfstrdmi	mvd5, [r5, #-292]	; 0xfffffedc
     59c:	494c7800 	stmdbmi	ip, {fp, ip, sp, lr}^
     5a0:	70005453 	andvc	r5, r0, r3, asr r4
     5a4:	6e497672 	mcrvs	6, 2, r7, cr9, cr2, {3}
     5a8:	61697469 	cmnvs	r9, r9, ror #8
     5ac:	6573696c 	ldrbvs	r6, [r3, #-2412]!	; 0x96c
     5b0:	6f526f43 	svcvs	0x00526f43
     5b4:	6e697475 	mcrvs	4, 3, r7, cr9, cr5, {3}
     5b8:	73694c65 	cmnvc	r9, #25856	; 0x6500
     5bc:	78007374 	stmdavc	r0, {r2, r4, r5, r6, r8, r9, ip, sp, lr}
     5c0:	6b636954 	blvs	18dab18 <WriteSemaphore+0x18c525c>
     5c4:	446f5473 	strbtmi	r5, [pc], #-1139	; 5cc <_start-0x7a34>
     5c8:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
     5cc:	65477800 	strbvs	r7, [r7, #-2048]	; 0x800
     5d0:	6972656e 	ldmdbvs	r2!, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
     5d4:	73694c63 	cmnvc	r9, #25344	; 0x6300
     5d8:	65744974 	ldrbvs	r4, [r4, #-2420]!	; 0x974
     5dc:	4578006d 	ldrbmi	r0, [r8, #-109]!	; 0x6d
     5e0:	746e6576 	strbtvc	r6, [lr], #-1398	; 0x576
     5e4:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0x94c
     5e8:	6d657449 	cfstrdvs	mvd7, [r5, #-292]!	; 0xfffffedc
     5ec:	76727000 	ldrbtvc	r7, [r2], -r0
     5f0:	63656843 	cmnvs	r5, #4390912	; 0x430000
     5f4:	6c65446b 	cfstrdvs	mvd4, [r5], #-428	; 0xfffffe54
     5f8:	64657961 	strbtvs	r7, [r5], #-2401	; 0x961
     5fc:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0x94c
     600:	43726300 	cmnmi	r2, #0
     604:	554f524f 	strbpl	r5, [pc, #-591]	; 3bd <_start-0x7c43>
     608:	454e4954 	strbmi	r4, [lr, #-2388]	; 0x954
     60c:	444f435f 	strbmi	r4, [pc], #-863	; 614 <_start-0x79ec>
     610:	4c760045 	ldclmi	0, cr0, [r6], #-276	; 0xfffffeec
     614:	49747369 	ldmdbmi	r4!, {r0, r3, r5, r6, r8, r9, ip, sp, lr}^
     618:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
     61c:	73696c61 	cmnvc	r9, #24832	; 0x6100
     620:	4c760065 	ldclmi	0, cr0, [r6], #-404	; 0xfffffe6c
     624:	49747369 	ldmdbmi	r4!, {r0, r3, r5, r6, r8, r9, ip, sp, lr}^
     628:	7265736e 	rsbvc	r7, r5, #-1207959551	; 0xb8000001
     62c:	68730074 	ldmdavs	r3!, {r2, r4, r5, r6}^
     630:	2074726f 	rsbscs	r7, r4, pc, ror #4
     634:	00746e69 	rsbseq	r6, r4, r9, ror #28
     638:	73694c76 	cmnvc	r9, #30208	; 0x7600
     63c:	6d655274 	sfmvs	f5, 2, [r5, #-464]!	; 0xfffffe30
     640:	0065766f 	rsbeq	r7, r5, pc, ror #12
     644:	6c615678 	stclvs	6, cr5, [r1], #-480	; 0xfffffe20
     648:	664f6575 			; <UNDEFINED> instruction: 0x664f6575
     64c:	65736e49 	ldrbvs	r6, [r3, #-3657]!	; 0xe49
     650:	6f697472 	svcvs	0x00697472
     654:	6f6c006e 	svcvs	0x006c006e
     658:	6c20676e 	stcvs	7, cr6, [r0], #-440	; 0xfffffe48
     65c:	20676e6f 	rsbcs	r6, r7, pc, ror #28
     660:	00746e69 	rsbseq	r6, r4, r9, ror #28
     664:	654e7870 	strbvs	r7, [lr, #-2160]	; 0x870
     668:	73694c77 	cmnvc	r9, #30464	; 0x7700
     66c:	65744974 	ldrbvs	r4, [r4, #-2420]!	; 0x974
     670:	6e75006d 	cdpvs	0, 7, cr0, cr5, cr13, {3}
     674:	6e676973 	mcrvs	9, 3, r6, cr7, cr3, {3}
     678:	63206465 	teqvs	r0, #1694498816	; 0x65000000
     67c:	00726168 	rsbseq	r6, r2, r8, ror #2
     680:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
     684:	6e6f6c20 	cdpvs	12, 6, cr6, cr15, cr0, {1}
     688:	6e752067 	cdpvs	0, 7, cr2, cr5, cr7, {3}
     68c:	6e676973 	mcrvs	9, 3, r6, cr7, cr3, {3}
     690:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
     694:	7000746e 	andvc	r7, r0, lr, ror #8
     698:	65744978 	ldrbvs	r4, [r4, #-2424]!	; 0x978
     69c:	6f746172 	svcvs	0x00746172
     6a0:	4c760072 	ldclmi	0, cr0, [r6], #-456	; 0xfffffe38
     6a4:	49747369 	ldmdbmi	r4!, {r0, r3, r5, r6, r8, r9, ip, sp, lr}^
     6a8:	7265736e 	rsbvc	r7, r5, #-1207959551	; 0xb8000001
     6ac:	646e4574 	strbtvs	r4, [lr], #-1396	; 0x574
     6b0:	49787000 	ldmdbmi	r8!, {ip, sp, lr}^
     6b4:	546d6574 	strbtpl	r6, [sp], #-1396	; 0x574
     6b8:	6d65526f 	sfmvs	f5, 2, [r5, #-444]!	; 0xfffffe44
     6bc:	0065766f 	rsbeq	r7, r5, pc, ror #12
     6c0:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 60c <_start-0x79f4>
     6c4:	6e732f65 	cdpvs	15, 7, cr2, cr3, cr5, {3}
     6c8:	6c656769 	stclvs	7, cr6, [r5], #-420	; 0xfffffe5c
     6cc:	6970722f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r9, ip, sp, lr}^
     6d0:	6572462f 	ldrbvs	r4, [r2, #-1583]!	; 0x62f
     6d4:	4f545265 	svcmi	0x00545265
     6d8:	72462f53 	subvc	r2, r6, #332	; 0x14c
     6dc:	54526565 	ldrbpl	r6, [r2], #-1381	; 0x565
     6e0:	532f534f 	teqpl	pc, #1006632961	; 0x3c000001
     6e4:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     6e8:	696c2f65 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
     6ec:	632e7473 	teqvs	lr, #1929379840	; 0x73000000
     6f0:	4c787000 	ldclmi	0, cr7, [r8], #-0
     6f4:	00747369 	rsbseq	r7, r4, r9, ror #6
     6f8:	74497870 	strbvc	r7, [r9], #-2160	; 0x870
     6fc:	76006d65 	strvc	r6, [r0], -r5, ror #26
     700:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0x94c
     704:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
     708:	696c6169 	stmdbvs	ip!, {r0, r3, r5, r6, r8, sp, lr}^
     70c:	74496573 	strbvc	r6, [r9], #-1395	; 0x573
     710:	75006d65 	strvc	r6, [r0, #-3429]	; 0xd65
     714:	65755163 	ldrbvs	r5, [r5, #-355]!	; 0x163
     718:	79546575 	ldmdbvc	r4, {r0, r2, r4, r5, r6, r8, sl, sp, lr}^
     71c:	78006570 	stmdavc	r0, {r4, r5, r6, r8, sl, sp, lr}
     720:	75657551 	strbvc	r7, [r5, #-1361]!	; 0x551
     724:	6e654765 	cdpvs	7, 6, cr4, cr5, cr5, {3}
     728:	63697265 	cmnvs	r9, #1342177286	; 0x50000006
     72c:	646e6553 	strbtvs	r6, [lr], #-1363	; 0x553
     730:	6d6f7246 	sfmvs	f7, 2, [pc, #-280]!	; 620 <_start-0x79e0>
     734:	00525349 	subseq	r5, r2, r9, asr #6
     738:	75517875 	ldrbvc	r7, [r1, #-2165]	; 0x875
     73c:	4d657565 	cfstr64mi	mvdx7, [r5, #-404]!	; 0xfffffe6c
     740:	61737365 	cmnvs	r3, r5, ror #6
     744:	57736567 	ldrbpl	r6, [r3, -r7, ror #10]!
     748:	69746961 	ldmdbvs	r4!, {r0, r5, r6, r8, fp, sp, lr}^
     74c:	7300676e 	movwvc	r6, #1902	; 0x76e
     750:	5f657a69 	svcpl	0x00657a69
     754:	78700074 	ldmdavc	r0!, {r2, r4, r5, r6}^
     758:	68676948 	stmdavs	r7!, {r3, r6, r8, fp, sp, lr}^
     75c:	72507265 	subsvc	r7, r0, #1342177286	; 0x50000006
     760:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     764:	61547974 	cmpvs	r4, r4, ror r9
     768:	6f576b73 	svcvs	0x00576b73
     76c:	006e656b 	rsbeq	r6, lr, fp, ror #10
     770:	65755178 	ldrbvs	r5, [r5, #-376]!	; 0x178
     774:	73496575 	movtvc	r6, #38261	; 0x9575
     778:	75657551 	strbvc	r7, [r5, #-1361]!	; 0x551
     77c:	706d4565 	rsbvc	r4, sp, r5, ror #10
     780:	72467974 	subvc	r7, r6, #1900544	; 0x1d0000
     784:	53496d6f 	movtpl	r6, #40303	; 0x9d6f
     788:	72700052 	rsbsvc	r0, r0, #82	; 0x52
     78c:	51734976 	cmnpl	r3, r6, ror r9
     790:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
     794:	74706d45 	ldrbtvc	r6, [r0], #-3397	; 0xd45
     798:	72700079 	rsbsvc	r0, r0, #121	; 0x79
     79c:	706f4376 	rsbvc	r4, pc, r6, ror r3	; <UNPREDICTABLE>
     7a0:	74614479 	strbtvc	r4, [r1], #-1145	; 0x479
     7a4:	6f724661 	svcvs	0x00724661
     7a8:	6575516d 	ldrbvs	r5, [r5, #-365]!	; 0x16d
     7ac:	70006575 	andvc	r6, r0, r5, ror r5
     7b0:	77654e78 			; <UNDEFINED> instruction: 0x77654e78
     7b4:	75657551 	strbvc	r7, [r5, #-1361]!	; 0x551
     7b8:	72700065 	rsbsvc	r0, r0, #101	; 0x65
     7bc:	706f4376 	rsbvc	r4, pc, r6, ror r3	; <UNPREDICTABLE>
     7c0:	74614479 	strbtvc	r4, [r1], #-1145	; 0x479
     7c4:	516f5461 	cmnpl	pc, r1, ror #8
     7c8:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
     7cc:	49547800 	ldmdbmi	r4, {fp, ip, sp, lr}^
     7d0:	4f5f454d 	svcmi	0x005f454d
     7d4:	78005455 	stmdavc	r0, {r0, r2, r4, r6, sl, ip, lr}
     7d8:	75657551 	strbvc	r7, [r5, #-1361]!	; 0x551
     7dc:	6e654765 	cdpvs	7, 6, cr4, cr5, cr5, {3}
     7e0:	63697265 	cmnvs	r9, #1342177286	; 0x50000006
     7e4:	65636552 	strbvs	r6, [r3, #-1362]!	; 0x552
     7e8:	00657669 	rsbeq	r7, r5, r9, ror #12
     7ec:	724f6370 	subvc	r6, pc, #-1073741823	; 0xc0000001
     7f0:	6e696769 	cdpvs	7, 6, cr6, cr9, cr9, {3}
     7f4:	65526c61 	ldrbvs	r6, [r2, #-3169]	; 0xc61
     7f8:	6f506461 	svcvs	0x00506461
     7fc:	69746973 	ldmdbvs	r4!, {r0, r1, r4, r5, r6, r8, fp, sp, lr}^
     800:	70006e6f 	andvc	r6, r0, pc, ror #28
     804:	61655263 	cmnvs	r5, r3, ror #4
     808:	6f724664 	svcvs	0x00724664
     80c:	4f78006d 	svcmi	0x0078006d
     810:	66726576 			; <UNDEFINED> instruction: 0x66726576
     814:	43776f6c 	cmnmi	r7, #432	; 0x1b0
     818:	746e756f 	strbtvc	r7, [lr], #-1391	; 0x56f
     81c:	75517600 	ldrbvc	r7, [r1, #-1536]	; 0x600
     820:	44657565 	strbtmi	r7, [r5], #-1381	; 0x565
     824:	74656c65 	strbtvc	r6, [r5], #-3173	; 0xc65
     828:	63700065 	cmnvs	r0, #101	; 0x65
     82c:	64616548 	strbtvs	r6, [r1], #-1352	; 0x548
     830:	69547800 	ldmdbvs	r4, {fp, ip, sp, lr}^
     834:	6e4f656d 	cdpvs	5, 4, cr6, cr15, cr13, {3}
     838:	65746e45 	ldrbvs	r6, [r4, #-3653]!	; 0xe45
     83c:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
     840:	754a7800 	strbvc	r7, [sl, #-2048]	; 0x800
     844:	65507473 	ldrbvs	r7, [r0, #-1139]	; 0x473
     848:	6e696b65 	vnmulvs.f64	d22, d9, d21
     84c:	51780067 	cmnpl	r8, r7, rrx
     850:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
     854:	656e6547 	strbvs	r6, [lr, #-1351]!	; 0x547
     858:	53636972 	cmnpl	r3, #1867776	; 0x1c8000
     85c:	00646e65 	rsbeq	r6, r4, r5, ror #28
     860:	6d695478 	cfstrdvs	mvd5, [r9, #-480]!	; 0xfffffe20
     864:	74754f65 	ldrbtvc	r4, [r5], #-3941	; 0xf65
     868:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
     86c:	52787500 	rsbspl	r7, r8, #0
     870:	72757465 	rsbsvc	r7, r5, #1694498816	; 0x65000000
     874:	5178006e 	cmnpl	r8, lr, rrx
     878:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
     87c:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
     880:	7800656c 	stmdavc	r0, {r2, r3, r5, r6, r8, sl, sp, lr}
     884:	75657551 	strbvc	r7, [r5, #-1361]!	; 0x551
     888:	63655265 	cmnvs	r5, #1342177286	; 0x50000006
     88c:	65766965 	ldrbvs	r6, [r6, #-2405]!	; 0x965
     890:	6d6f7246 	sfmvs	f7, 2, [pc, #-280]!	; 780 <_start-0x7880>
     894:	00525349 	subseq	r5, r2, r9, asr #6
     898:	654c7875 	strbvs	r7, [ip, #-2165]	; 0x875
     89c:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
     8a0:	51787500 	cmnpl	r8, r0, lsl #10
     8a4:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
     8a8:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
     8ac:	78006874 	stmdavc	r0, {r2, r4, r5, r6, fp, sp, lr}
     8b0:	6b736154 	blvs	1cd8e08 <WriteSemaphore+0x1cc354c>
     8b4:	69615773 	stmdbvs	r1!, {r0, r1, r4, r5, r6, r8, r9, sl, ip, lr}^
     8b8:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
     8bc:	65526f54 	ldrbvs	r6, [r2, #-3924]	; 0xf54
     8c0:	76696563 	strbtvc	r6, [r9], -r3, ror #10
     8c4:	78750065 	ldmdavc	r5!, {r0, r2, r5, r6}^
     8c8:	75657551 	strbvc	r7, [r5, #-1361]!	; 0x551
     8cc:	73654d65 	cmnvc	r5, #6464	; 0x1940
     8d0:	65676173 	strbvs	r6, [r7, #-371]!	; 0x173
     8d4:	69615773 	stmdbvs	r1!, {r0, r1, r4, r5, r6, r8, r9, sl, ip, lr}^
     8d8:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
     8dc:	6d6f7246 	sfmvs	f7, 2, [pc, #-280]!	; 7cc <_start-0x7834>
     8e0:	00525349 	subseq	r5, r2, r9, asr #6
     8e4:	74497670 	strbvc	r7, [r9], #-1648	; 0x670
     8e8:	6f546d65 	svcvs	0x00546d65
     8ec:	75657551 	strbvc	r7, [r5, #-1361]!	; 0x551
     8f0:	51780065 	cmnpl	r8, r5, rrx
     8f4:	45554555 	ldrbmi	r4, [r5, #-1365]	; 0x555
     8f8:	6e457800 	cdpvs	8, 4, cr7, cr5, cr0, {0}
     8fc:	54797274 	ldrbtpl	r7, [r9], #-628	; 0x274
     900:	53656d69 	cmnpl	r5, #6720	; 0x1a40
     904:	51007465 	tstpl	r0, r5, ror #8
     908:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
     90c:	69666544 	stmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
     910:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
     914:	78006e6f 	stmdavc	r0, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}
     918:	75657551 	strbvc	r7, [r5, #-1361]!	; 0x551
     91c:	51734965 	cmnpl	r3, r5, ror #18
     920:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
     924:	6c6c7546 	cfstr64vs	mvdx7, [ip], #-280	; 0xfffffee8
     928:	6d6f7246 	sfmvs	f7, 2, [pc, #-280]!	; 818 <_start-0x77e8>
     92c:	00525349 	subseq	r5, r2, r9, asr #6
     930:	4c785478 	cfldrdmi	mvd5, [r8], #-480	; 0xfffffe20
     934:	006b636f 	rsbeq	r6, fp, pc, ror #6
     938:	65755178 	ldrbvs	r5, [r5, #-376]!	; 0x178
     93c:	65476575 	strbvs	r6, [r7, #-1397]	; 0x575
     940:	6972656e 	ldmdbvs	r2!, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
     944:	65724363 	ldrbvs	r4, [r2, #-867]!	; 0x363
     948:	00657461 	rsbeq	r7, r5, r1, ror #8
     94c:	61537875 	cmpvs	r3, r5, ror r8
     950:	49646576 	stmdbmi	r4!, {r1, r2, r4, r5, r6, r8, sl, sp, lr}^
     954:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     958:	74707572 	ldrbtvc	r7, [r0], #-1394	; 0x572
     95c:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
     960:	70007375 	andvc	r7, r0, r5, ror r3
     964:	73497672 	movtvc	r7, #38514	; 0x9672
     968:	75657551 	strbvc	r7, [r5, #-1361]!	; 0x551
     96c:	6c754665 	ldclvs	6, cr4, [r5], #-404	; 0xfffffe6c
     970:	7875006c 	ldmdavc	r5!, {r2, r3, r5, r6}^
     974:	7373654d 	cmnvc	r3, #322961408	; 0x13400000
     978:	73656761 	cmnvc	r5, #25427968	; 0x1840000
     97c:	74696157 	strbtvc	r6, [r9], #-343	; 0x157
     980:	00676e69 	rsbeq	r6, r7, r9, ror #28
     984:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 8d0 <_start-0x7730>
     988:	6e732f65 	cdpvs	15, 7, cr2, cr3, cr5, {3}
     98c:	6c656769 	stclvs	7, cr6, [r5], #-420	; 0xfffffe5c
     990:	6970722f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r9, ip, sp, lr}^
     994:	6572462f 	ldrbvs	r4, [r2, #-1583]!	; 0x62f
     998:	4f545265 	svcmi	0x00545265
     99c:	72462f53 	subvc	r2, r6, #332	; 0x14c
     9a0:	54526565 	ldrbpl	r6, [r2], #-1381	; 0x565
     9a4:	532f534f 	teqpl	pc, #1006632961	; 0x3c000001
     9a8:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     9ac:	75712f65 	ldrbvc	r2, [r1, #-3941]!	; 0xf65
     9b0:	2e657565 	cdpcs	5, 6, cr7, cr5, cr5, {3}
     9b4:	76700063 	ldrbtvc	r0, [r0], -r3, rrx
     9b8:	66667542 	strbtvs	r7, [r6], -r2, asr #10
     9bc:	78007265 	stmdavc	r0, {r0, r2, r5, r6, r9, ip, sp, lr}
     9c0:	75657551 	strbvc	r7, [r5, #-1361]!	; 0x551
     9c4:	6e654765 	cdpvs	7, 6, cr4, cr5, cr5, {3}
     9c8:	63697265 	cmnvs	r9, #1342177286	; 0x50000006
     9cc:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0x552
     9d0:	43780074 	cmnmi	r8, #116	; 0x74
     9d4:	5079706f 	rsbspl	r7, r9, pc, rrx
     9d8:	7469736f 	strbtvc	r7, [r9], #-879	; 0x36f
     9dc:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     9e0:	55767270 	ldrbpl	r7, [r6, #-624]!	; 0x270
     9e4:	636f6c6e 	cmnvs	pc, #28160	; 0x6e00
     9e8:	6575516b 	ldrbvs	r5, [r5, #-363]!	; 0x16b
     9ec:	78006575 	stmdavc	r0, {r0, r2, r4, r5, r6, r8, sl, sp, lr}
     9f0:	6f4c7852 	svcvs	0x004c7852
     9f4:	70006b63 	andvc	r6, r0, r3, ror #22
     9f8:	69615463 	stmdbvs	r1!, {r0, r1, r5, r6, sl, ip, lr}^
     9fc:	5078006c 	rsbspl	r0, r8, ip, rrx
     a00:	7469736f 	strbtvc	r7, [r9], #-879	; 0x36f
     a04:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     a08:	73615478 	cmnvc	r1, #2013265920	; 0x78000000
     a0c:	6157736b 	cmpvs	r7, fp, ror #6
     a10:	6e697469 	cdpvs	4, 6, cr7, cr9, cr9, {3}
     a14:	536f5467 	cmnpl	pc, #1728053248	; 0x67000000
     a18:	00646e65 	rsbeq	r6, r4, r5, ror #28
     a1c:	65755178 	ldrbvs	r5, [r5, #-376]!	; 0x178
     a20:	69536575 	ldmdbvs	r3, {r0, r2, r4, r5, r6, r8, sl, sp, lr}^
     a24:	6e49657a 	mcrvs	5, 2, r6, cr9, cr10, {3}
     a28:	65747942 	ldrbvs	r7, [r4, #-2370]!	; 0x942
     a2c:	78700073 	ldmdavc	r0!, {r0, r1, r4, r5, r6}^
     a30:	75657551 	strbvc	r7, [r5, #-1361]!	; 0x551
     a34:	63700065 	cmnvs	r0, #101	; 0x65
     a38:	74697257 	strbtvc	r7, [r9], #-599	; 0x257
     a3c:	006f5465 	rsbeq	r5, pc, r5, ror #8
     a40:	74497875 	strbvc	r7, [r9], #-2165	; 0x875
     a44:	69536d65 	ldmdbvs	r3, {r0, r2, r5, r6, r8, sl, fp, sp, lr}^
     a48:	7000657a 	andvc	r6, r0, sl, ror r5
     a4c:	6e497672 	mcrvs	6, 2, r7, cr9, cr2, {3}
     a50:	61697469 	cmnvs	r9, r9, ror #8
     a54:	6573696c 	ldrbvs	r6, [r3, #-2412]!	; 0x96c
     a58:	56424354 			; <UNDEFINED> instruction: 0x56424354
     a5c:	61697261 	cmnvs	r9, r1, ror #4
     a60:	73656c62 	cmnvc	r5, #25088	; 0x6200
     a64:	61547600 	cmpvs	r4, r0, lsl #12
     a68:	75536b73 	ldrbvc	r6, [r3, #-2931]	; 0xb73
     a6c:	6e657073 	mcrvs	0, 3, r7, cr5, cr3, {3}
     a70:	78750064 	ldmdavc	r5!, {r2, r5, r6}^
     a74:	72727543 	rsbsvc	r7, r2, #281018368	; 0x10c00000
     a78:	4e746e65 	cdpmi	14, 7, cr6, cr4, cr5, {3}
     a7c:	65626d75 	strbvs	r6, [r2, #-3445]!	; 0xd75
     a80:	54664f72 	strbtpl	r4, [r6], #-3954	; 0xf72
     a84:	736b7361 	cmnvc	fp, #-2080374783	; 0x84000001
     a88:	54787500 	ldrbtpl	r7, [r8], #-1280	; 0x500
     a8c:	736b7361 	cmnvc	fp, #-2080374783	; 0x84000001
     a90:	656c6544 	strbvs	r6, [ip, #-1348]!	; 0x544
     a94:	00646574 	rsbeq	r6, r4, r4, ror r5
     a98:	6f487870 	svcvs	0x00487870
     a9c:	75466b6f 	strbvc	r6, [r6, #-2927]	; 0xb6f
     aa0:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
     aa4:	78006e6f 	stmdavc	r0, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}
     aa8:	70737553 	rsbsvc	r7, r3, r3, asr r5
     aac:	65646e65 	strbvs	r6, [r4, #-3685]!	; 0xe65
     ab0:	73615464 	cmnvc	r1, #1677721600	; 0x64000000
     ab4:	73694c6b 	cmnvc	r9, #27392	; 0x6b00
     ab8:	78700074 	ldmdavc	r0!, {r2, r4, r5, r6}^
     abc:	6b736154 	blvs	1cd9014 <WriteSemaphore+0x1cc3758>
     ac0:	00676154 	rsbeq	r6, r7, r4, asr r1
     ac4:	73615478 	cmnvc	r1, #2013265920	; 0x78000000
     ac8:	6e65476b 	cdpvs	7, 6, cr4, cr5, cr11, {3}
     acc:	63697265 	cmnvs	r9, #1342177286	; 0x50000006
     ad0:	61657243 	cmnvs	r5, r3, asr #4
     ad4:	78006574 	stmdavc	r0, {r2, r4, r5, r6, r8, sl, sp, lr}
     ad8:	65726c41 	ldrbvs	r6, [r2, #-3137]!	; 0xc41
     adc:	59796461 	ldmdbpl	r9!, {r0, r5, r6, sl, sp, lr}^
     ae0:	646c6569 	strbtvs	r6, [ip], #-1385	; 0x569
     ae4:	70006465 	andvc	r6, r0, r5, ror #8
     ae8:	6d695478 	cfstrdvs	mvd5, [r9, #-480]!	; 0xfffffe20
     aec:	74754f65 	ldrbtvc	r4, [r5], #-3941	; 0xf65
     af0:	694c7800 	stmdbvs	ip, {fp, ip, sp, lr}^
     af4:	73497473 	movtvc	r7, #38003	; 0x9473
     af8:	74706d45 	ldrbtvc	r6, [r0], #-3397	; 0xd45
     afc:	78700079 	ldmdavc	r0!, {r0, r3, r4, r5, r6}^
     b00:	6b736154 	blvs	1cd9058 <WriteSemaphore+0x1cc379c>
     b04:	65526f54 	ldrbvs	r6, [r2, #-3924]	; 0xf54
     b08:	656d7573 	strbvs	r7, [sp, #-1395]!	; 0x573
     b0c:	61547600 	cmpvs	r4, r0, lsl #12
     b10:	65446b73 	strbvs	r6, [r4, #-2931]	; 0xb73
     b14:	0079616c 	rsbseq	r6, r9, ip, ror #2
     b18:	73615478 	cmnvc	r1, #2013265920	; 0x78000000
     b1c:	6e61486b 	cdpvs	8, 6, cr4, cr1, cr11, {3}
     b20:	00656c64 	rsbeq	r6, r5, r4, ror #24
     b24:	73615478 	cmnvc	r1, #2013265920	; 0x78000000
     b28:	6c61436b 	stclvs	3, cr4, [r1], #-428	; 0xfffffe54
     b2c:	7070416c 	rsbsvc	r4, r0, ip, ror #2
     b30:	6163696c 	cmnvs	r3, ip, ror #18
     b34:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     b38:	6b736154 	blvs	1cd9090 <WriteSemaphore+0x1cc37d4>
     b3c:	6b6f6f48 	blvs	1bdc864 <WriteSemaphore+0x1bc6fa8>
     b40:	6b737400 	blvs	1cddb48 <WriteSemaphore+0x1cc828c>
     b44:	6b736154 	blvs	1cd909c <WriteSemaphore+0x1cc37e0>
     b48:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xf43
     b4c:	426c6f72 	rsbmi	r6, ip, #456	; 0x1c8
     b50:	6b636f6c 	blvs	18dc908 <WriteSemaphore+0x18c704c>
     b54:	4e787000 	cdpmi	0, 7, cr7, cr8, cr0, {0}
     b58:	43547765 	cmpmi	r4, #26476544	; 0x1940000
     b5c:	54780042 	ldrbtpl	r0, [r8], #-66	; 0x42
     b60:	476b7361 	strbmi	r7, [fp, -r1, ror #6]!
     b64:	69547465 	ldmdbvs	r4, {r0, r2, r5, r6, sl, ip, sp, lr}^
     b68:	6f436b63 	svcvs	0x00436b63
     b6c:	46746e75 			; <UNDEFINED> instruction: 0x46746e75
     b70:	496d6f72 	stmdbmi	sp!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
     b74:	70005253 	andvc	r5, r0, r3, asr r2
     b78:	6c417672 	mcrrvs	6, 7, r7, r1, cr2
     b7c:	61636f6c 	cmnvs	r3, ip, ror #30
     b80:	43546574 	cmpmi	r4, #486539264	; 0x1d000000
     b84:	646e4142 	strbtvs	r4, [lr], #-322	; 0x142
     b88:	63617453 	cmnvs	r1, #1392508928	; 0x53000000
     b8c:	7375006b 	cmnvc	r5, #107	; 0x6b
     b90:	63617453 	cmnvs	r1, #1392508928	; 0x53000000
     b94:	7065446b 	rsbvc	r4, r5, fp, ror #8
     b98:	70006874 	andvc	r6, r0, r4, ror r8
     b9c:	74537875 	ldrbvc	r7, [r3], #-2165	; 0x875
     ba0:	426b6361 	rsbmi	r6, fp, #-2080374783	; 0x84000001
     ba4:	65666675 	strbvs	r6, [r6, #-1653]!	; 0x675
     ba8:	54760072 	ldrbtpl	r0, [r6], #-114	; 0x72
     bac:	506b7361 	rsbpl	r7, fp, r1, ror #6
     bb0:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
     bb4:	53797469 	cmnpl	r9, #1761607680	; 0x69000000
     bb8:	76007465 	strvc	r7, [r0], -r5, ror #8
     bbc:	6b736154 	blvs	1cd9114 <WriteSemaphore+0x1cc3858>
     bc0:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
     bc4:	68635374 	stmdavs	r3!, {r2, r4, r5, r6, r8, r9, ip, lr}^
     bc8:	6c756465 	cfldrdvs	mvd6, [r5], #-404	; 0xfffffe6c
     bcc:	76007265 	strvc	r7, [r0], -r5, ror #4
     bd0:	6b736154 	blvs	1cd9128 <WriteSemaphore+0x1cc386c>
     bd4:	63616c50 	cmnvs	r1, #20480	; 0x5000
     bd8:	456e4f65 	strbmi	r4, [lr, #-3941]!	; 0xf65
     bdc:	746e6576 	strbtvc	r6, [lr], #-1398	; 0x576
     be0:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0x94c
     be4:	54787000 	ldrbtpl	r7, [r8], #-0
     be8:	006b7361 	rsbeq	r7, fp, r1, ror #6
     bec:	61507670 	cmpvs	r0, r0, ror r6
     bf0:	656d6172 	strbvs	r6, [sp, #-370]!	; 0x172
     bf4:	00726574 	rsbseq	r6, r2, r4, ror r5
     bf8:	63537875 	cmpvs	r3, #7667712	; 0x750000
     bfc:	75646568 	strbvc	r6, [r4, #-1384]!	; 0x568
     c00:	5372656c 	cmnpl	r2, #452984832	; 0x1b000000
     c04:	65707375 	ldrbvs	r7, [r0, #-885]!	; 0x375
     c08:	6465646e 	strbtvs	r6, [r5], #-1134	; 0x46e
     c0c:	43787000 	cmnmi	r8, #0
     c10:	74616572 	strbtvc	r6, [r1], #-1394	; 0x572
     c14:	61546465 	cmpvs	r4, r5, ror #8
     c18:	78006b73 	stmdavc	r0, {r0, r1, r4, r5, r6, r8, r9, fp, sp, lr}
     c1c:	6b736154 	blvs	1cd9174 <WriteSemaphore+0x1cc38b8>
     c20:	61547349 	cmpvs	r4, r9, asr #6
     c24:	75536b73 	ldrbvc	r6, [r3, #-2931]	; 0xb73
     c28:	6e657073 	mcrvs	0, 3, r7, cr5, cr3, {3}
     c2c:	00646564 	rsbeq	r6, r4, r4, ror #10
     c30:	63695478 	cmnvs	r9, #2013265920	; 0x78000000
     c34:	756f436b 	strbvc	r4, [pc, #-875]!	; 8d1 <_start-0x772f>
     c38:	7400746e 	strvc	r7, [r0], #-1134	; 0x46e
     c3c:	43546b73 	cmpmi	r4, #117760	; 0x1cc00
     c40:	64700042 	ldrbtvs	r0, [r0], #-66	; 0x42
     c44:	4b534154 	blmi	14d119c <WriteSemaphore+0x14bb8e0>
     c48:	4f4f485f 	svcmi	0x004f485f
     c4c:	4f435f4b 	svcmi	0x00435f4b
     c50:	70004544 	andvc	r4, r0, r4, asr #10
     c54:	42435478 	submi	r5, r3, #2013265920	; 0x78000000
     c58:	69597800 	ldmdbvs	r9, {fp, ip, sp, lr}^
     c5c:	52646c65 	rsbpl	r6, r4, #25856	; 0x6500
     c60:	69757165 	ldmdbvs	r5!, {r0, r2, r5, r6, r8, ip, sp, lr}^
     c64:	00646572 	rsbeq	r6, r4, r2, ror r5
     c68:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; bb4 <_start-0x744c>
     c6c:	6e732f65 	cdpvs	15, 7, cr2, cr3, cr5, {3}
     c70:	6c656769 	stclvs	7, cr6, [r5], #-420	; 0xfffffe5c
     c74:	6970722f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r9, ip, sp, lr}^
     c78:	6572462f 	ldrbvs	r4, [r2, #-1583]!	; 0x62f
     c7c:	4f545265 	svcmi	0x00545265
     c80:	72462f53 	subvc	r2, r6, #332	; 0x14c
     c84:	54526565 	ldrbpl	r6, [r2], #-1381	; 0x565
     c88:	532f534f 	teqpl	pc, #1006632961	; 0x3c000001
     c8c:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     c90:	61742f65 	cmnvs	r4, r5, ror #30
     c94:	2e736b73 	vmovcs.s8	r6, d3[7]
     c98:	54760063 	ldrbtpl	r0, [r6], #-99	; 0x63
     c9c:	526b7361 	rsbpl	r7, fp, #-2080374783	; 0x84000001
     ca0:	6d757365 	ldclvs	3, cr7, [r5, #-404]!	; 0xfffffe6c
     ca4:	4d780065 	ldclmi	0, cr0, [r8, #-404]!	; 0xfffffe6c
     ca8:	524f4d45 	subpl	r4, pc, #4416	; 0x1140
     cac:	45525f59 	ldrbmi	r5, [r2, #-3929]	; 0xf59
     cb0:	4e4f4947 	cdpmi	9, 4, cr4, cr15, cr7, {2}
     cb4:	6f682f00 	svcvs	0x00682f00
     cb8:	732f656d 	teqvc	pc, #457179136	; 0x1b400000
     cbc:	6567696e 	strbvs	r6, [r7, #-2414]!	; 0x96e
     cc0:	70722f6c 	rsbsvc	r2, r2, ip, ror #30
     cc4:	72462f69 	subvc	r2, r6, #420	; 0x1a4
     cc8:	54526565 	ldrbpl	r6, [r2], #-1381	; 0x565
     ccc:	7600534f 	strvc	r5, [r0], -pc, asr #6
     cd0:	6b736154 	blvs	1cd9228 <WriteSemaphore+0x1cc396c>
     cd4:	41746553 	cmnmi	r4, r3, asr r5
     cd8:	696c7070 	stmdbvs	ip!, {r4, r5, r6, ip, sp, lr}^
     cdc:	69746163 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, sp, lr}^
     ce0:	61546e6f 	cmpvs	r4, pc, ror #28
     ce4:	61546b73 	cmpvs	r4, r3, ror fp
     ce8:	72700067 	rsbsvc	r0, r0, #103	; 0x67
     cec:	6c654476 	cfstrdvs	mvd4, [r5], #-472	; 0xfffffe28
     cf0:	54657465 	strbtpl	r7, [r5], #-1125	; 0x465
     cf4:	78004243 	stmdavc	r0, {r0, r1, r6, r9, lr}
     cf8:	7373694d 	cmnvc	r3, #1261568	; 0x134000
     cfc:	69596465 	ldmdbvs	r9, {r0, r2, r5, r6, sl, sp, lr}^
     d00:	00646c65 	rsbeq	r6, r4, r5, ror #24
     d04:	49767270 	ldmdbmi	r6!, {r4, r5, r6, r9, ip, sp, lr}^
     d08:	54656c64 	strbtpl	r6, [r5], #-3172	; 0xc64
     d0c:	006b7361 	rsbeq	r7, fp, r1, ror #6
     d10:	73615476 	cmnvc	r1, #1979711488	; 0x76000000
     d14:	6977536b 	ldmdbvs	r7!, {r0, r1, r3, r5, r6, r8, r9, ip, lr}^
     d18:	43686374 	cmnmi	r8, #-805306367	; 0xd0000001
     d1c:	65746e6f 	ldrbvs	r6, [r4, #-3695]!	; 0xe6f
     d20:	70007478 	andvc	r7, r0, r8, ror r4
     d24:	61745378 	cmnvs	r4, r8, ror r3
     d28:	75006b63 	strvc	r6, [r0, #-2915]	; 0xb63
     d2c:	706f5478 	rsbvc	r5, pc, r8, ror r4	; <UNPREDICTABLE>
     d30:	64657355 	strbtvs	r7, [r5], #-853	; 0x355
     d34:	6f697250 	svcvs	0x00697250
     d38:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     d3c:	4f787000 	svcmi	0x00787000
     d40:	66726576 			; <UNDEFINED> instruction: 0x66726576
     d44:	44776f6c 	ldrbtmi	r6, [r7], #-3948	; 0xf6c
     d48:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
     d4c:	61546465 	cmpvs	r4, r5, ror #8
     d50:	694c6b73 	stmdbvs	ip, {r0, r1, r4, r5, r6, r8, r9, fp, sp, lr}^
     d54:	70007473 	andvc	r7, r0, r3, ror r4
     d58:	73615478 	cmnvc	r1, #2013265920	; 0x78000000
     d5c:	446f546b 	strbtmi	r5, [pc], #-1131	; d64 <_start-0x729c>
     d60:	74656c65 	strbtvc	r6, [r5], #-3173	; 0xc65
     d64:	52780065 	rsbspl	r0, r8, #101	; 0x65
     d68:	6f696765 	svcvs	0x00696765
     d6c:	7800736e 	stmdavc	r0, {r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}
     d70:	646e6550 	strbtvs	r6, [lr], #-1360	; 0x550
     d74:	52676e69 	rsbpl	r6, r7, #1680	; 0x690
     d78:	79646165 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sp, lr}^
     d7c:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0x94c
     d80:	61547800 	cmpvs	r4, r0, lsl #16
     d84:	57736b73 			; <UNDEFINED> instruction: 0x57736b73
     d88:	69746961 	ldmdbvs	r4!, {r0, r5, r6, r8, fp, sp, lr}^
     d8c:	6554676e 	ldrbvs	r6, [r4, #-1902]	; 0x76e
     d90:	6e696d72 	mcrvs	13, 3, r6, cr9, cr2, {3}
     d94:	6f697461 	svcvs	0x00697461
     d98:	7870006e 	ldmdavc	r0!, {r1, r2, r3, r5, r6}^
     d9c:	6b736154 	blvs	1cd92f4 <WriteSemaphore+0x1cc3a38>
     da0:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xf43
     da4:	654e7800 	strbvs	r7, [lr, #-2048]	; 0x800
     da8:	61547478 	cmpvs	r4, r8, ror r4
     dac:	6e556b73 	vmovvs.s8	r6, d5[3]
     db0:	636f6c62 	cmnvs	pc, #25088	; 0x6200
     db4:	6d69546b 	cfstrdvs	mvd5, [r9, #-428]!	; 0xfffffe54
     db8:	78750065 	ldmdavc	r5!, {r0, r2, r5, r6}^
     dbc:	52706f54 	rsbspl	r6, r0, #336	; 0x150
     dc0:	79646165 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sp, lr}^
     dc4:	6f697250 	svcvs	0x00697250
     dc8:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     dcc:	50787000 	rsbspl	r7, r8, r0
     dd0:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
     dd4:	5773756f 	ldrbpl	r7, [r3, -pc, ror #10]!
     dd8:	54656b61 	strbtpl	r6, [r5], #-2913	; 0xb61
     ddc:	00656d69 	rsbeq	r6, r5, r9, ror #26
     de0:	654c6c75 	strbvs	r6, [ip, #-3189]	; 0xc75
     de4:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
     de8:	79426e49 	stmdbvc	r2, {r0, r3, r6, r9, sl, fp, sp, lr}^
     dec:	00736574 	rsbseq	r6, r3, r4, ror r5
     df0:	654e7875 	strbvs	r7, [lr, #-2165]	; 0x875
     df4:	69725077 	ldmdbvs	r2!, {r0, r1, r2, r4, r5, r6, ip, lr}^
     df8:	7469726f 	strbtvc	r7, [r9], #-623	; 0x26f
     dfc:	78700079 	ldmdavc	r0!, {r0, r3, r4, r5, r6}^
     e00:	6c626e55 	stclvs	14, cr6, [r2], #-340	; 0xfffffeac
     e04:	656b636f 	strbvs	r6, [fp, #-879]!	; 0x36f
     e08:	42435464 	submi	r5, r3, #1677721600	; 0x64000000
     e0c:	61547600 	cmpvs	r4, r0, lsl #12
     e10:	65446b73 	strbvs	r6, [r4, #-2931]	; 0xb73
     e14:	5579616c 	ldrbpl	r6, [r9, #-364]!	; 0x16c
     e18:	6c69746e 	cfstrdvs	mvd7, [r9], #-440	; 0xfffffe48
     e1c:	61547600 	cmpvs	r4, r0, lsl #12
     e20:	6e496b73 	vmovvs.8	d9[3], r6
     e24:	6d657263 	sfmvs	f7, 2, [r5, #-396]!	; 0xfffffe74
     e28:	54746e65 	ldrbtpl	r6, [r4], #-3685	; 0xe65
     e2c:	006b6369 	rsbeq	r6, fp, r9, ror #6
     e30:	68635378 	stmdavs	r3!, {r3, r4, r5, r6, r8, r9, ip, lr}^
     e34:	6c756465 	cfldrdvs	mvd6, [r5], #-404	; 0xfffffe6c
     e38:	75527265 	ldrbvc	r7, [r2, #-613]	; 0x265
     e3c:	6e696e6e 	cdpvs	14, 6, cr6, cr9, cr14, {3}
     e40:	54760067 	ldrbtpl	r0, [r6], #-103	; 0x67
     e44:	456b7361 	strbmi	r7, [fp, #-865]!	; 0x361
     e48:	6353646e 	cmpvs	r3, #1845493760	; 0x6e000000
     e4c:	75646568 	strbvc	r6, [r4, #-1384]!	; 0x568
     e50:	0072656c 	rsbseq	r6, r2, ip, ror #10
     e54:	73615478 	cmnvc	r1, #2013265920	; 0x78000000
     e58:	7365526b 	cmnvc	r5, #-1342177274	; 0xb0000006
     e5c:	41656d75 	smcmi	22229	; 0x56d5
     e60:	76006c6c 	strvc	r6, [r0], -ip, ror #24
     e64:	6b736154 	blvs	1cd93bc <WriteSemaphore+0x1cc3b00>
     e68:	7373694d 	cmnvc	r3, #1261568	; 0x134000
     e6c:	69596465 	ldmdbvs	r9, {r0, r2, r5, r6, sl, sp, lr}^
     e70:	00646c65 	rsbeq	r6, r4, r5, ror #24
     e74:	73615478 	cmnvc	r1, #2013265920	; 0x78000000
     e78:	7365526b 	cmnvc	r5, #-1342177274	; 0xb0000006
     e7c:	46656d75 			; <UNDEFINED> instruction: 0x46656d75
     e80:	496d6f72 	stmdbmi	sp!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
     e84:	78005253 	stmdavc	r0, {r0, r1, r4, r6, r9, ip, lr}
     e88:	756f6853 	strbvc	r6, [pc, #-2131]!	; 63d <_start-0x79c3>
     e8c:	6544646c 	strbvs	r6, [r4, #-1132]	; 0x46c
     e90:	0079616c 	rsbseq	r6, r9, ip, ror #2
     e94:	43767270 	cmnmi	r6, #7
     e98:	6b636568 	blvs	18da440 <WriteSemaphore+0x18c4b84>
     e9c:	6b736154 	blvs	1cd93f4 <WriteSemaphore+0x1cc3b38>
     ea0:	69615773 	stmdbvs	r1!, {r0, r1, r4, r5, r6, r8, r9, sl, ip, lr}^
     ea4:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
     ea8:	6d726554 	cfldr64vs	mvdx6, [r2, #-336]!	; 0xfffffeb0
     eac:	74616e69 	strbtvc	r6, [r1], #-3689	; 0xe69
     eb0:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     eb4:	61506c75 	cmpvs	r0, r5, ror ip
     eb8:	656d6172 	strbvs	r6, [sp, #-370]!	; 0x172
     ebc:	73726574 	cmnvc	r2, #486539264	; 0x1d000000
     ec0:	654d7800 	strbvs	r7, [sp, #-2048]	; 0x800
     ec4:	79726f6d 	ldmdbvc	r2!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     ec8:	69676552 	stmdbvs	r7!, {r1, r4, r6, r8, sl, sp, lr}^
     ecc:	70006e6f 	andvc	r6, r0, pc, ror #28
     ed0:	64417672 	strbvs	r7, [r1], #-1650	; 0x672
     ed4:	72754364 	rsbsvc	r4, r5, #-1879048191	; 0x90000001
     ed8:	746e6572 	strbtvc	r6, [lr], #-1394	; 0x572
     edc:	6b736154 	blvs	1cd9434 <WriteSemaphore+0x1cc3b78>
     ee0:	65446f54 	strbvs	r6, [r4, #-3924]	; 0xf54
     ee4:	6579616c 	ldrbvs	r6, [r9, #-364]!	; 0x16c
     ee8:	73694c64 	cmnvc	r9, #25600	; 0x6400
     eec:	54780074 	ldrbtpl	r0, [r8], #-116	; 0x74
     ef0:	526b7361 	rsbpl	r7, fp, #-2080374783	; 0x84000001
     ef4:	766f6d65 	strbtvc	r6, [pc], -r5, ror #26
     ef8:	6f724665 	svcvs	0x00724665
     efc:	6576456d 	ldrbvs	r4, [r6, #-1389]!	; 0x56d
     f00:	694c746e 	stmdbvs	ip, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
     f04:	76007473 			; <UNDEFINED> instruction: 0x76007473
     f08:	6b736154 	blvs	1cd9460 <WriteSemaphore+0x1cc3ba4>
     f0c:	656c6544 	strbvs	r6, [ip, #-1348]!	; 0x544
     f10:	78006574 	stmdavc	r0, {r2, r4, r5, r6, r8, sl, sp, lr}
     f14:	6b736154 	blvs	1cd946c <WriteSemaphore+0x1cc3bb0>
     f18:	54746547 	ldrbtpl	r6, [r4], #-1351	; 0x547
     f1c:	436b6369 	cmnmi	fp, #-1543503871	; 0xa4000001
     f20:	746e756f 	strbtvc	r7, [lr], #-1391	; 0x56f
     f24:	61547800 	cmpvs	r4, r0, lsl #16
     f28:	68436b73 	stmdavs	r3, {r0, r1, r4, r5, r6, r8, r9, fp, sp, lr}^
     f2c:	466b6365 	strbtmi	r6, [fp], -r5, ror #6
     f30:	6954726f 	ldmdbvs	r4, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
     f34:	754f656d 	strbvc	r6, [pc, #-1389]	; 9cf <_start-0x7631>
     f38:	78750074 	ldmdavc	r5!, {r2, r4, r5, r6}^
     f3c:	6b736154 	blvs	1cd9494 <WriteSemaphore+0x1cc3bd8>
     f40:	626d754e 	rsbvs	r7, sp, #327155712	; 0x13800000
     f44:	70007265 	andvc	r7, r0, r5, ror #4
     f48:	61655278 	smcvs	21800	; 0x5528
     f4c:	61547964 	cmpvs	r4, r4, ror #18
     f50:	4c736b73 	ldclmi	11, cr6, [r3], #-460	; 0xfffffe34
     f54:	73747369 	cmnvc	r4, #-1543503871	; 0xa4000001
     f58:	54787500 	ldrbtpl	r7, [r8], #-1280	; 0x500
     f5c:	476b7361 	strbmi	r7, [fp, -r1, ror #6]!
     f60:	754e7465 	strbvc	r7, [lr, #-1125]	; 0x465
     f64:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
     f68:	6154664f 	cmpvs	r4, pc, asr #12
     f6c:	00736b73 	rsbseq	r6, r3, r3, ror fp
     f70:	6c654478 	cfstrdvs	mvd4, [r5], #-480	; 0xfffffe20
     f74:	64657961 	strbtvs	r7, [r5], #-2401	; 0x961
     f78:	6b736154 	blvs	1cd94d0 <WriteSemaphore+0x1cc3c14>
     f7c:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0x94c
     f80:	44780031 	ldrbtmi	r0, [r8], #-49	; 0x31
     f84:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
     f88:	61546465 	cmpvs	r4, r5, ror #8
     f8c:	694c6b73 	stmdbvs	ip, {r0, r1, r4, r5, r6, r8, r9, fp, sp, lr}^
     f90:	00327473 	eorseq	r7, r2, r3, ror r4
     f94:	6d754e78 	ldclvs	14, cr4, [r5, #-480]!	; 0xfffffe20
     f98:	764f664f 	strbvc	r6, [pc], -pc, asr #12
     f9c:	6c667265 	sfmvs	f7, 2, [r6], #-404	; 0xfffffe6c
     fa0:	0073776f 	rsbseq	r7, r3, pc, ror #14
     fa4:	63695478 	cmnvs	r9, #2013265920	; 0x78000000
     fa8:	7600736b 	strvc	r7, [r0], -fp, ror #6
     fac:	6b736154 	blvs	1cd9504 <WriteSemaphore+0x1cc3c48>
     fb0:	70737553 	rsbsvc	r7, r3, r3, asr r5
     fb4:	41646e65 	cmnmi	r4, r5, ror #28
     fb8:	75006c6c 	strvc	r6, [r0, #-3180]	; 0xc6c
     fbc:	73694d78 	cmnvc	r9, #7680	; 0x1e00
     fc0:	54646573 	strbtpl	r6, [r4], #-1395	; 0x573
     fc4:	736b6369 	cmnvc	fp, #-1543503871	; 0xa4000001
     fc8:	69547800 	ldmdbvs	r4, {fp, ip, sp, lr}^
     fcc:	6e49656d 	cdpvs	5, 4, cr6, cr9, cr13, {3}
     fd0:	6d657263 	sfmvs	f7, 2, [r5, #-396]!	; 0xfffffe74
     fd4:	00746e65 	rsbseq	r6, r4, r5, ror #28
     fd8:	61546370 	cmpvs	r4, r0, ror r3
     fdc:	614e6b73 	hvcvs	59059	; 0xe6b3
     fe0:	7800656d 	stmdavc	r0, {r0, r2, r3, r5, r6, r8, sl, sp, lr}
     fe4:	6b736154 	blvs	1cd953c <WriteSemaphore+0x1cc3c80>
     fe8:	41746547 	cmnmi	r4, r7, asr #10
     fec:	696c7070 	stmdbvs	ip!, {r4, r5, r6, ip, sp, lr}^
     ff0:	69746163 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, sp, lr}^
     ff4:	61546e6f 	cmpvs	r4, pc, ror #28
     ff8:	61546b73 	cmpvs	r4, r3, ror fp
     ffc:	78700067 	ldmdavc	r0!, {r0, r1, r2, r5, r6}^
    1000:	6b636954 	blvs	18db558 <WriteSemaphore+0x18c5c9c>
    1004:	576f5473 			; <UNDEFINED> instruction: 0x576f5473
    1008:	00746961 	rsbseq	r6, r4, r1, ror #18
    100c:	75437875 	strbvc	r7, [r3, #-2165]	; 0x875
    1010:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
    1014:	69725074 	ldmdbvs	r2!, {r2, r4, r5, r6, ip, lr}^
    1018:	7469726f 	strbtvc	r7, [r9], #-623	; 0x26f
    101c:	78700079 	ldmdavc	r0!, {r0, r3, r4, r5, r6}^
    1020:	616c6544 	cmnvs	ip, r4, asr #10
    1024:	54646579 	strbtpl	r6, [r4], #-1401	; 0x579
    1028:	4c6b7361 	stclmi	3, cr7, [fp], #-388	; 0xfffffe7c
    102c:	00747369 	rsbseq	r7, r4, r9, ror #6
    1030:	614e6370 	hvcvs	58928	; 0xe630
    1034:	7500656d 	strvc	r6, [r0, #-1389]	; 0x56d
    1038:	73615478 	cmnvc	r1, #2013265920	; 0x78000000
    103c:	6972506b 	ldmdbvs	r2!, {r0, r1, r3, r5, r6, ip, lr}^
    1040:	7469726f 	strbtvc	r7, [r9], #-623	; 0x26f
    1044:	74654779 	strbtvc	r4, [r5], #-1913	; 0x779
    1048:	61547600 	cmpvs	r4, r0, lsl #12
    104c:	65536b73 	ldrbvs	r6, [r3, #-2931]	; 0xb73
    1050:	6d695474 	cfstrdvs	mvd5, [r9, #-464]!	; 0xfffffe30
    1054:	74754f65 	ldrbtvc	r4, [r5], #-3941	; 0xf65
    1058:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    105c:	78700065 	ldmdavc	r0!, {r0, r2, r5, r6}^
    1060:	6b736154 	blvs	1cd95b8 <WriteSemaphore+0x1cc3cfc>
    1064:	75536f54 	ldrbvc	r6, [r3, #-3924]	; 0xf54
    1068:	6e657073 	mcrvs	0, 3, r7, cr5, cr3, {3}
    106c:	76700064 	ldrbtvc	r0, [r0], -r4, rrx
    1070:	65736142 	ldrbvs	r6, [r3, #-322]!	; 0x142
    1074:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    1078:	00737365 	rsbseq	r7, r3, r5, ror #6
    107c:	49767270 	ldmdbmi	r6!, {r4, r5, r6, r9, ip, sp, lr}^
    1080:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
    1084:	73696c61 	cmnvc	r9, #24832	; 0x6100
    1088:	73615465 	cmnvc	r1, #1694498816	; 0x65000000
    108c:	73694c6b 	cmnvc	r9, #27392	; 0x6b00
    1090:	2f007374 	svccs	0x00007374
    1094:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xf68
    1098:	696e732f 	stmdbvs	lr!, {r0, r1, r2, r3, r5, r8, r9, ip, sp, lr}^
    109c:	2f6c6567 	svccs	0x006c6567
    10a0:	2f697072 	svccs	0x00697072
    10a4:	65657246 	strbvs	r7, [r5, #-582]!	; 0x246
    10a8:	534f5452 	movtpl	r5, #62546	; 0xf452
    10ac:	72462f2f 	subvc	r2, r6, #188	; 0xbc
    10b0:	54526565 	ldrbpl	r6, [r2], #-1381	; 0x565
    10b4:	532f534f 	teqpl	pc, #1006632961	; 0x3c000001
    10b8:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    10bc:	6f702f65 	svcvs	0x00702f65
    10c0:	62617472 	rsbvs	r7, r1, #1912602624	; 0x72000000
    10c4:	4d2f656c 	cfstr32mi	mvfx6, [pc, #-432]!	; f1c <_start-0x70e4>
    10c8:	614d6d65 	cmpvs	sp, r5, ror #26
    10cc:	682f676e 	stmdavs	pc!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}	; <UNPREDICTABLE>
    10d0:	5f706165 	svcpl	0x00706165
    10d4:	00632e34 	rsbeq	r2, r3, r4, lsr lr
    10d8:	49767270 	ldmdbmi	r6!, {r4, r5, r6, r9, ip, sp, lr}^
    10dc:	7265736e 	rsbvc	r7, r5, #-1207959551	; 0xb8000001
    10e0:	6f6c4274 	svcvs	0x006c4274
    10e4:	6e496b63 	vmlsvs.f64	d22, d9, d19
    10e8:	72466f74 	subvc	r6, r6, #464	; 0x1d0
    10ec:	694c6565 	stmdbvs	ip, {r0, r2, r5, r6, r8, sl, sp, lr}^
    10f0:	78007473 	stmdavc	r0, {r0, r1, r4, r5, r6, sl, ip, sp, lr}
    10f4:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xf50
    10f8:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
    10fc:	48656572 	stmdami	r5!, {r1, r4, r5, r6, r8, sl, sp, lr}^
    1100:	53706165 	cmnpl	r0, #1073741849	; 0x40000019
    1104:	00657a69 	rsbeq	r7, r5, r9, ror #20
    1108:	4c425f41 	mcrrmi	15, 4, r5, r2, cr1
    110c:	5f4b434f 	svcpl	0x004b434f
    1110:	4b4e494c 	blmi	1393648 <WriteSemaphore+0x137dd8c>
    1114:	76727000 	ldrbtvc	r7, [r2], -r0
    1118:	70616548 	rsbvc	r6, r1, r8, asr #10
    111c:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    1120:	756f6400 	strbvc	r6, [pc, #-1024]!	; d28 <_start-0x72d8>
    1124:	00656c62 	rsbeq	r6, r5, r2, ror #24
    1128:	6c427870 	mcrrvs	8, 7, r7, r2, cr0
    112c:	006b636f 	rsbeq	r6, fp, pc, ror #6
    1130:	694c7870 	stmdbvs	ip, {r4, r5, r6, fp, ip, sp, lr}^
    1134:	70006b6e 	andvc	r6, r0, lr, ror #22
    1138:	726f5076 	rsbvc	r5, pc, #118	; 0x76
    113c:	6c614d74 	stclvs	13, cr4, [r1], #-464	; 0xfffffe30
    1140:	00636f6c 	rsbeq	r6, r3, ip, ror #30
    1144:	69467870 	stmdbvs	r6, {r4, r5, r6, fp, ip, sp, lr}^
    1148:	46747372 			; <UNDEFINED> instruction: 0x46747372
    114c:	42656572 	rsbmi	r6, r5, #478150656	; 0x1c800000
    1150:	6b636f6c 	blvs	18dcf08 <WriteSemaphore+0x18c764c>
    1154:	54527800 	ldrbpl	r7, [r2], #-2048	; 0x800
    1158:	485f534f 	ldmdami	pc, {r0, r1, r2, r3, r6, r8, r9, ip, lr}^	; <UNPREDICTABLE>
    115c:	00504145 	subseq	r4, r0, r5, asr #2
    1160:	65486375 	strbvs	r6, [r8, #-885]	; 0x375
    1164:	64007061 	strvs	r7, [r0], #-97	; 0x61
    1168:	6d6d7544 	cfstr64vs	mvdx7, [sp, #-272]!	; 0xfffffef0
    116c:	42780079 	rsbsmi	r0, r8, #121	; 0x79
    1170:	6b636f6c 	blvs	18dcf28 <WriteSemaphore+0x18c766c>
    1174:	657a6953 	ldrbvs	r6, [sl, #-2387]!	; 0x953
    1178:	65487800 	strbvs	r7, [r8, #-2048]	; 0x800
    117c:	70007061 	andvc	r7, r0, r1, rrx
    1180:	646e4578 	strbtvs	r4, [lr], #-1400	; 0x578
    1184:	50787000 	rsbspl	r7, r8, r0
    1188:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
    118c:	4273756f 	rsbsmi	r7, r3, #465567744	; 0x1bc00000
    1190:	6b636f6c 	blvs	18dcf48 <WriteSemaphore+0x18c768c>
    1194:	6f547800 	svcvs	0x00547800
    1198:	486c6174 	stmdami	ip!, {r2, r4, r5, r6, r8, sp, lr}^
    119c:	53706165 	cmnpl	r0, #1073741849	; 0x40000019
    11a0:	00657a69 	rsbeq	r7, r5, r9, ror #20
    11a4:	65527670 	ldrbvs	r7, [r2, #-1648]	; 0x670
    11a8:	6e727574 	mrcvs	5, 3, r7, cr2, cr4, {3}
    11ac:	6f507600 	svcvs	0x00507600
    11b0:	6e497472 	mcrvs	4, 2, r7, cr9, cr2, {3}
    11b4:	61697469 	cmnvs	r9, r9, ror #8
    11b8:	6573696c 	ldrbvs	r6, [r3, #-2412]!	; 0x96c
    11bc:	636f6c42 	cmnvs	pc, #16896	; 0x4200
    11c0:	6800736b 	stmdavs	r0, {r0, r1, r3, r5, r6, r8, r9, ip, sp, lr}
    11c4:	53706165 	cmnpl	r0, #1073741849	; 0x40000019
    11c8:	43555254 	cmpmi	r5, #1073741829	; 0x40000005
    11cc:	49535f54 	ldmdbmi	r3, {r2, r4, r6, r8, r9, sl, fp, ip, lr}^
    11d0:	7800455a 	stmdavc	r0, {r1, r3, r4, r6, r8, sl, lr}
    11d4:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
    11d8:	42780074 	rsbsmi	r0, r8, #116	; 0x74
    11dc:	6b636f6c 	blvs	18dcf94 <WriteSemaphore+0x18c76d8>
    11e0:	6b6e694c 	blvs	1b9b718 <WriteSemaphore+0x1b85e5c>
    11e4:	6c6c6100 	stfvse	f6, [ip], #-0
    11e8:	7461636f 	strbtvc	r6, [r1], #-879	; 0x36f
    11ec:	78006465 	stmdavc	r0, {r0, r2, r5, r6, sl, sp, lr}
    11f0:	746e6157 	strbtvc	r6, [lr], #-343	; 0x157
    11f4:	69536465 	ldmdbvs	r3, {r0, r2, r5, r6, sl, sp, lr}^
    11f8:	7600657a 			; <UNDEFINED> instruction: 0x7600657a
    11fc:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xf50
    1200:	65657246 	strbvs	r7, [r5, #-582]!	; 0x246
    1204:	72467800 	subvc	r7, r6, #0
    1208:	79426565 	stmdbvc	r2, {r0, r2, r5, r6, r8, sl, sp, lr}^
    120c:	52736574 	rsbspl	r6, r3, #486539264	; 0x1d000000
    1210:	69616d65 	stmdbvs	r1!, {r0, r2, r5, r6, r8, sl, fp, sp, lr}^
    1214:	676e696e 	strbvs	r6, [lr, -lr, ror #18]!
    1218:	4e787000 	cdpmi	0, 7, cr7, cr8, cr0, {0}
    121c:	6c427765 	mcrrvs	7, 6, r7, r2, cr5
    1220:	4c6b636f 	stclmi	3, cr6, [fp], #-444	; 0xfffffe44
    1224:	006b6e69 	rsbeq	r6, fp, r9, ror #28
    1228:	654e7870 	strbvs	r7, [lr, #-2160]	; 0x870
    122c:	72467478 	subvc	r7, r6, #2013265920	; 0x78000000
    1230:	6c426565 	cfstr64vs	mvdx6, [r2], {101}	; 0x65
    1234:	006b636f 	rsbeq	r6, fp, pc, ror #6
    1238:	48637570 	stmdami	r3!, {r4, r5, r6, r8, sl, ip, sp, lr}^
    123c:	45706165 	ldrbmi	r6, [r0, #-357]!	; 0x165
    1240:	7000646e 	andvc	r6, r0, lr, ror #8
    1244:	6f6c4278 	svcvs	0x006c4278
    1248:	6f546b63 	svcvs	0x00546b63
    124c:	65736e49 	ldrbvs	r6, [r3, #-3657]!	; 0xe49
    1250:	50007472 	andpl	r7, r0, r2, ror r4
    1254:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    1258:	0031676e 	eorseq	r6, r1, lr, ror #14
    125c:	646e6550 	strbtvs	r6, [lr], #-1360	; 0x550
    1260:	32676e69 	rsbcc	r6, r7, #1680	; 0x690
    1264:	73694400 	cmnvc	r9, #0
    1268:	656c6261 	strbvs	r6, [ip, #-609]!	; 0x261
    126c:	69736142 	ldmdbvs	r3!, {r1, r6, r8, sp, lr}^
    1270:	43420063 	movtmi	r0, #8291	; 0x2063
    1274:	3338324d 	teqcc	r8, #-805306364	; 0xd0000004
    1278:	4e495f35 	mcrmi	15, 2, r5, cr9, cr5, {1}
    127c:	525f4354 	subspl	r4, pc, #1342177281	; 0x50000001
    1280:	00534745 	subseq	r4, r3, r5, asr #14
    1284:	74696d65 	strbtvc	r6, [r9], #-3429	; 0xd65
    1288:	746e695f 	strbtvc	r6, [lr], #-2399	; 0x95f
    128c:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0x265
    1290:	46007470 			; <UNDEFINED> instruction: 0x46007470
    1294:	74435149 	strbvc	r5, [r3], #-329	; 0x149
    1298:	75006c72 	strvc	r6, [r0, #-3186]	; 0xc72
    129c:	73614d6c 	cmnvc	r1, #6912	; 0x1b00
    12a0:	5364656b 	cmnpl	r4, #448790528	; 0x1ac00000
    12a4:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    12a8:	72690073 	rsbvc	r0, r9, #115	; 0x73
    12ac:	6d754e71 	ldclvs	14, cr4, [r5, #-452]!	; 0xfffffe3c
    12b0:	00726562 	rsbseq	r6, r2, r2, ror #10
    12b4:	44717269 	ldrbtmi	r7, [r1], #-617	; 0x269
    12b8:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
    12bc:	4500656c 	strmi	r6, [r0, #-1388]	; 0x56c
    12c0:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
    12c4:	73614265 	cmnvc	r1, #1342177286	; 0x50000006
    12c8:	75006369 	strvc	r6, [r0, #-873]	; 0x369
    12cc:	504d546c 	subpl	r5, sp, ip, ror #8
    12d0:	6e667000 	cdpvs	0, 6, cr7, cr6, cr0, {0}
    12d4:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
    12d8:	0072656c 	rsbseq	r6, r2, ip, ror #10
    12dc:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 1228 <_start-0x6dd8>
    12e0:	6e732f65 	cdpvs	15, 7, cr2, cr3, cr5, {3}
    12e4:	6c656769 	stclvs	7, cr6, [r5], #-420	; 0xfffffe5c
    12e8:	6970722f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r9, ip, sp, lr}^
    12ec:	6572462f 	ldrbvs	r4, [r2, #-1583]!	; 0x62f
    12f0:	4f545265 	svcmi	0x00545265
    12f4:	65442f53 	strbvs	r2, [r4, #-3923]	; 0xf53
    12f8:	442f6f6d 	strtmi	r6, [pc], #-3949	; 1300 <_start-0x6d00>
    12fc:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
    1300:	692f7372 	stmdbvs	pc!, {r1, r4, r5, r6, r8, r9, ip, sp, lr}	; <UNPREDICTABLE>
    1304:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    1308:	74707572 	ldrbtvc	r7, [r0], #-1394	; 0x572
    130c:	00632e73 	rsbeq	r2, r3, r3, ror lr
    1310:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
    1314:	6e49656c 	cdpvs	5, 4, cr6, cr9, cr12, {3}
    1318:	72726574 	rsbsvc	r6, r2, #486539264	; 0x1d000000
    131c:	73747075 	cmnvc	r4, #117	; 0x75
    1320:	765f5f00 	ldrbvc	r5, [pc], -r0, lsl #30
    1324:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xc61
    1328:	71726900 	cmnvc	r2, r0, lsl #18
    132c:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
    1330:	0072656c 	rsbseq	r6, r2, ip, ror #10
    1334:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
    1338:	0032656c 	eorseq	r6, r2, ip, ror #10
    133c:	61736944 	cmnvs	r3, r4, asr #18
    1340:	31656c62 	cmncc	r5, r2, ror #24
    1344:	73694400 	cmnvc	r9, #0
    1348:	656c6261 	strbvs	r6, [ip, #-609]!	; 0x261
    134c:	5f670032 	svcpl	0x00670032
    1350:	74636556 	strbtvc	r6, [r3], #-1366	; 0x556
    1354:	6154726f 	cmpvs	r4, pc, ror #4
    1358:	00656c62 	rsbeq	r6, r5, r2, ror #24
    135c:	62757473 	rsbsvs	r7, r5, #1929379840	; 0x73000000
    1360:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
    1364:	0072656c 	rsbseq	r6, r2, ip, ror #10
    1368:	495f4e46 	ldmdbmi	pc, {r1, r2, r6, r9, sl, fp, lr}^	; <UNPREDICTABLE>
    136c:	5245544e 	subpl	r5, r5, #1308622848	; 0x4e000000
    1370:	54505552 	ldrbpl	r5, [r0], #-1362	; 0x552
    1374:	4e41485f 	mcrmi	8, 2, r4, cr1, cr15, {2}
    1378:	52454c44 	subpl	r4, r5, #17408	; 0x4400
    137c:	544e4900 	strbpl	r4, [lr], #-2304	; 0x900
    1380:	55525245 	ldrbpl	r5, [r2, #-581]	; 0x245
    1384:	565f5450 			; <UNDEFINED> instruction: 0x565f5450
    1388:	4f544345 	svcmi	0x00544345
    138c:	72690052 	rsbvc	r0, r9, #82	; 0x52
    1390:	616e4571 	smcvs	58449	; 0xe451
    1394:	00656c62 	rsbeq	r6, r5, r2, ror #24
    1398:	72615f5f 	rsbvc	r5, r1, #380	; 0x17c
    139c:	52490067 	subpl	r0, r9, #103	; 0x67
    13a0:	73614251 	cmnvc	r1, #268435461	; 0x10000005
    13a4:	45006369 	strmi	r6, [r0, #-873]	; 0x369
    13a8:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
    13ac:	52003165 	andpl	r3, r0, #1073741849	; 0x40000019
    13b0:	72657365 	rsbvc	r7, r5, #-1811939327	; 0x94000001
    13b4:	5f646576 	svcpl	0x00646576
    13b8:	65520033 	ldrbvs	r0, [r2, #-51]	; 0x33
    13bc:	76726573 			; <UNDEFINED> instruction: 0x76726573
    13c0:	345f6465 	ldrbcc	r6, [pc], #-1125	; 13c8 <_start-0x6c38>
    13c4:	73655200 	cmnvc	r5, #0
    13c8:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0x265
    13cc:	00355f64 	eorseq	r5, r5, r4, ror #30
    13d0:	324d4342 	subcc	r4, sp, #134217729	; 0x8000001
    13d4:	5f353338 	svcpl	0x00353338
    13d8:	4f495047 	svcmi	0x00495047
    13dc:	4745525f 	smlsldmi	r5, r5, pc, r2	; <UNPREDICTABLE>
    13e0:	50470053 	subpl	r0, r7, r3, asr r0
    13e4:	4c455346 	mcrrmi	3, 4, r5, r5, cr6
    13e8:	65746900 	ldrbvs	r6, [r4, #-2304]!	; 0x900
    13ec:	5047006d 	subpl	r0, r7, sp, rrx
    13f0:	0056454c 	subseq	r4, r6, ip, asr #10
    13f4:	45535047 	ldrbmi	r5, [r3, #-71]	; 0x47
    13f8:	69700054 	ldmdbvs	r0!, {r2, r4, r6}^
    13fc:	6c61566e 	stclvs	6, cr5, [r1], #-440	; 0xfffffe48
    1400:	66666f00 	strbtvs	r6, [r6], -r0, lsl #30
    1404:	00746573 	rsbseq	r6, r4, r3, ror r5
    1408:	4c435047 	mcrrmi	0, 4, r5, r3, cr7
    140c:	682f0052 	stmdavs	pc!, {r1, r4, r6}	; <UNPREDICTABLE>
    1410:	2f656d6f 	svccs	0x00656d6f
    1414:	67696e73 			; <UNDEFINED> instruction: 0x67696e73
    1418:	722f6c65 	eorvc	r6, pc, #25856	; 0x6500
    141c:	462f6970 			; <UNDEFINED> instruction: 0x462f6970
    1420:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
    1424:	2f534f54 	svccs	0x00534f54
    1428:	6f6d6544 	svcvs	0x006d6544
    142c:	6972442f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, lr}^
    1430:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
    1434:	6970672f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r8, r9, sl, sp, lr}^
    1438:	00632e6f 	rsbeq	r2, r3, pc, ror #28
    143c:	47746553 			; <UNDEFINED> instruction: 0x47746553
    1440:	006f6970 	rsbeq	r6, pc, r0, ror r9	; <UNPREDICTABLE>
    1444:	4e6e6970 	mcrmi	9, 3, r6, cr14, cr0, {3}
    1448:	66006d75 			; <UNDEFINED> instruction: 0x66006d75
    144c:	4e636e75 	mcrmi	14, 3, r6, cr3, cr5, {3}
    1450:	47006d75 	smlsdxmi	r0, r5, sp, r6
    1454:	53444550 	movtpl	r4, #17744	; 0x4550
    1458:	74655300 	strbtvc	r5, [r5], #-768	; 0x300
    145c:	6f697047 	svcvs	0x00697047
    1460:	636e7546 	cmnvs	lr, #293601280	; 0x11800000
    1464:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    1468:	73655200 	cmnvc	r5, #0
    146c:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0x265
    1470:	00315f64 	eorseq	r5, r1, r4, ror #30
    1474:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0x552
    1478:	64657672 	strbtvs	r7, [r5], #-1650	; 0x672
    147c:	2f00325f 	svccs	0x0000325f
    1480:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xf68
    1484:	696e732f 	stmdbvs	lr!, {r0, r1, r2, r3, r5, r8, r9, ip, sp, lr}^
    1488:	2f6c6567 	svccs	0x006c6567
    148c:	2f697072 	svccs	0x00697072
    1490:	65657246 	strbvs	r7, [r5, #-582]!	; 0x246
    1494:	534f5452 	movtpl	r5, #62546	; 0xf452
    1498:	6d65442f 	cfstrdvs	mvd4, [r5, #-188]!	; 0xffffff44
    149c:	72442f6f 	subvc	r2, r4, #444	; 0x1bc
    14a0:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    14a4:	61752f73 	cmnvs	r5, r3, ror pc
    14a8:	632e7472 	teqvs	lr, #1912602624	; 0x72000000
    14ac:	61655200 	cmnvs	r5, r0, lsl #4
    14b0:	6d655364 	stclvs	3, cr5, [r5, #-400]!	; 0xfffffe70
    14b4:	6f687061 	svcvs	0x00687061
    14b8:	78006572 	stmdavc	r0, {r1, r4, r5, r6, r8, sl, sp, lr}
    14bc:	616d6553 	cmnvs	sp, r3, asr r5
    14c0:	726f6870 	rsbvc	r6, pc, #7340032	; 0x700000
    14c4:	6e614865 	cdpvs	8, 6, cr4, cr1, cr5, {3}
    14c8:	00656c64 	rsbeq	r6, r5, r4, ror #24
    14cc:	74697257 	strbtvc	r7, [r9], #-599	; 0x257
    14d0:	52415565 	subpl	r5, r1, #423624704	; 0x19400000
    14d4:	65530054 	ldrbvs	r0, [r3, #-84]	; 0x54
    14d8:	55707574 	ldrbpl	r7, [r0, #-1396]!	; 0x574
    14dc:	00545241 	subseq	r5, r4, r1, asr #4
    14e0:	64616572 	strbtvs	r6, [r1], #-1394	; 0x572
    14e4:	61655200 	cmnvs	r5, r0, lsl #4
    14e8:	52415564 	subpl	r5, r1, #419430400	; 0x19000000
    14ec:	72570054 	subsvc	r0, r7, #84	; 0x54
    14f0:	53657469 	cmnpl	r5, #1761607680	; 0x69000000
    14f4:	70616d65 	rsbvc	r6, r1, r5, ror #26
    14f8:	65726f68 	ldrbvs	r6, [r2, #-3944]!	; 0xf68
    14fc:	74757000 	ldrbtvc	r7, [r5], #-0
    1500:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
    1504:	6f682f00 	svcvs	0x00682f00
    1508:	732f656d 	teqvc	pc, #457179136	; 0x1b400000
    150c:	6567696e 	strbvs	r6, [r7, #-2414]!	; 0x96e
    1510:	70722f6c 	rsbsvc	r2, r2, ip, ror #30
    1514:	72462f69 	subvc	r2, r6, #420	; 0x1a4
    1518:	54526565 	ldrbpl	r6, [r2], #-1381	; 0x565
    151c:	442f534f 	strtmi	r5, [pc], #-847	; 1524 <_start-0x6adc>
    1520:	2f6f6d65 	svccs	0x006f6d65
    1524:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    1528:	00632e6f 	rsbeq	r2, r3, pc, ror #28
    152c:	73747570 	cmnvc	r4, #469762048	; 0x1c000000
    1530:	74656700 	strbtvc	r6, [r5], #-1792	; 0x700
    1534:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
    1538:	6f682f00 	svcvs	0x00682f00
    153c:	732f656d 	teqvc	pc, #457179136	; 0x1b400000
    1540:	6567696e 	strbvs	r6, [r7, #-2414]!	; 0x96e
    1544:	70722f6c 	rsbsvc	r2, r2, ip, ror #30
    1548:	72462f69 	subvc	r2, r6, #420	; 0x1a4
    154c:	54526565 	ldrbpl	r6, [r2], #-1381	; 0x565
    1550:	442f534f 	strtmi	r5, [pc], #-847	; 1558 <_start-0x6aa8>
    1554:	2f6f6d65 	svccs	0x006f6d65
    1558:	6e69616d 	powvsez	f6, f1, #5.0
    155c:	6500632e 	strvs	r6, [r0, #-814]	; 0x32e
    1560:	5f6f6863 	svcpl	0x006f6863
    1564:	6b736174 	blvs	1cd9b3c <WriteSemaphore+0x1cc4280>
    1568:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
    156c:	656c006e 	strbvs	r0, [ip, #-110]!	; 0x6e
    1570:	61745f64 	cmnvs	r4, r4, ror #30
    1574:	Address 0x00001574 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <WriteSemaphore+0x10bb468>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	204d5241 	subcs	r5, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xd45
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0x464
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2973726f 	ldmdbcs	r3!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
  2c:	372e3420 	strcc	r3, [lr, -r0, lsr #8]!
  30:	3220332e 	eorcc	r3, r0, #-1207959552	; 0xb8000000
  34:	30333130 	eorscc	r3, r3, r0, lsr r1
  38:	20323133 	eorscs	r3, r2, r3, lsr r1
  3c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  40:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0x165
  44:	415b2029 	cmpmi	fp, r9, lsr #32
  48:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff2fe <_estack+0xf7fef2fe>
  4c:	6465626d 	strbtvs	r6, [r5], #-621	; 0x26d
  50:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  54:	2d375f34 	ldccs	15, cr5, [r7, #-208]!	; 0xffffff30
  58:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
  5c:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
  60:	73697665 	cmnvc	r9, #105906176	; 0x6500000
  64:	206e6f69 	rsbcs	r6, lr, r9, ror #30
  68:	36363931 			; <UNDEFINED> instruction: 0x36363931
  6c:	005d3531 	subseq	r3, sp, r1, lsr r5

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	005a3605 	subseq	r3, sl, r5, lsl #12
  14:	01080706 	tsteq	r8, r6, lsl #14
  18:	04120109 	ldreq	r0, [r2], #-265	; 0x109
  1c:	01150114 	tsteq	r5, r4, lsl r1
  20:	01180317 	tsteq	r8, r7, lsl r3
  24:	061e011a 			; <UNDEFINED> instruction: 0x061e011a
  28:	01440122 	cmpeq	r4, r2, lsr #2

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	00000014 	andeq	r0, r0, r4, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	00010000 	andeq	r0, r1, r0
  1c:	00000240 	andeq	r0, r0, r0, asr #4
  20:	8b040e42 	blhi	103930 <WriteSemaphore+0xee074>
  24:	0b0d4201 	bleq	350830 <WriteSemaphore+0x33af74>
  28:	00000018 	andeq	r0, r0, r8, lsl r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	00010240 	andeq	r0, r1, r0, asr #4
  34:	0000001c 	andeq	r0, r0, ip, lsl r0
  38:	8b080e42 	blhi	203948 <WriteSemaphore+0x1ee08c>
  3c:	42018e02 	andmi	r8, r1, #32
  40:	00040b0c 	andeq	r0, r4, ip, lsl #22
  44:	00000014 	andeq	r0, r0, r4, lsl r0
  48:	00000000 	andeq	r0, r0, r0
  4c:	0001025c 	andeq	r0, r1, ip, asr r2
  50:	00000014 	andeq	r0, r0, r4, lsl r0
  54:	8b040e42 	blhi	103964 <WriteSemaphore+0xee0a8>
  58:	0b0d4201 	bleq	350864 <WriteSemaphore+0x33afa8>
  5c:	00000018 	andeq	r0, r0, r8, lsl r0
  60:	00000000 	andeq	r0, r0, r0
  64:	00010270 	andeq	r0, r1, r0, ror r2
  68:	00000038 	andeq	r0, r0, r8, lsr r0
  6c:	8b080e42 	blhi	20397c <WriteSemaphore+0x1ee0c0>
  70:	42018e02 	andmi	r8, r1, #32
  74:	00040b0c 	andeq	r0, r4, ip, lsl #22
  78:	00000018 	andeq	r0, r0, r8, lsl r0
  7c:	00000000 	andeq	r0, r0, r0
  80:	000102a8 	andeq	r0, r1, r8, lsr #5
  84:	000000b4 	strheq	r0, [r0], -r4
  88:	8b080e42 	blhi	203998 <WriteSemaphore+0x1ee0dc>
  8c:	42018e02 	andmi	r8, r1, #32
  90:	00040b0c 	andeq	r0, r4, ip, lsl #22
  94:	0000000c 	andeq	r0, r0, ip
  98:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  9c:	7c020001 	stcvc	0, cr0, [r2], {1}
  a0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  a4:	00000014 	andeq	r0, r0, r4, lsl r0
  a8:	00000094 	muleq	r0, r4, r0
  ac:	0001035c 	andeq	r0, r1, ip, asr r3
  b0:	00000094 	muleq	r0, r4, r0
  b4:	8b040e42 	blhi	1039c4 <WriteSemaphore+0xee108>
  b8:	0b0d4201 	bleq	3508c4 <WriteSemaphore+0x33b008>
  bc:	0000000c 	andeq	r0, r0, ip
  c0:	00000094 	muleq	r0, r4, r0
  c4:	000103f0 	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
  c8:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
  cc:	0000000c 	andeq	r0, r0, ip
  d0:	00000094 	muleq	r0, r4, r0
  d4:	000104a0 	andeq	r0, r1, r0, lsr #9
  d8:	000000ac 	andeq	r0, r0, ip, lsr #1
  dc:	00000014 	andeq	r0, r0, r4, lsl r0
  e0:	00000094 	muleq	r0, r4, r0
  e4:	0001054c 	andeq	r0, r1, ip, asr #10
  e8:	00000040 	andeq	r0, r0, r0, asr #32
  ec:	8b040e42 	blhi	1039fc <WriteSemaphore+0xee140>
  f0:	0b0d4201 	bleq	3508fc <WriteSemaphore+0x33b040>
  f4:	00000014 	andeq	r0, r0, r4, lsl r0
  f8:	00000094 	muleq	r0, r4, r0
  fc:	0001058c 	andeq	r0, r1, ip, lsl #11
 100:	00000060 	andeq	r0, r0, r0, rrx
 104:	8b040e42 	blhi	103a14 <WriteSemaphore+0xee158>
 108:	0b0d4201 	bleq	350914 <WriteSemaphore+0x33b058>
 10c:	0000000c 	andeq	r0, r0, ip
 110:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 114:	7c020001 	stcvc	0, cr0, [r2], {1}
 118:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 11c:	00000018 	andeq	r0, r0, r8, lsl r0
 120:	0000010c 	andeq	r0, r0, ip, lsl #2
 124:	000105f4 	strdeq	r0, [r1], -r4
 128:	00000168 	andeq	r0, r0, r8, ror #2
 12c:	8b080e42 	blhi	203a3c <WriteSemaphore+0x1ee180>
 130:	42018e02 	andmi	r8, r1, #32
 134:	00040b0c 	andeq	r0, r4, ip, lsl #22
 138:	00000018 	andeq	r0, r0, r8, lsl r0
 13c:	0000010c 	andeq	r0, r0, ip, lsl #2
 140:	0001075c 	andeq	r0, r1, ip, asr r7
 144:	000000e0 	andeq	r0, r0, r0, ror #1
 148:	8b080e42 	blhi	203a58 <WriteSemaphore+0x1ee19c>
 14c:	42018e02 	andmi	r8, r1, #32
 150:	00040b0c 	andeq	r0, r4, ip, lsl #22
 154:	00000018 	andeq	r0, r0, r8, lsl r0
 158:	0000010c 	andeq	r0, r0, ip, lsl #2
 15c:	0001083c 	andeq	r0, r1, ip, lsr r8
 160:	000000e8 	andeq	r0, r0, r8, ror #1
 164:	8b080e42 	blhi	203a74 <WriteSemaphore+0x1ee1b8>
 168:	42018e02 	andmi	r8, r1, #32
 16c:	00040b0c 	andeq	r0, r4, ip, lsl #22
 170:	00000018 	andeq	r0, r0, r8, lsl r0
 174:	0000010c 	andeq	r0, r0, ip, lsl #2
 178:	00010924 	andeq	r0, r1, r4, lsr #18
 17c:	000001d8 	ldrdeq	r0, [r0], -r8
 180:	8b080e42 	blhi	203a90 <WriteSemaphore+0x1ee1d4>
 184:	42018e02 	andmi	r8, r1, #32
 188:	00040b0c 	andeq	r0, r4, ip, lsl #22
 18c:	00000018 	andeq	r0, r0, r8, lsl r0
 190:	0000010c 	andeq	r0, r0, ip, lsl #2
 194:	00010afc 	strdeq	r0, [r1], -ip
 198:	0000012c 	andeq	r0, r0, ip, lsr #2
 19c:	8b080e42 	blhi	203aac <WriteSemaphore+0x1ee1f0>
 1a0:	42018e02 	andmi	r8, r1, #32
 1a4:	00040b0c 	andeq	r0, r4, ip, lsl #22
 1a8:	00000018 	andeq	r0, r0, r8, lsl r0
 1ac:	0000010c 	andeq	r0, r0, ip, lsl #2
 1b0:	00010c28 	andeq	r0, r1, r8, lsr #24
 1b4:	000000a4 	andeq	r0, r0, r4, lsr #1
 1b8:	8b080e42 	blhi	203ac8 <WriteSemaphore+0x1ee20c>
 1bc:	42018e02 	andmi	r8, r1, #32
 1c0:	00040b0c 	andeq	r0, r4, ip, lsl #22
 1c4:	00000018 	andeq	r0, r0, r8, lsl r0
 1c8:	0000010c 	andeq	r0, r0, ip, lsl #2
 1cc:	00010ccc 	andeq	r0, r1, ip, asr #25
 1d0:	0000008c 	andeq	r0, r0, ip, lsl #1
 1d4:	8b080e42 	blhi	203ae4 <WriteSemaphore+0x1ee228>
 1d8:	42018e02 	andmi	r8, r1, #32
 1dc:	00040b0c 	andeq	r0, r4, ip, lsl #22
 1e0:	0000000c 	andeq	r0, r0, ip
 1e4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 1e8:	7c020001 	stcvc	0, cr0, [r2], {1}
 1ec:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 1f0:	00000014 	andeq	r0, r0, r4, lsl r0
 1f4:	000001e0 	andeq	r0, r0, r0, ror #3
 1f8:	00010d58 	andeq	r0, r1, r8, asr sp
 1fc:	00000064 	andeq	r0, r0, r4, rrx
 200:	8b040e42 	blhi	103b10 <WriteSemaphore+0xee254>
 204:	0b0d4201 	bleq	350a10 <WriteSemaphore+0x33b154>
 208:	00000014 	andeq	r0, r0, r4, lsl r0
 20c:	000001e0 	andeq	r0, r0, r0, ror #3
 210:	00010dbc 			; <UNDEFINED> instruction: 0x00010dbc
 214:	00000028 	andeq	r0, r0, r8, lsr #32
 218:	8b040e42 	blhi	103b28 <WriteSemaphore+0xee26c>
 21c:	0b0d4201 	bleq	350a28 <WriteSemaphore+0x33b16c>
 220:	00000014 	andeq	r0, r0, r4, lsl r0
 224:	000001e0 	andeq	r0, r0, r0, ror #3
 228:	00010de4 	andeq	r0, r1, r4, ror #27
 22c:	00000094 	muleq	r0, r4, r0
 230:	8b040e42 	blhi	103b40 <WriteSemaphore+0xee284>
 234:	0b0d4201 	bleq	350a40 <WriteSemaphore+0x33b184>
 238:	00000014 	andeq	r0, r0, r4, lsl r0
 23c:	000001e0 	andeq	r0, r0, r0, ror #3
 240:	00010e78 	andeq	r0, r1, r8, ror lr
 244:	000000d4 	ldrdeq	r0, [r0], -r4
 248:	8b040e42 	blhi	103b58 <WriteSemaphore+0xee29c>
 24c:	0b0d4201 	bleq	350a58 <WriteSemaphore+0x33b19c>
 250:	00000014 	andeq	r0, r0, r4, lsl r0
 254:	000001e0 	andeq	r0, r0, r0, ror #3
 258:	00010f4c 	andeq	r0, r1, ip, asr #30
 25c:	00000094 	muleq	r0, r4, r0
 260:	8b040e42 	blhi	103b70 <WriteSemaphore+0xee2b4>
 264:	0b0d4201 	bleq	350a70 <WriteSemaphore+0x33b1b4>
 268:	0000000c 	andeq	r0, r0, ip
 26c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 270:	7c020001 	stcvc	0, cr0, [r2], {1}
 274:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 278:	00000018 	andeq	r0, r0, r8, lsl r0
 27c:	00000268 	andeq	r0, r0, r8, ror #4
 280:	00010fe0 	andeq	r0, r1, r0, ror #31
 284:	00000114 	andeq	r0, r0, r4, lsl r1
 288:	8b080e42 	blhi	203b98 <WriteSemaphore+0x1ee2dc>
 28c:	42018e02 	andmi	r8, r1, #32
 290:	00040b0c 	andeq	r0, r4, ip, lsl #22
 294:	00000018 	andeq	r0, r0, r8, lsl r0
 298:	00000268 	andeq	r0, r0, r8, ror #4
 29c:	000110f4 	strdeq	r1, [r1], -r4
 2a0:	000000c8 	andeq	r0, r0, r8, asr #1
 2a4:	8b080e42 	blhi	203bb4 <WriteSemaphore+0x1ee2f8>
 2a8:	42018e02 	andmi	r8, r1, #32
 2ac:	00040b0c 	andeq	r0, r4, ip, lsl #22
 2b0:	00000018 	andeq	r0, r0, r8, lsl r0
 2b4:	00000268 	andeq	r0, r0, r8, ror #4
 2b8:	000111bc 			; <UNDEFINED> instruction: 0x000111bc
 2bc:	000001ac 	andeq	r0, r0, ip, lsr #3
 2c0:	8b080e42 	blhi	203bd0 <WriteSemaphore+0x1ee314>
 2c4:	42018e02 	andmi	r8, r1, #32
 2c8:	00040b0c 	andeq	r0, r4, ip, lsl #22
 2cc:	00000018 	andeq	r0, r0, r8, lsl r0
 2d0:	00000268 	andeq	r0, r0, r8, ror #4
 2d4:	00011368 	andeq	r1, r1, r8, ror #6
 2d8:	000000dc 	ldrdeq	r0, [r0], -ip
 2dc:	8b080e42 	blhi	203bec <WriteSemaphore+0x1ee330>
 2e0:	42018e02 	andmi	r8, r1, #32
 2e4:	00040b0c 	andeq	r0, r4, ip, lsl #22
 2e8:	00000018 	andeq	r0, r0, r8, lsl r0
 2ec:	00000268 	andeq	r0, r0, r8, ror #4
 2f0:	00011444 	andeq	r1, r1, r4, asr #8
 2f4:	0000020c 	andeq	r0, r0, ip, lsl #4
 2f8:	8b080e42 	blhi	203c08 <WriteSemaphore+0x1ee34c>
 2fc:	42018e02 	andmi	r8, r1, #32
 300:	00040b0c 	andeq	r0, r4, ip, lsl #22
 304:	00000018 	andeq	r0, r0, r8, lsl r0
 308:	00000268 	andeq	r0, r0, r8, ror #4
 30c:	00011650 	andeq	r1, r1, r0, asr r6
 310:	000000e0 	andeq	r0, r0, r0, ror #1
 314:	8b080e42 	blhi	203c24 <WriteSemaphore+0x1ee368>
 318:	42018e02 	andmi	r8, r1, #32
 31c:	00040b0c 	andeq	r0, r4, ip, lsl #22
 320:	00000018 	andeq	r0, r0, r8, lsl r0
 324:	00000268 	andeq	r0, r0, r8, ror #4
 328:	00011730 	andeq	r1, r1, r0, lsr r7
 32c:	00000034 	andeq	r0, r0, r4, lsr r0
 330:	8b080e42 	blhi	203c40 <WriteSemaphore+0x1ee384>
 334:	42018e02 	andmi	r8, r1, #32
 338:	00040b0c 	andeq	r0, r4, ip, lsl #22
 33c:	00000014 	andeq	r0, r0, r4, lsl r0
 340:	00000268 	andeq	r0, r0, r8, ror #4
 344:	00011764 	andeq	r1, r1, r4, ror #14
 348:	00000030 	andeq	r0, r0, r0, lsr r0
 34c:	8b040e42 	blhi	103c5c <WriteSemaphore+0xee3a0>
 350:	0b0d4201 	bleq	350b5c <WriteSemaphore+0x33b2a0>
 354:	00000018 	andeq	r0, r0, r8, lsl r0
 358:	00000268 	andeq	r0, r0, r8, ror #4
 35c:	00011794 	muleq	r1, r4, r7
 360:	00000030 	andeq	r0, r0, r0, lsr r0
 364:	8b080e42 	blhi	203c74 <WriteSemaphore+0x1ee3b8>
 368:	42018e02 	andmi	r8, r1, #32
 36c:	00040b0c 	andeq	r0, r4, ip, lsl #22
 370:	00000018 	andeq	r0, r0, r8, lsl r0
 374:	00000268 	andeq	r0, r0, r8, ror #4
 378:	000117c4 	andeq	r1, r1, r4, asr #15
 37c:	00000130 	andeq	r0, r0, r0, lsr r1
 380:	8b080e42 	blhi	203c90 <WriteSemaphore+0x1ee3d4>
 384:	42018e02 	andmi	r8, r1, #32
 388:	00040b0c 	andeq	r0, r4, ip, lsl #22
 38c:	00000018 	andeq	r0, r0, r8, lsl r0
 390:	00000268 	andeq	r0, r0, r8, ror #4
 394:	000118f4 	strdeq	r1, [r1], -r4
 398:	00000090 	muleq	r0, r0, r0
 39c:	8b080e42 	blhi	203cac <WriteSemaphore+0x1ee3f0>
 3a0:	42018e02 	andmi	r8, r1, #32
 3a4:	00040b0c 	andeq	r0, r4, ip, lsl #22
 3a8:	00000018 	andeq	r0, r0, r8, lsl r0
 3ac:	00000268 	andeq	r0, r0, r8, ror #4
 3b0:	00011984 	andeq	r1, r1, r4, lsl #19
 3b4:	00000100 	andeq	r0, r0, r0, lsl #2
 3b8:	8b080e42 	blhi	203cc8 <WriteSemaphore+0x1ee40c>
 3bc:	42018e02 	andmi	r8, r1, #32
 3c0:	00040b0c 	andeq	r0, r4, ip, lsl #22
 3c4:	00000018 	andeq	r0, r0, r8, lsl r0
 3c8:	00000268 	andeq	r0, r0, r8, ror #4
 3cc:	00011a84 	andeq	r1, r1, r4, lsl #21
 3d0:	00000044 	andeq	r0, r0, r4, asr #32
 3d4:	8b080e42 	blhi	203ce4 <WriteSemaphore+0x1ee428>
 3d8:	42018e02 	andmi	r8, r1, #32
 3dc:	00040b0c 	andeq	r0, r4, ip, lsl #22
 3e0:	00000014 	andeq	r0, r0, r4, lsl r0
 3e4:	00000268 	andeq	r0, r0, r8, ror #4
 3e8:	00011ac8 	andeq	r1, r1, r8, asr #21
 3ec:	00000040 	andeq	r0, r0, r0, asr #32
 3f0:	8b040e42 	blhi	103d00 <WriteSemaphore+0xee444>
 3f4:	0b0d4201 	bleq	350c00 <WriteSemaphore+0x33b344>
 3f8:	00000018 	andeq	r0, r0, r8, lsl r0
 3fc:	00000268 	andeq	r0, r0, r8, ror #4
 400:	00011b08 	andeq	r1, r1, r8, lsl #22
 404:	0000004c 	andeq	r0, r0, ip, asr #32
 408:	8b080e42 	blhi	203d18 <WriteSemaphore+0x1ee45c>
 40c:	42018e02 	andmi	r8, r1, #32
 410:	00040b0c 	andeq	r0, r4, ip, lsl #22
 414:	00000014 	andeq	r0, r0, r4, lsl r0
 418:	00000268 	andeq	r0, r0, r8, ror #4
 41c:	00011b54 	andeq	r1, r1, r4, asr fp
 420:	00000048 	andeq	r0, r0, r8, asr #32
 424:	8b040e42 	blhi	103d34 <WriteSemaphore+0xee478>
 428:	0b0d4201 	bleq	350c34 <WriteSemaphore+0x33b378>
 42c:	0000000c 	andeq	r0, r0, ip
 430:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 434:	7c020001 	stcvc	0, cr0, [r2], {1}
 438:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 43c:	00000018 	andeq	r0, r0, r8, lsl r0
 440:	0000042c 	andeq	r0, r0, ip, lsr #8
 444:	00011b9c 	muleq	r1, ip, fp
 448:	00000248 	andeq	r0, r0, r8, asr #4
 44c:	8b080e42 	blhi	203d5c <WriteSemaphore+0x1ee4a0>
 450:	42018e02 	andmi	r8, r1, #32
 454:	00040b0c 	andeq	r0, r4, ip, lsl #22
 458:	00000018 	andeq	r0, r0, r8, lsl r0
 45c:	0000042c 	andeq	r0, r0, ip, lsr #8
 460:	00011de4 	andeq	r1, r1, r4, ror #27
 464:	000000fc 	strdeq	r0, [r0], -ip
 468:	8b080e42 	blhi	203d78 <WriteSemaphore+0x1ee4bc>
 46c:	42018e02 	andmi	r8, r1, #32
 470:	00040b0c 	andeq	r0, r4, ip, lsl #22
 474:	00000018 	andeq	r0, r0, r8, lsl r0
 478:	0000042c 	andeq	r0, r0, ip, lsr #8
 47c:	00011ee0 	andeq	r1, r1, r0, ror #29
 480:	0000010c 	andeq	r0, r0, ip, lsl #2
 484:	8b080e42 	blhi	203d94 <WriteSemaphore+0x1ee4d8>
 488:	42018e02 	andmi	r8, r1, #32
 48c:	00040b0c 	andeq	r0, r4, ip, lsl #22
 490:	00000018 	andeq	r0, r0, r8, lsl r0
 494:	0000042c 	andeq	r0, r0, ip, lsr #8
 498:	00011fec 	andeq	r1, r1, ip, ror #31
 49c:	00000080 	andeq	r0, r0, r0, lsl #1
 4a0:	8b080e42 	blhi	203db0 <WriteSemaphore+0x1ee4f4>
 4a4:	42018e02 	andmi	r8, r1, #32
 4a8:	00040b0c 	andeq	r0, r4, ip, lsl #22
 4ac:	00000018 	andeq	r0, r0, r8, lsl r0
 4b0:	0000042c 	andeq	r0, r0, ip, lsr #8
 4b4:	0001206c 	andeq	r2, r1, ip, rrx
 4b8:	00000058 	andeq	r0, r0, r8, asr r0
 4bc:	8b080e42 	blhi	203dcc <WriteSemaphore+0x1ee510>
 4c0:	42018e02 	andmi	r8, r1, #32
 4c4:	00040b0c 	andeq	r0, r4, ip, lsl #22
 4c8:	00000018 	andeq	r0, r0, r8, lsl r0
 4cc:	0000042c 	andeq	r0, r0, ip, lsr #8
 4d0:	000120c4 	andeq	r2, r1, r4, asr #1
 4d4:	000001a4 	andeq	r0, r0, r4, lsr #3
 4d8:	8b080e42 	blhi	203de8 <WriteSemaphore+0x1ee52c>
 4dc:	42018e02 	andmi	r8, r1, #32
 4e0:	00040b0c 	andeq	r0, r4, ip, lsl #22
 4e4:	00000018 	andeq	r0, r0, r8, lsl r0
 4e8:	0000042c 	andeq	r0, r0, ip, lsr #8
 4ec:	00012268 	andeq	r2, r1, r8, ror #4
 4f0:	00000100 	andeq	r0, r0, r0, lsl #2
 4f4:	8b080e42 	blhi	203e04 <WriteSemaphore+0x1ee548>
 4f8:	42018e02 	andmi	r8, r1, #32
 4fc:	00040b0c 	andeq	r0, r4, ip, lsl #22
 500:	00000014 	andeq	r0, r0, r4, lsl r0
 504:	0000042c 	andeq	r0, r0, ip, lsr #8
 508:	00012368 	andeq	r2, r1, r8, ror #6
 50c:	0000007c 	andeq	r0, r0, ip, ror r0
 510:	8b040e42 	blhi	103e20 <WriteSemaphore+0xee564>
 514:	0b0d4201 	bleq	350d20 <WriteSemaphore+0x33b464>
 518:	00000018 	andeq	r0, r0, r8, lsl r0
 51c:	0000042c 	andeq	r0, r0, ip, lsr #8
 520:	000123e4 	andeq	r2, r1, r4, ror #7
 524:	000000f4 	strdeq	r0, [r0], -r4
 528:	8b080e42 	blhi	203e38 <WriteSemaphore+0x1ee57c>
 52c:	42018e02 	andmi	r8, r1, #32
 530:	00040b0c 	andeq	r0, r4, ip, lsl #22
 534:	00000018 	andeq	r0, r0, r8, lsl r0
 538:	0000042c 	andeq	r0, r0, ip, lsr #8
 53c:	000124d8 	ldrdeq	r2, [r1], -r8
 540:	0000011c 	andeq	r0, r0, ip, lsl r1
 544:	8b080e42 	blhi	203e54 <WriteSemaphore+0x1ee598>
 548:	42018e02 	andmi	r8, r1, #32
 54c:	00040b0c 	andeq	r0, r4, ip, lsl #22
 550:	00000018 	andeq	r0, r0, r8, lsl r0
 554:	0000042c 	andeq	r0, r0, ip, lsr #8
 558:	000125f4 	strdeq	r2, [r1], -r4
 55c:	00000098 	muleq	r0, r8, r0
 560:	8b080e42 	blhi	203e70 <WriteSemaphore+0x1ee5b4>
 564:	42018e02 	andmi	r8, r1, #32
 568:	00040b0c 	andeq	r0, r4, ip, lsl #22
 56c:	00000018 	andeq	r0, r0, r8, lsl r0
 570:	0000042c 	andeq	r0, r0, ip, lsr #8
 574:	0001268c 	andeq	r2, r1, ip, lsl #13
 578:	00000034 	andeq	r0, r0, r4, lsr r0
 57c:	8b080e42 	blhi	203e8c <WriteSemaphore+0x1ee5d0>
 580:	42018e02 	andmi	r8, r1, #32
 584:	00040b0c 	andeq	r0, r4, ip, lsl #22
 588:	00000014 	andeq	r0, r0, r4, lsl r0
 58c:	0000042c 	andeq	r0, r0, ip, lsr #8
 590:	000126c0 	andeq	r2, r1, r0, asr #13
 594:	0000002c 	andeq	r0, r0, ip, lsr #32
 598:	8b040e42 	blhi	103ea8 <WriteSemaphore+0xee5ec>
 59c:	0b0d4201 	bleq	350da8 <WriteSemaphore+0x33b4ec>
 5a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 5a4:	0000042c 	andeq	r0, r0, ip, lsr #8
 5a8:	000126ec 	andeq	r2, r1, ip, ror #13
 5ac:	000001a4 	andeq	r0, r0, r4, lsr #3
 5b0:	840c0e42 	strhi	r0, [ip], #-3650	; 0xe42
 5b4:	8e028b03 	vmlahi.f64	d8, d2, d3
 5b8:	0b0c4201 	bleq	310dc4 <WriteSemaphore+0x2fb508>
 5bc:	00000004 	andeq	r0, r0, r4
 5c0:	00000018 	andeq	r0, r0, r8, lsl r0
 5c4:	0000042c 	andeq	r0, r0, ip, lsr #8
 5c8:	00012890 	muleq	r1, r0, r8
 5cc:	00000034 	andeq	r0, r0, r4, lsr r0
 5d0:	8b080e42 	blhi	203ee0 <WriteSemaphore+0x1ee624>
 5d4:	42018e02 	andmi	r8, r1, #32
 5d8:	00040b0c 	andeq	r0, r4, ip, lsl #22
 5dc:	00000014 	andeq	r0, r0, r4, lsl r0
 5e0:	0000042c 	andeq	r0, r0, ip, lsr #8
 5e4:	000128c4 	andeq	r2, r1, r4, asr #17
 5e8:	00000038 	andeq	r0, r0, r8, lsr r0
 5ec:	8b040e42 	blhi	103efc <WriteSemaphore+0xee640>
 5f0:	0b0d4201 	bleq	350dfc <WriteSemaphore+0x33b540>
 5f4:	00000014 	andeq	r0, r0, r4, lsl r0
 5f8:	0000042c 	andeq	r0, r0, ip, lsr #8
 5fc:	000128fc 	strdeq	r2, [r1], -ip
 600:	00000024 	andeq	r0, r0, r4, lsr #32
 604:	8b040e42 	blhi	103f14 <WriteSemaphore+0xee658>
 608:	0b0d4201 	bleq	350e14 <WriteSemaphore+0x33b558>
 60c:	00000018 	andeq	r0, r0, r8, lsl r0
 610:	0000042c 	andeq	r0, r0, ip, lsr #8
 614:	00012920 	andeq	r2, r1, r0, lsr #18
 618:	00000214 	andeq	r0, r0, r4, lsl r2
 61c:	8b080e42 	blhi	203f2c <WriteSemaphore+0x1ee670>
 620:	42018e02 	andmi	r8, r1, #32
 624:	00040b0c 	andeq	r0, r4, ip, lsl #22
 628:	00000018 	andeq	r0, r0, r8, lsl r0
 62c:	0000042c 	andeq	r0, r0, ip, lsr #8
 630:	00012b34 	andeq	r2, r1, r4, lsr fp
 634:	00000058 	andeq	r0, r0, r8, asr r0
 638:	8b080e42 	blhi	203f48 <WriteSemaphore+0x1ee68c>
 63c:	42018e02 	andmi	r8, r1, #32
 640:	00040b0c 	andeq	r0, r4, ip, lsl #22
 644:	00000018 	andeq	r0, r0, r8, lsl r0
 648:	0000042c 	andeq	r0, r0, ip, lsr #8
 64c:	00012b8c 	andeq	r2, r1, ip, lsl #23
 650:	0000005c 	andeq	r0, r0, ip, asr r0
 654:	8b080e42 	blhi	203f64 <WriteSemaphore+0x1ee6a8>
 658:	42018e02 	andmi	r8, r1, #32
 65c:	00040b0c 	andeq	r0, r4, ip, lsl #22
 660:	00000018 	andeq	r0, r0, r8, lsl r0
 664:	0000042c 	andeq	r0, r0, ip, lsr #8
 668:	00012be8 	andeq	r2, r1, r8, ror #23
 66c:	0000007c 	andeq	r0, r0, ip, ror r0
 670:	8b080e42 	blhi	203f80 <WriteSemaphore+0x1ee6c4>
 674:	42018e02 	andmi	r8, r1, #32
 678:	00040b0c 	andeq	r0, r4, ip, lsl #22
 67c:	00000014 	andeq	r0, r0, r4, lsl r0
 680:	0000042c 	andeq	r0, r0, ip, lsr #8
 684:	00012c64 	andeq	r2, r1, r4, ror #24
 688:	0000010c 	andeq	r0, r0, ip, lsl #2
 68c:	8b040e42 	blhi	103f9c <WriteSemaphore+0xee6e0>
 690:	0b0d4201 	bleq	350e9c <WriteSemaphore+0x33b5e0>
 694:	00000018 	andeq	r0, r0, r8, lsl r0
 698:	0000042c 	andeq	r0, r0, ip, lsr #8
 69c:	00012d70 	andeq	r2, r1, r0, ror sp
 6a0:	00000098 	muleq	r0, r8, r0
 6a4:	8b080e42 	blhi	203fb4 <WriteSemaphore+0x1ee6f8>
 6a8:	42018e02 	andmi	r8, r1, #32
 6ac:	00040b0c 	andeq	r0, r4, ip, lsl #22
 6b0:	00000018 	andeq	r0, r0, r8, lsl r0
 6b4:	0000042c 	andeq	r0, r0, ip, lsr #8
 6b8:	00012e08 	andeq	r2, r1, r8, lsl #28
 6bc:	00000118 	andeq	r0, r0, r8, lsl r1
 6c0:	8b080e42 	blhi	203fd0 <WriteSemaphore+0x1ee714>
 6c4:	42018e02 	andmi	r8, r1, #32
 6c8:	00040b0c 	andeq	r0, r4, ip, lsl #22
 6cc:	00000014 	andeq	r0, r0, r4, lsl r0
 6d0:	0000042c 	andeq	r0, r0, ip, lsr #8
 6d4:	00012f20 	andeq	r2, r1, r0, lsr #30
 6d8:	00000044 	andeq	r0, r0, r4, asr #32
 6dc:	8b040e42 	blhi	103fec <WriteSemaphore+0xee730>
 6e0:	0b0d4201 	bleq	350eec <WriteSemaphore+0x33b630>
 6e4:	00000018 	andeq	r0, r0, r8, lsl r0
 6e8:	0000042c 	andeq	r0, r0, ip, lsr #8
 6ec:	00012f64 	andeq	r2, r1, r4, ror #30
 6f0:	000000f4 	strdeq	r0, [r0], -r4
 6f4:	8b080e42 	blhi	204004 <WriteSemaphore+0x1ee748>
 6f8:	42018e02 	andmi	r8, r1, #32
 6fc:	00040b0c 	andeq	r0, r4, ip, lsl #22
 700:	00000014 	andeq	r0, r0, r4, lsl r0
 704:	0000042c 	andeq	r0, r0, ip, lsr #8
 708:	00013058 	andeq	r3, r1, r8, asr r0
 70c:	00000024 	andeq	r0, r0, r4, lsr #32
 710:	8b040e42 	blhi	104020 <WriteSemaphore+0xee764>
 714:	0b0d4201 	bleq	350f20 <WriteSemaphore+0x33b664>
 718:	00000018 	andeq	r0, r0, r8, lsl r0
 71c:	0000042c 	andeq	r0, r0, ip, lsr #8
 720:	0001307c 	andeq	r3, r1, ip, ror r0
 724:	00000038 	andeq	r0, r0, r8, lsr r0
 728:	8b080e42 	blhi	204038 <WriteSemaphore+0x1ee77c>
 72c:	42018e02 	andmi	r8, r1, #32
 730:	00040b0c 	andeq	r0, r4, ip, lsl #22
 734:	00000018 	andeq	r0, r0, r8, lsl r0
 738:	0000042c 	andeq	r0, r0, ip, lsr #8
 73c:	000130b4 	strheq	r3, [r1], -r4
 740:	000000bc 	strheq	r0, [r0], -ip
 744:	8b080e42 	blhi	204054 <WriteSemaphore+0x1ee798>
 748:	42018e02 	andmi	r8, r1, #32
 74c:	00040b0c 	andeq	r0, r4, ip, lsl #22
 750:	00000018 	andeq	r0, r0, r8, lsl r0
 754:	0000042c 	andeq	r0, r0, ip, lsr #8
 758:	00013170 	andeq	r3, r1, r0, ror r1
 75c:	000000bc 	strheq	r0, [r0], -ip
 760:	8b080e42 	blhi	204070 <WriteSemaphore+0x1ee7b4>
 764:	42018e02 	andmi	r8, r1, #32
 768:	00040b0c 	andeq	r0, r4, ip, lsl #22
 76c:	00000018 	andeq	r0, r0, r8, lsl r0
 770:	0000042c 	andeq	r0, r0, ip, lsr #8
 774:	0001322c 	andeq	r3, r1, ip, lsr #4
 778:	000000b8 	strheq	r0, [r0], -r8
 77c:	8b080e42 	blhi	20408c <WriteSemaphore+0x1ee7d0>
 780:	42018e02 	andmi	r8, r1, #32
 784:	00040b0c 	andeq	r0, r4, ip, lsl #22
 788:	00000018 	andeq	r0, r0, r8, lsl r0
 78c:	0000042c 	andeq	r0, r0, ip, lsr #8
 790:	000132e4 	andeq	r3, r1, r4, ror #5
 794:	000000b4 	strheq	r0, [r0], -r4
 798:	8b080e42 	blhi	2040a8 <WriteSemaphore+0x1ee7ec>
 79c:	42018e02 	andmi	r8, r1, #32
 7a0:	00040b0c 	andeq	r0, r4, ip, lsl #22
 7a4:	00000018 	andeq	r0, r0, r8, lsl r0
 7a8:	0000042c 	andeq	r0, r0, ip, lsr #8
 7ac:	00013398 	muleq	r1, r8, r3
 7b0:	000000b4 	strheq	r0, [r0], -r4
 7b4:	8b080e42 	blhi	2040c4 <WriteSemaphore+0x1ee808>
 7b8:	42018e02 	andmi	r8, r1, #32
 7bc:	00040b0c 	andeq	r0, r4, ip, lsl #22
 7c0:	00000018 	andeq	r0, r0, r8, lsl r0
 7c4:	0000042c 	andeq	r0, r0, ip, lsr #8
 7c8:	0001344c 	andeq	r3, r1, ip, asr #8
 7cc:	00000030 	andeq	r0, r0, r0, lsr r0
 7d0:	8b080e42 	blhi	2040e0 <WriteSemaphore+0x1ee824>
 7d4:	42018e02 	andmi	r8, r1, #32
 7d8:	00040b0c 	andeq	r0, r4, ip, lsl #22
 7dc:	0000000c 	andeq	r0, r0, ip
 7e0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 7e4:	7c020001 	stcvc	0, cr0, [r2], {1}
 7e8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 7ec:	00000018 	andeq	r0, r0, r8, lsl r0
 7f0:	000007dc 	ldrdeq	r0, [r0], -ip
 7f4:	0001347c 	andeq	r3, r1, ip, ror r4
 7f8:	000001dc 	ldrdeq	r0, [r0], -ip
 7fc:	8b080e42 	blhi	20410c <WriteSemaphore+0x1ee850>
 800:	42018e02 	andmi	r8, r1, #32
 804:	00040b0c 	andeq	r0, r4, ip, lsl #22
 808:	00000018 	andeq	r0, r0, r8, lsl r0
 80c:	000007dc 	ldrdeq	r0, [r0], -ip
 810:	00013658 	andeq	r3, r1, r8, asr r6
 814:	00000080 	andeq	r0, r0, r0, lsl #1
 818:	8b080e42 	blhi	204128 <WriteSemaphore+0x1ee86c>
 81c:	42018e02 	andmi	r8, r1, #32
 820:	00040b0c 	andeq	r0, r4, ip, lsl #22
 824:	00000014 	andeq	r0, r0, r4, lsl r0
 828:	000007dc 	ldrdeq	r0, [r0], -ip
 82c:	000136d8 	ldrdeq	r3, [r1], -r8
 830:	00000024 	andeq	r0, r0, r4, lsr #32
 834:	8b040e42 	blhi	104144 <WriteSemaphore+0xee888>
 838:	0b0d4201 	bleq	351044 <WriteSemaphore+0x33b788>
 83c:	00000014 	andeq	r0, r0, r4, lsl r0
 840:	000007dc 	ldrdeq	r0, [r0], -ip
 844:	000136fc 	strdeq	r3, [r1], -ip
 848:	00000014 	andeq	r0, r0, r4, lsl r0
 84c:	8b040e42 	blhi	10415c <WriteSemaphore+0xee8a0>
 850:	0b0d4201 	bleq	35105c <WriteSemaphore+0x33b7a0>
 854:	00000014 	andeq	r0, r0, r4, lsl r0
 858:	000007dc 	ldrdeq	r0, [r0], -ip
 85c:	00013710 	andeq	r3, r1, r0, lsl r7
 860:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 864:	8b040e42 	blhi	104174 <WriteSemaphore+0xee8b8>
 868:	0b0d4201 	bleq	351074 <WriteSemaphore+0x33b7b8>
 86c:	00000014 	andeq	r0, r0, r4, lsl r0
 870:	000007dc 	ldrdeq	r0, [r0], -ip
 874:	00013800 	andeq	r3, r1, r0, lsl #16
 878:	00000150 	andeq	r0, r0, r0, asr r1
 87c:	8b040e42 	blhi	10418c <WriteSemaphore+0xee8d0>
 880:	0b0d4201 	bleq	35108c <WriteSemaphore+0x33b7d0>
 884:	0000000c 	andeq	r0, r0, ip
 888:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 88c:	7c020001 	stcvc	0, cr0, [r2], {1}
 890:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 894:	00000014 	andeq	r0, r0, r4, lsl r0
 898:	00000884 	andeq	r0, r0, r4, lsl #17
 89c:	00013968 	andeq	r3, r1, r8, ror #18
 8a0:	00000020 	andeq	r0, r0, r0, lsr #32
 8a4:	8b040e42 	blhi	1041b4 <WriteSemaphore+0xee8f8>
 8a8:	0b0d4201 	bleq	3510b4 <WriteSemaphore+0x33b7f8>
 8ac:	00000014 	andeq	r0, r0, r4, lsl r0
 8b0:	00000884 	andeq	r0, r0, r4, lsl #17
 8b4:	00013988 	andeq	r3, r1, r8, lsl #19
 8b8:	00000020 	andeq	r0, r0, r0, lsr #32
 8bc:	8b040e42 	blhi	1041cc <WriteSemaphore+0xee910>
 8c0:	0b0d4201 	bleq	3510cc <WriteSemaphore+0x33b810>
 8c4:	00000020 	andeq	r0, r0, r0, lsr #32
 8c8:	00000884 	andeq	r0, r0, r4, lsl #17
 8cc:	000139a8 	andeq	r3, r1, r8, lsr #19
 8d0:	00000110 	andeq	r0, r0, r0, lsl r1
 8d4:	84140e42 	ldrhi	r0, [r4], #-3650	; 0xe42
 8d8:	86048505 	strhi	r8, [r4], -r5, lsl #10
 8dc:	8e028b03 	vmlahi.f64	d8, d2, d3
 8e0:	0b0c4201 	bleq	3110ec <WriteSemaphore+0x2fb830>
 8e4:	00000004 	andeq	r0, r0, r4
 8e8:	00000014 	andeq	r0, r0, r4, lsl r0
 8ec:	00000884 	andeq	r0, r0, r4, lsl #17
 8f0:	00013ab8 			; <UNDEFINED> instruction: 0x00013ab8
 8f4:	00000020 	andeq	r0, r0, r0, lsr #32
 8f8:	8b040e42 	blhi	104208 <WriteSemaphore+0xee94c>
 8fc:	0b0d4201 	bleq	351108 <WriteSemaphore+0x33b84c>
 900:	00000014 	andeq	r0, r0, r4, lsl r0
 904:	00000884 	andeq	r0, r0, r4, lsl #17
 908:	00013ad8 	ldrdeq	r3, [r1], -r8
 90c:	0000007c 	andeq	r0, r0, ip, ror r0
 910:	8b040e42 	blhi	104220 <WriteSemaphore+0xee964>
 914:	0b0d4201 	bleq	351120 <WriteSemaphore+0x33b864>
 918:	00000018 	andeq	r0, r0, r8, lsl r0
 91c:	00000884 	andeq	r0, r0, r4, lsl #17
 920:	00013b54 	andeq	r3, r1, r4, asr fp
 924:	00000064 	andeq	r0, r0, r4, rrx
 928:	8b080e42 	blhi	204238 <WriteSemaphore+0x1ee97c>
 92c:	42018e02 	andmi	r8, r1, #32
 930:	00040b0c 	andeq	r0, r4, ip, lsl #22
 934:	00000014 	andeq	r0, r0, r4, lsl r0
 938:	00000884 	andeq	r0, r0, r4, lsl #17
 93c:	00013bb8 			; <UNDEFINED> instruction: 0x00013bb8
 940:	0000007c 	andeq	r0, r0, ip, ror r0
 944:	8b040e42 	blhi	104254 <WriteSemaphore+0xee998>
 948:	0b0d4201 	bleq	351154 <WriteSemaphore+0x33b898>
 94c:	00000014 	andeq	r0, r0, r4, lsl r0
 950:	00000884 	andeq	r0, r0, r4, lsl #17
 954:	00013c34 	andeq	r3, r1, r4, lsr ip
 958:	0000005c 	andeq	r0, r0, ip, asr r0
 95c:	8b040e42 	blhi	10426c <WriteSemaphore+0xee9b0>
 960:	0b0d4201 	bleq	35116c <WriteSemaphore+0x33b8b0>
 964:	00000018 	andeq	r0, r0, r8, lsl r0
 968:	00000884 	andeq	r0, r0, r4, lsl #17
 96c:	00013c90 	muleq	r1, r0, ip
 970:	00000018 	andeq	r0, r0, r8, lsl r0
 974:	8b080e42 	blhi	204284 <WriteSemaphore+0x1ee9c8>
 978:	42018e02 	andmi	r8, r1, #32
 97c:	00040b0c 	andeq	r0, r4, ip, lsl #22
 980:	00000018 	andeq	r0, r0, r8, lsl r0
 984:	00000884 	andeq	r0, r0, r4, lsl #17
 988:	00013ca8 	andeq	r3, r1, r8, lsr #25
 98c:	00000018 	andeq	r0, r0, r8, lsl r0
 990:	8b080e42 	blhi	2042a0 <WriteSemaphore+0x1ee9e4>
 994:	42018e02 	andmi	r8, r1, #32
 998:	00040b0c 	andeq	r0, r4, ip, lsl #22
 99c:	0000000c 	andeq	r0, r0, ip
 9a0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 9a4:	7c020001 	stcvc	0, cr0, [r2], {1}
 9a8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 9ac:	00000014 	andeq	r0, r0, r4, lsl r0
 9b0:	0000099c 	muleq	r0, ip, r9
 9b4:	00013cc0 	andeq	r3, r1, r0, asr #25
 9b8:	000000dc 	ldrdeq	r0, [r0], -ip
 9bc:	8b040e42 	blhi	1042cc <WriteSemaphore+0xeea10>
 9c0:	0b0d4201 	bleq	3511cc <WriteSemaphore+0x33b910>
 9c4:	00000014 	andeq	r0, r0, r4, lsl r0
 9c8:	0000099c 	muleq	r0, ip, r9
 9cc:	00013d9c 	muleq	r1, ip, sp
 9d0:	000000a0 	andeq	r0, r0, r0, lsr #1
 9d4:	8b040e42 	blhi	1042e4 <WriteSemaphore+0xeea28>
 9d8:	0b0d4201 	bleq	3511e4 <WriteSemaphore+0x33b928>
 9dc:	0000000c 	andeq	r0, r0, ip
 9e0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 9e4:	7c020001 	stcvc	0, cr0, [r2], {1}
 9e8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 9ec:	00000018 	andeq	r0, r0, r8, lsl r0
 9f0:	000009dc 	ldrdeq	r0, [r0], -ip
 9f4:	00013e3c 	andeq	r3, r1, ip, lsr lr
 9f8:	000000ac 	andeq	r0, r0, ip, lsr #1
 9fc:	8b080e42 	blhi	20430c <WriteSemaphore+0x1eea50>
 a00:	42018e02 	andmi	r8, r1, #32
 a04:	00040b0c 	andeq	r0, r4, ip, lsl #22
 a08:	00000018 	andeq	r0, r0, r8, lsl r0
 a0c:	000009dc 	ldrdeq	r0, [r0], -ip
 a10:	00013ee8 	andeq	r3, r1, r8, ror #29
 a14:	00000090 	muleq	r0, r0, r0
 a18:	8b080e42 	blhi	204328 <WriteSemaphore+0x1eea6c>
 a1c:	42018e02 	andmi	r8, r1, #32
 a20:	00040b0c 	andeq	r0, r4, ip, lsl #22
 a24:	0000001c 	andeq	r0, r0, ip, lsl r0
 a28:	000009dc 	ldrdeq	r0, [r0], -ip
 a2c:	00013f78 	andeq	r3, r1, r8, ror pc
 a30:	0000007c 	andeq	r0, r0, ip, ror r0
 a34:	83100e42 	tsthi	r0, #1056	; 0x420
 a38:	8b038404 	blhi	e1a50 <WriteSemaphore+0xcc194>
 a3c:	42018e02 	andmi	r8, r1, #32
 a40:	00040b0c 	andeq	r0, r4, ip, lsl #22
 a44:	0000000c 	andeq	r0, r0, ip
 a48:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 a4c:	7c020001 	stcvc	0, cr0, [r2], {1}
 a50:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 a54:	00000018 	andeq	r0, r0, r8, lsl r0
 a58:	00000a44 	andeq	r0, r0, r4, asr #20
 a5c:	00013ff4 	strdeq	r3, [r1], -r4
 a60:	00000028 	andeq	r0, r0, r8, lsr #32
 a64:	8b080e42 	blhi	204374 <WriteSemaphore+0x1eeab8>
 a68:	42018e02 	andmi	r8, r1, #32
 a6c:	00040b0c 	andeq	r0, r4, ip, lsl #22
 a70:	00000018 	andeq	r0, r0, r8, lsl r0
 a74:	00000a44 	andeq	r0, r0, r4, asr #20
 a78:	0001401c 	andeq	r4, r1, ip, lsl r0
 a7c:	00000018 	andeq	r0, r0, r8, lsl r0
 a80:	8b080e42 	blhi	204390 <WriteSemaphore+0x1eead4>
 a84:	42018e02 	andmi	r8, r1, #32
 a88:	00040b0c 	andeq	r0, r4, ip, lsl #22
 a8c:	00000018 	andeq	r0, r0, r8, lsl r0
 a90:	00000a44 	andeq	r0, r0, r4, asr #20
 a94:	00014034 	andeq	r4, r1, r4, lsr r0
 a98:	00000064 	andeq	r0, r0, r4, rrx
 a9c:	8b080e42 	blhi	2043ac <WriteSemaphore+0x1eeaf0>
 aa0:	42018e02 	andmi	r8, r1, #32
 aa4:	00040b0c 	andeq	r0, r4, ip, lsl #22
 aa8:	0000000c 	andeq	r0, r0, ip
 aac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 ab0:	7c020001 	stcvc	0, cr0, [r2], {1}
 ab4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 ab8:	00000018 	andeq	r0, r0, r8, lsl r0
 abc:	00000aa8 	andeq	r0, r0, r8, lsr #21
 ac0:	00014098 	muleq	r1, r8, r0
 ac4:	0000002c 	andeq	r0, r0, ip, lsr #32
 ac8:	8b080e42 	blhi	2043d8 <WriteSemaphore+0x1eeb1c>
 acc:	42018e02 	andmi	r8, r1, #32
 ad0:	00040b0c 	andeq	r0, r4, ip, lsl #22
 ad4:	00000018 	andeq	r0, r0, r8, lsl r0
 ad8:	00000aa8 	andeq	r0, r0, r8, lsr #21
 adc:	000140c4 	andeq	r4, r1, r4, asr #1
 ae0:	00000040 	andeq	r0, r0, r0, asr #32
 ae4:	8b080e42 	blhi	2043f4 <WriteSemaphore+0x1eeb38>
 ae8:	42018e02 	andmi	r8, r1, #32
 aec:	00040b0c 	andeq	r0, r4, ip, lsl #22
 af0:	00000018 	andeq	r0, r0, r8, lsl r0
 af4:	00000aa8 	andeq	r0, r0, r8, lsr #21
 af8:	00014104 	andeq	r4, r1, r4, lsl #2
 afc:	000000bc 	strheq	r0, [r0], -ip
 b00:	8b080e42 	blhi	204410 <WriteSemaphore+0x1eeb54>
 b04:	42018e02 	andmi	r8, r1, #32
 b08:	00040b0c 	andeq	r0, r4, ip, lsl #22
 b0c:	0000000c 	andeq	r0, r0, ip
 b10:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 b14:	7c020001 	stcvc	0, cr0, [r2], {1}
 b18:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 b1c:	00000018 	andeq	r0, r0, r8, lsl r0
 b20:	00000b0c 	andeq	r0, r0, ip, lsl #22
 b24:	0001421c 	andeq	r4, r1, ip, lsl r2
 b28:	000000f4 	strdeq	r0, [r0], -r4
 b2c:	84100e44 	ldrhi	r0, [r0], #-3652	; 0xe44
 b30:	86038504 	strhi	r8, [r3], -r4, lsl #10
 b34:	00018702 	andeq	r8, r1, r2, lsl #14
 b38:	0000000c 	andeq	r0, r0, ip
 b3c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 b40:	7c020001 	stcvc	0, cr0, [r2], {1}
 b44:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 b48:	00000014 	andeq	r0, r0, r4, lsl r0
 b4c:	00000b38 	andeq	r0, r0, r8, lsr fp
 b50:	00014310 	andeq	r4, r1, r0, lsl r3
 b54:	000000f8 	strdeq	r0, [r0], -r8
 b58:	84080e44 	strhi	r0, [r8], #-3652	; 0xe44
 b5c:	00018502 	andeq	r8, r1, r2, lsl #10
 b60:	0000000c 	andeq	r0, r0, ip
 b64:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 b68:	7c020001 	stcvc	0, cr0, [r2], {1}
 b6c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 b70:	00000018 	andeq	r0, r0, r8, lsl r0
 b74:	00000b60 	andeq	r0, r0, r0, ror #22
 b78:	00014408 	andeq	r4, r1, r8, lsl #8
 b7c:	000000c8 	andeq	r0, r0, r8, asr #1
 b80:	840c0e46 	strhi	r0, [ip], #-3654	; 0xe46
 b84:	86028503 	strhi	r8, [r2], -r3, lsl #10
 b88:	00000001 	andeq	r0, r0, r1
